/*
 * DirectionChooserComponent.java
 *
 * Created on 14. September 2008, 14:53
 */
package de.tor.tribes.ui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import javax.swing.JFrame;

/**
 *
 * @author  Charon
 */
public class DirectionChooserComponent extends javax.swing.JPanel {

    double d1 = 0;
    double d2 = 0;

    /** Creates new form DirectionChooserComponent */
    public DirectionChooserComponent() {
        initComponents();
        addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();

                //vertical distance of pointer to center
                double a = getHeight() / 2 - y;
                //horizontal distance of pointer to center
                double b = (getWidth() / 2 - x) * -1;
                //hypotenuse of a and b right angle
                double c = Math.sqrt(a * a + b * b);
                //ratio of adjecent side to hypotenuse
                double k = b / c;
                //angle value in radians
                double alpha = Math.asin(k);
                //angle in degrees
                alpha = alpha * (180 / Math.PI);
                //alpha -= 180;
                //adjust angle value based on quadrant
                if (a < 0 && b < 0) {
                    alpha = -alpha;
                } else if (a >= 0 && b < 0) {
                    alpha = alpha + 180;
                } else if (a > 0 && b >= 0) {
                    alpha = alpha + 180;
                } else if (a <= 0 && b > 0) {
                    alpha = -1 * (alpha - 90) + 270;
                }
                //if (e.getButton() == MouseEvent.BUTTON1) {
                    d1 = alpha;

                ///} else if (e.getButton() == MouseEvent.BUTTON3) {
                //    d2 = alpha;
                //}
                repaint();
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    @Override
    public void setSize(int w, int h) {
        super.setSize(w, w);
    }

    @Override
    public void setSize(Dimension d) {
        super.setSize((int) d.getWidth(), (int) d.getWidth());
    }

    public void paint(Graphics g) {
        super.paint(g);
        Point2D.Double m = new Point2D.Double(getWidth() / 2, getWidth() / 2);
        int r = getWidth() / 2 - 3;
        //  double deg = 45.0;
        double x1 = r * Math.cos(2 * Math.PI * d1 / 360) + getWidth() / 2;
        double y1 = r * Math.sin(2 * Math.PI * d1 / 360) + getWidth() / 2;
        double x2 = r * Math.cos(2 * Math.PI * d2 / 360) + getWidth() / 2;
        double y2 = r * Math.sin(2 * Math.PI * d2 / 360) + getWidth() / 2;
        Graphics2D g2d = (Graphics2D) g;

        Paint def = g2d.getPaint();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setPaint(new GradientPaint(getWidth() / 2, getWidth() / 2, Color.LIGHT_GRAY, getWidth(), getWidth(), Color.DARK_GRAY, true));
        g2d.setStroke(new BasicStroke(5.0f));
        g2d.drawOval(3, 3, getWidth() - 6, getWidth() - 6);
        g2d.setPaint(new GradientPaint(getWidth() / 2, getWidth() / 2, Color.WHITE, getWidth(), getWidth(), Color.LIGHT_GRAY, true));
        g2d.setStroke(new BasicStroke(1.5f));
        g2d.drawOval(3, 3, getWidth() - 6, getWidth() - 6);
        g2d.setPaint(def);
       // Polygon p = new Polygon(new int[]{(int) m.x, (int) x1, (int) x2}, new int[]{(int) m.y, (int) y1, (int) y2}, 3);
        //g2d.fillPolygon(p);
        System.out.println(d1);
        int start = (int)d1 - 15;
        int end = (int)d1 + 15;
        if(start > 360){
            start -= 360;
        }else if(start < 0){
            start *= -1;
        }
        
        if(end > 360){
            end -= 360;
        }else if(end < 0){
            end *= -1;
        }
        System.out.println(start + " - " + end);
        g2d.fillArc(0, 0, getWidth(),getWidth(), start, end);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String[] args) {
        JFrame f = new JFrame();
        DirectionChooserComponent dc = new DirectionChooserComponent();
        dc.setBackground(Color.GREEN);
        dc.setSize(101,101);
        dc.setPreferredSize(new Dimension(101,101));
        dc.setMaximumSize(new Dimension(101,101));
        f.add(dc);
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.pack();
        f.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
