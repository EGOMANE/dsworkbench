/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PopupInfoFrame.java
 *
 * Created on 23.12.2009, 15:35:40
 */
package de.tor.tribes.ui;

import de.tor.tribes.types.Village;
import java.awt.MouseInfo;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author Jejkal
 */
public class PopupInfoFrame extends javax.swing.JFrame {

    private static PopupInfoFrame SINGLETON = null;
    private Timer mVisibilityTimer = null;
    private TimerTask visibleTask = null;

    public static synchronized PopupInfoFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new PopupInfoFrame();
        }
        return SINGLETON;
    }

    /** Creates new form PopupInfoFrame */
    public PopupInfoFrame() {
        initComponents();
       /* visibleTask = new TimerTask() {

            @Override
            public void run() {
                System.out.println("EXECUTE");
                PopupInfoFrame.getSingleton().setVisible(true);
            }
        };*/
        mVisibilityTimer = new Timer("PopupTimer", true);
        new LocationThread().start();
    }

    public void setVisible(boolean v) {

        //System.out.println("Cancel all > " + v);
        try {
            visibleTask.cancel();
            mVisibilityTimer.purge();
        } catch (Exception e) {
        }

        super.setVisible(v);
    }
    boolean sched = false;

    public synchronized void triggerVisibility() {
        if (visibleTask == null) {
            //System.out.println("NEW");
            visibleTask = new TimerTask() {

                @Override
                public void run() {
                    System.out.println("RUN!!!");
                    PopupInfoFrame.getSingleton().setVisible(true);
                }
            };
            //task is over

            mVisibilityTimer.schedule(visibleTask, 1000);
           // System.out.println("After: " + visibleTask.scheduledExecutionTime());
        } else if (visibleTask.scheduledExecutionTime() > System.currentTimeMillis()) {
            //wait
          //  System.out.println("Exec: " + (visibleTask.scheduledExecutionTime() - System.currentTimeMillis()));
           // System.out.println("wait");
        } else {
            ///System.out.println("retime");
            try {
                visibleTask.cancel();
                visibleTask = null;
            } catch (Exception e) {
            }
            visibleTask = new TimerTask() {

                @Override
                public void run() {
                    PopupInfoFrame.getSingleton().setVisible(true);
                }
            };
            mVisibilityTimer.schedule(visibleTask, 1000);
        }
    }

    public void setInfoItem(Object o) {
        if (o == null) {
            System.out.println("HIDE!!!");
            setVisible(false);
            return;
        }
        if (o instanceof Village) {
            try {
                jLabel1.setText(o.toString());
            } catch (Exception e) {
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setUndecorated(true);

        jLabel1.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        TimerTask visibleTask = new TimerTask() {

            @Override
            public void run() {
                System.out.println("Execute");
            }
        };
        //task is over
        Timer mVisibilityTimer = new Timer(true);
        mVisibilityTimer.schedule(visibleTask, 2000);
        System.out.println("Done!");


        try {
            Thread.sleep(5000);
        } catch (Exception e) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}

class LocationThread extends Thread {

    public LocationThread() {
        setDaemon(true);
    }

    public void run() {
        while (true) {
            PopupInfoFrame.getSingleton().setLocation(MouseInfo.getPointerInfo().getLocation());
            try {
                sleep(50);
            } catch (Exception e) {
            }

        }
    }
}
