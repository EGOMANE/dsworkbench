/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TroopSplitDialog.java
 *
 * Created on 14.01.2011, 10:01:07
 */
package de.tor.tribes.ui;

import de.tor.tribes.io.DataHolder;
import de.tor.tribes.io.UnitHolder;
import de.tor.tribes.types.Village;
import de.tor.tribes.ui.renderer.AlternatingColorCellRenderer;
import de.tor.tribes.ui.renderer.TroopAmountListCellRenderer;
import de.tor.tribes.ui.renderer.TroopSplitListCellRenderer;
import de.tor.tribes.ui.renderer.UnitListCellRenderer;
import de.tor.tribes.util.JOptionPaneHelper;
import de.tor.tribes.util.troops.TroopsManager;
import de.tor.tribes.util.troops.VillageTroopsHolder;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Jejkal
 */
public class TroopSplitDialog extends javax.swing.JDialog {

    private static Logger logger = Logger.getLogger("TroopSplitDialog");
    private boolean isInitialized = false;
    private Hashtable<UnitHolder, Integer> mSplitAmounts = new Hashtable<UnitHolder, Integer>();
    private List<TroopSplit> mSplits = new LinkedList<TroopSplit>();

    /** Creates new form TroopSplitDialog */
    public TroopSplitDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**Initialize all entries, renderers and reset the entire view*/
    private void initialize() {
        DefaultComboBoxModel unitSelectionModel = new DefaultComboBoxModel(DataHolder.getSingleton().getUnits().toArray(new UnitHolder[]{}));
        jUnitSelectionBox.setModel(unitSelectionModel);
        jAmountField.setText("0");
        jTroopsPerSplitList.setModel(new DefaultListModel());
        jUnitSelectionBox.setRenderer(new UnitListCellRenderer());
        jTroopsPerSplitList.setCellRenderer(new TroopAmountListCellRenderer());
        jSplitsList.setCellRenderer(new TroopSplitListCellRenderer());
        mSplitAmounts.clear();
        isInitialized = true;
    }

    /**Insert the provided village list and show the split dialog*/
    public void setupAndShow(List<Village> pVillageList) {
        if (!isInitialized) {
            initialize();
        }
        mSplits.clear();
        for (Village v : pVillageList) {
            mSplits.add(new TroopSplit(v));
        }
        updateSplitsList();
        setVisible(true);
    }

    public TroopSplit[] getSplits() {
        return mSplits.toArray(new TroopSplit[]{});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jAcceptButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSplitsList = new javax.swing.JList();
        jUnitSelectionBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTroopsPerSplitList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jAmountField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jToleranceSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();

        setTitle("Truppen aufsplitten");
        setAlwaysOnTop(true);
        setModal(true);

        jPanel1.setBackground(new java.awt.Color(239, 235, 223));

        jButton2.setText("Abbrechen");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSubmitEvent(evt);
            }
        });

        jAcceptButton.setText("Übernehmen");
        jAcceptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSubmitEvent(evt);
            }
        });

        jScrollPane1.setViewportView(jSplitsList);

        jUnitSelectionBox.setMaximumSize(new java.awt.Dimension(56, 25));
        jUnitSelectionBox.setMinimumSize(new java.awt.Dimension(56, 25));
        jUnitSelectionBox.setPreferredSize(new java.awt.Dimension(56, 25));

        jScrollPane2.setViewportView(jTroopsPerSplitList);

        jLabel1.setText("Truppen pro Split");

        jAmountField.setText("700");
        jAmountField.setMaximumSize(new java.awt.Dimension(50, 20));
        jAmountField.setMinimumSize(new java.awt.Dimension(50, 20));
        jAmountField.setPreferredSize(new java.awt.Dimension(50, 20));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/add.gif"))); // NOI18N
        jButton3.setToolTipText("Truppenanzahl hinzufügen");
        jButton3.setMaximumSize(new java.awt.Dimension(25, 25));
        jButton3.setMinimumSize(new java.awt.Dimension(25, 25));
        jButton3.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireAddSplitAmountEvent(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/remove.gif"))); // NOI18N
        jButton4.setToolTipText("Gewählte Truppenanzahl löschen");
        jButton4.setMaximumSize(new java.awt.Dimension(25, 25));
        jButton4.setMinimumSize(new java.awt.Dimension(25, 25));
        jButton4.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireRemoveSplitAmountEvent(evt);
            }
        });

        jLabel2.setText("ZulässigeAbweichung");

        jToleranceSlider.setMajorTickSpacing(10);
        jToleranceSlider.setMaximum(50);
        jToleranceSlider.setMinorTickSpacing(1);
        jToleranceSlider.setPaintLabels(true);
        jToleranceSlider.setPaintTicks(true);
        jToleranceSlider.setValue(10);
        jToleranceSlider.setOpaque(false);
        jToleranceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireToleranceChangedEvent(evt);
            }
        });

        jLabel3.setText("%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAcceptButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jUnitSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jToleranceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jUnitSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addGap(15, 15, 15))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jToleranceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAcceptButton)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireAddSplitAmountEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireAddSplitAmountEvent
        int amount = 0;
        UnitHolder unit = null;
        try {
            amount = Integer.parseInt(jAmountField.getText());
        } catch (Exception e) {
            JOptionPaneHelper.showWarningBox(this, "Ungültige Truppenzahl", "Fehler");
            return;
        }

        try {
            unit = (UnitHolder) jUnitSelectionBox.getSelectedItem();
            if (unit == null) {
                unit = (UnitHolder) jUnitSelectionBox.getModel().getElementAt(0);
            }
        } catch (Exception e) {
            logger.error("Failed to obtain unit", e);
            JOptionPaneHelper.showWarningBox(this, "Ungültige Einheit", "Fehler");
            return;
        }
        mSplitAmounts.put(unit, amount);
        updateAmountsList();

    }//GEN-LAST:event_fireAddSplitAmountEvent

    private void fireRemoveSplitAmountEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireRemoveSplitAmountEvent
        UnitHolder unit = null;
        try {
            unit = (UnitHolder) jUnitSelectionBox.getSelectedItem();
            if (unit == null) {
                unit = (UnitHolder) jUnitSelectionBox.getModel().getElementAt(0);
            }
        } catch (Exception e) {
            logger.error("Failed to obtain unit", e);
            JOptionPaneHelper.showWarningBox(this, "Ungültige Einheit", "Fehler");
            return;
        }
        mSplitAmounts.remove(unit);
        updateAmountsList();
    }//GEN-LAST:event_fireRemoveSplitAmountEvent

    private void fireSubmitEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireSubmitEvent
        if (evt.getSource() != jAcceptButton) {
            mSplits.clear();
        }

        setVisible(false);
    }//GEN-LAST:event_fireSubmitEvent

    private void fireToleranceChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireToleranceChangedEvent
        updateSplitsList();
    }//GEN-LAST:event_fireToleranceChangedEvent

    /**Update the list of split amounts*/
    private void updateAmountsList() {
        DefaultListModel model = new DefaultListModel();
        for (UnitHolder unit : DataHolder.getSingleton().getUnits()) {
            Integer amount = mSplitAmounts.get(unit);
            if (amount != null) {
                model.addElement(amount + " " + unit.getPlainName());
            }
        }
        jTroopsPerSplitList.setModel(model);
        updateSplitsList();
    }

    /**Update all splits and the split list itself*/
    private void updateSplitsList() {
        DefaultListModel model = new DefaultListModel();
        for (TroopSplit split : mSplits) {
            split.update(mSplitAmounts, jToleranceSlider.getValue());
            model.addElement(split);
        }
        jSplitsList.setModel(model);
    }

    /**Internal class for data holding*/
    public static class TroopSplit {

        private Village mVillage = null;
        private int iSplitCount = 1;

        public TroopSplit(Village pVillage) {
            mVillage = pVillage;
        }

        public void update(Hashtable<UnitHolder, Integer> pSplitValues, int pTolerance) {
            if (pSplitValues.isEmpty()) {
                iSplitCount = 1;
                return;
            }
            Enumeration<UnitHolder> unitKeys = pSplitValues.keys();
            int maxSplitCount = -1;
            while (unitKeys.hasMoreElements()) {
                UnitHolder unitKey = unitKeys.nextElement();
                Integer splitAmount = pSplitValues.get(unitKey);
                VillageTroopsHolder troopsHolder = TroopsManager.getSingleton().getTroopsForVillage(mVillage);
                if (troopsHolder == null) {
                    //do nothing if troops info is not available
                    iSplitCount = -1;
                    return;
                }

                Hashtable<UnitHolder, Integer> ownTroopsInVillage = troopsHolder.getOwnTroops();
                if (ownTroopsInVillage == null) {
                    //do nothing if there are no own troops in the village
                    iSplitCount = 0;
                    return;
                }

                int amountInVillage = ownTroopsInVillage.get(unitKey);
                int split = amountInVillage / splitAmount;
                int currentSplitCount = split;
                int rest = amountInVillage - split * splitAmount;
                if (100.0 * (double) rest / (double) splitAmount >= 100.0 - (double) pTolerance) {
                    currentSplitCount++;
                }
                if (maxSplitCount == -1 || (currentSplitCount < maxSplitCount)) {
                    maxSplitCount = currentSplitCount;
                }
            }
            iSplitCount = maxSplitCount;
        }

        public Village getVillage() {
            return mVillage;
        }

        public int getSplitCount() {
            return iSplitCount;
        }

        public String toString() {
            StringBuilder builder = new StringBuilder();
            builder.append(mVillage.toString()).append(" (").append(iSplitCount).append("x)");
            return builder.toString();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAcceptButton;
    private javax.swing.JTextField jAmountField;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList jSplitsList;
    private javax.swing.JSlider jToleranceSlider;
    private javax.swing.JList jTroopsPerSplitList;
    private javax.swing.JComboBox jUnitSelectionBox;
    // End of variables declaration//GEN-END:variables
}
