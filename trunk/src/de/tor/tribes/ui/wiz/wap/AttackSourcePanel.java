/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AttackSourcePanel.java
 *
 * Created on Oct 15, 2011, 9:54:36 AM
 */
package de.tor.tribes.ui.wiz.wap;

import de.tor.tribes.control.ManageableType;
import de.tor.tribes.io.DataHolder;
import de.tor.tribes.types.AbstractForm;
import de.tor.tribes.types.Ally;
import de.tor.tribes.types.FightReport;
import de.tor.tribes.types.NoAlly;
import de.tor.tribes.types.Tag;
import de.tor.tribes.types.Tribe;
import de.tor.tribes.types.Village;
import de.tor.tribes.ui.views.DSWorkbenchSOSRequestAnalyzer;
import de.tor.tribes.ui.views.DSWorkbenchSelectionFrame;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.ProfileManager;
import de.tor.tribes.util.map.FormManager;
import de.tor.tribes.util.report.ReportManager;
import de.tor.tribes.util.tag.TagManager;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Torridity
 */
public class AttackSourcePanel extends javax.swing.JPanel {

    private static AttackSourcePanel singleton = null;
    private static final String GENERAL_INFO = "Du befindest dich im <b>Angriffsmodus</b>. Hier kannst du die Herkunftsd&ouml;rfer ausw&auml;hlen, die f&uuml;r Angriffe verwendet werden d&uuml;rfen. Hierf&uuml;r hast die folgenden M&ouml;glichkeiten: <ul> <li>Einf&uuml;gen von Dorfkoordinaten aus der Zwischenablage per STRG+V</li> <li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus der Gruppen&uuml;bersicht</li> <li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus dem SOS-Analyzer</li> <li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus Berichten</li> <li>Einf&uuml;gen aus der Auswahlübersicht</li> <li>Manuelle Eingabe</li> </ul> </html>";
    private static final String GROUP_INFO = "<html><h2>Datenquelle Gruppenübersicht</h2><br/>Hier k&ouml;nnen gezielt D&ouml;rfer verwendet werden, die sich in bestimmten Gruppen befinden. Die Auswahl der zu verwendenden Gruppe ist im Feld Set/Gruppe/Zeichnung durchzuf&uuml;hren.</html>";
    private static final String SOS_INFO = "<html><h2>Datenquelle SOS-Analyzer</h2><br/>Hier k&ouml;nnen die <b>Herkunftsd&ouml;rfer</b> der Angriffe verwendet werden, die momentan im SOS-Analyzer eingetragen sind.</html>";
    private static final String REPORT_INFO = "<html><h2>Datenquelle Berichtdatenbank</h2><br/>Hier k&ouml;nnen die <b>Zield&ouml;rfer</b> der Berichte verwendet werden, die sich in einem bestimmten Berichtset befinden. Die Auswahl des zu verwendenden Berichtsets ist im Feld Set/Gruppe/Zeichnung durchzuf&uuml;hren.</html>";
    private static final String SELECTION_INFO = "<html><h2>Datenquelle Auswahlübersicht</h2><br/>Hier k&ouml;nnen die D&ouml;rfer verwendet werden, die sich momentan in der Auswahl&uuml;bersicht befinden.</html>";
    private static final String DRAWING_INFO = "<html><h2>Datenquelle Zeichnungen</h2><br/>Hier k&ouml;nnen die D&ouml;rfer verwendet werden, die sich innerhalb einer bestimmten Zeichnung auf der Hauptkarte befinden. Die Auswahl der zu verwendenden Zeichnung ist im Feld Set/Gruppe/Zeichnung durchzuf&uuml;hren.</html>";
    private static final String WORLDDATA_INFO = "<html><h2>Datenquelle Weltdaten</h2><br/>Mit dieser Option k&ouml;nnen D&ouml;rfer ausgehend von den kompletten Weltdaten gewählt werden.</html>";
    private static final String NO_DATA_AVAILABLE = "Keine Daten vorhanden";
    private static final String ALL_DATA = "Alle";
    private List<Village> villages = new LinkedList<Village>();
    private Map<Ally, List<Tribe>> allyTribeMappings = new TreeMap<Ally, List<Tribe>>(Ally.CASE_INSENSITIVE_ORDER);

    public static synchronized AttackSourcePanel getSingleton() {
        if (singleton == null) {
            singleton = new AttackSourcePanel();
        }
        return singleton;
    }

    /** Creates new form AttackSourcePanel */
    AttackSourcePanel() {
        initComponents();
        jXCollapsiblePane1.setLayout(new BorderLayout());
        jXCollapsiblePane1.add(jInfoScrollPane, BorderLayout.CENTER);
        jXCollapsiblePane2.setLayout(new BorderLayout());
        jXCollapsiblePane2.add(jDateSourcesPanel, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDateSourcesPanel = new javax.swing.JPanel();
        jGroupSource = new javax.swing.JRadioButton();
        jSosSource = new javax.swing.JRadioButton();
        jReportSource = new javax.swing.JRadioButton();
        jSelectionSource = new javax.swing.JRadioButton();
        jDrawingSource = new javax.swing.JRadioButton();
        jWorlddataSource = new javax.swing.JRadioButton();
        jSetBox = new javax.swing.JComboBox();
        jSetLabel = new javax.swing.JLabel();
        jInfoScrollPane = new javax.swing.JScrollPane();
        jInfoTextPane = new javax.swing.JTextPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jXCollapsiblePane1 = new org.jdesktop.swingx.JXCollapsiblePane();
        jLabel1 = new javax.swing.JLabel();
        jXCollapsiblePane2 = new org.jdesktop.swingx.JXCollapsiblePane();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jAllyList = new org.jdesktop.swingx.JXList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTribeList = new org.jdesktop.swingx.JXList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jContinentList = new org.jdesktop.swingx.JXList();
        jScrollPane6 = new javax.swing.JScrollPane();
        jVillageList = new org.jdesktop.swingx.JXList();
        jScrollPane7 = new javax.swing.JScrollPane();
        jUnitList = new org.jdesktop.swingx.JXList();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jDateSourcesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Datenquelle"));
        jDateSourcesPanel.setMinimumSize(new java.awt.Dimension(810, 155));
        jDateSourcesPanel.setPreferredSize(new java.awt.Dimension(815, 155));
        jDateSourcesPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jGroupSource);
        jGroupSource.setText("Gruppenübersicht");
        jGroupSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jGroupSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jGroupSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jGroupSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jGroupSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jGroupSource, gridBagConstraints);

        buttonGroup1.add(jSosSource);
        jSosSource.setText("SOS-Analyzer");
        jSosSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jSosSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jSosSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jSosSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jSosSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSosSource, gridBagConstraints);

        buttonGroup1.add(jReportSource);
        jReportSource.setText("Berichte");
        jReportSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jReportSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jReportSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jReportSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jReportSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jReportSource, gridBagConstraints);

        buttonGroup1.add(jSelectionSource);
        jSelectionSource.setText("Auswahlübersicht");
        jSelectionSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jSelectionSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jSelectionSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jSelectionSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jSelectionSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSelectionSource, gridBagConstraints);

        buttonGroup1.add(jDrawingSource);
        jDrawingSource.setText("Zeichnungen");
        jDrawingSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jDrawingSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jDrawingSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jDrawingSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jDrawingSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jDrawingSource, gridBagConstraints);

        buttonGroup1.add(jWorlddataSource);
        jWorlddataSource.setText("Alle Weltdaten");
        jWorlddataSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jWorlddataSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jWorlddataSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jWorlddataSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jWorlddataSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jWorlddataSource, gridBagConstraints);

        jSetBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireSetSelectionChangedEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSetBox, gridBagConstraints);

        jSetLabel.setText("Set/Gruppe/Zeichnung");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSetLabel, gridBagConstraints);

        jInfoScrollPane.setMinimumSize(new java.awt.Dimension(19, 180));
        jInfoScrollPane.setPreferredSize(new java.awt.Dimension(19, 180));

        jInfoTextPane.setContentType("text/html");
        jInfoTextPane.setEditable(false);
        jInfoTextPane.setText("<html>Du befindest dich im <b>Angriffsmodus</b>. Hier kannst du die Herkunftsd&ouml;rfer ausw&auml;hlen, die f&uuml;r Angriffe verwendet werden d&uuml;rfen. Hierf&uuml;r hast die folgenden M&ouml;glichkeiten:\n<ul>\n<li>Einf&uuml;gen von Dorfkoordinaten aus der Zwischenablage per STRG+V</li>\n<li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus der Gruppen&uuml;bersicht</li>\n<li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus dem SOS-Analyzer</li>\n<li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus Berichten</li>\n<li>Einf&uuml;gen aus der Auswahlübersicht</li>\n<li>Manuelle Eingabe</li>\n</ul>\n</html>\n");
        jInfoScrollPane.setViewportView(jInfoTextPane);

        setLayout(new java.awt.GridBagLayout());

        jXCollapsiblePane1.setPreferredSize(new java.awt.Dimension(19, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jXCollapsiblePane1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Informationen ausblenden");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireHideInfoEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel1, gridBagConstraints);

        jXCollapsiblePane2.setPreferredSize(new java.awt.Dimension(19, 155));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        add(jXCollapsiblePane2, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Datenquellen ausblenden");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireHideDateSourcesEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jLabel2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(23, 100));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(0, 100));

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jXTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.3;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jPanel3.setMinimumSize(new java.awt.Dimension(0, 100));
        jPanel3.setPreferredSize(new java.awt.Dimension(0, 100));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Stamm"));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(150, 48));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(150, 48));

        jAllyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fireAllySelectionChangedEvent(evt);
            }
        });
        jScrollPane3.setViewportView(jAllyList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel3.add(jScrollPane3, gridBagConstraints);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Spieler"));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(150, 44));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(150, 44));

        jTribeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fireTribeSelectionEvent(evt);
            }
        });
        jScrollPane4.setViewportView(jTribeList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel3.add(jScrollPane4, gridBagConstraints);

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Kontinent"));
        jScrollPane5.setMinimumSize(new java.awt.Dimension(80, 60));
        jScrollPane5.setPreferredSize(new java.awt.Dimension(80, 60));

        jContinentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fireContinentSelectionEvent(evt);
            }
        });
        jScrollPane5.setViewportView(jContinentList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel3.add(jScrollPane5, gridBagConstraints);

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Dörfer"));
        jScrollPane6.setMinimumSize(new java.awt.Dimension(150, 44));
        jScrollPane6.setPreferredSize(new java.awt.Dimension(150, 44));

        jScrollPane6.setViewportView(jVillageList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel3.add(jScrollPane6, gridBagConstraints);

        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder("Einheit"));
        jScrollPane7.setMinimumSize(new java.awt.Dimension(80, 44));
        jScrollPane7.setPreferredSize(new java.awt.Dimension(80, 44));

        jScrollPane7.setViewportView(jUnitList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel3.add(jScrollPane7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.7;
        jPanel2.add(jPanel3, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(100, 0));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 0));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/fake.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel4.add(jButton1, gridBagConstraints);

        jButton2.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel4.add(jButton2, gridBagConstraints);

        jButton4.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel4.add(jButton4, gridBagConstraints);

        jButton3.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel4.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fireHideInfoEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideInfoEvent
        if (jXCollapsiblePane1.isCollapsed()) {
            jXCollapsiblePane1.setCollapsed(false);
            jLabel1.setText("Informationen ausblenden");
        } else {
            jXCollapsiblePane1.setCollapsed(true);
            jLabel1.setText("Informationen einblenden");
        }
    }//GEN-LAST:event_fireHideInfoEvent

    private void fireHideDateSourcesEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideDateSourcesEvent
        if (jXCollapsiblePane2.isCollapsed()) {
            jXCollapsiblePane2.setCollapsed(false);
            jLabel2.setText("Datenquellen ausblenden");
        } else {
            jXCollapsiblePane2.setCollapsed(true);
            jLabel2.setText("Datenquellen einblenden");
        }
    }//GEN-LAST:event_fireHideDateSourcesEvent

    private void fireDataSourceChangeEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireDataSourceChangeEvent
        if (evt.getSource() == jGroupSource) {
            List<ManageableType> tags = TagManager.getSingleton().getAllElements();
            updateSetSelection(tags.toArray(new ManageableType[tags.size()]));
        } else if (evt.getSource() == jSosSource) {
            updateSetSelection(null);
        } else if (evt.getSource() == jReportSource) {
            updateSetSelection(ReportManager.getSingleton().getGroups());
        } else if (evt.getSource() == jSelectionSource) {
            updateSetSelection(null);
        } else if (evt.getSource() == jDrawingSource) {
            List<ManageableType> forms = FormManager.getSingleton().getAllElements();
            updateSetSelection(forms.toArray(new ManageableType[forms.size()]));
        } else if (evt.getSource() == jWorlddataSource) {
            updateSetSelection(null);
        }
    }//GEN-LAST:event_fireDataSourceChangeEvent

    private void fireShowDataSourceInfoEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireShowDataSourceInfoEvent
        if (evt.getSource() == jGroupSource) {
            jInfoTextPane.setText(GROUP_INFO);
        } else if (evt.getSource() == jSosSource) {
            jInfoTextPane.setText(SOS_INFO);
        } else if (evt.getSource() == jReportSource) {
            jInfoTextPane.setText(REPORT_INFO);
        } else if (evt.getSource() == jSelectionSource) {
            jInfoTextPane.setText(SELECTION_INFO);
        } else if (evt.getSource() == jDrawingSource) {
            jInfoTextPane.setText(DRAWING_INFO);
        } else if (evt.getSource() == jWorlddataSource) {
            jInfoTextPane.setText(WORLDDATA_INFO);
        }
    }//GEN-LAST:event_fireShowDataSourceInfoEvent

    private void fireHideDataSourceInfoEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideDataSourceInfoEvent
        jInfoTextPane.setText(GENERAL_INFO);
    }//GEN-LAST:event_fireHideDataSourceInfoEvent

    private void fireSetSelectionChangedEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireSetSelectionChangedEvent
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jGroupSource.isSelected()) {
                updateDataForGroupSource(jSetBox.getSelectedItem());
            } else if (jReportSource.isSelected()) {
                updateDataForReportSource((String) jSetBox.getSelectedItem());
            } else if (jDrawingSource.isSelected()) {
                updateDataForDrawingSource(jSetBox.getSelectedItem());
            }
        }
    }//GEN-LAST:event_fireSetSelectionChangedEvent

    private void fireAllySelectionChangedEvent(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fireAllySelectionChangedEvent
        if (!evt.getValueIsAdjusting()) {
            updateTribeBox();
        }
    }//GEN-LAST:event_fireAllySelectionChangedEvent

    private void fireTribeSelectionEvent(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fireTribeSelectionEvent
        if (!evt.getValueIsAdjusting()) {
            updateContinentBox();
        }
    }//GEN-LAST:event_fireTribeSelectionEvent

    private void fireContinentSelectionEvent(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fireContinentSelectionEvent
        if (!evt.getValueIsAdjusting()) {
            updateVillageBox();
        }
    }//GEN-LAST:event_fireContinentSelectionEvent

    // <editor-fold defaultstate="collapsed" desc=" Update methods for data area ">
    private void updateSetSelection(Object[] pElements) {
        if (pElements == null) {
            jSetLabel.setEnabled(false);
            jSetBox.setEnabled(false);
            villages.clear();
            if (jSosSource.isSelected()) {
                System.out.println("Not yet implemented");
            } else if (jSelectionSource.isSelected()) {
                for (Village v : DSWorkbenchSelectionFrame.getSingleton().getSelectedElements()) {
                    villages.add(v);
                }
            } else if (jWorlddataSource.isSelected()) {
                for (Integer id : DataHolder.getSingleton().getVillagesById().keySet()) {
                    Village v = DataHolder.getSingleton().getVillagesById().get(id);
                    if (v.getTribe() != null) {
                        villages.add(v);
                    }
                }
                rebuildDataBoxes();
            } else {
                //should be drawing selected but no drawing available
                jSetBox.setModel(new DefaultComboBoxModel(new Object[]{"Nicht verfügbar"}));
            }
        } else {
            jSetLabel.setEnabled(true);
            jSetBox.setEnabled(true);
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            if (pElements.length == 0) {
                jSetLabel.setEnabled(false);
                jSetBox.setEnabled(false);
                model.addElement(NO_DATA_AVAILABLE);
            } else {
                jSetLabel.setEnabled(true);
                jSetBox.setEnabled(true);
                model.addElement(ALL_DATA);
                for (Object set : pElements) {
                    model.addElement(set);
                }
            }

            jSetBox.setModel(model);
            jSetBox.setSelectedIndex(0);
        }
    }

    private void updateDataForGroupSource(Object pTag) {
        villages.clear();
        if (pTag != null) {
            if (pTag instanceof String) {
                for (ManageableType element : TagManager.getSingleton().getAllElements()) {
                    for (Integer id : ((Tag) element).getVillageIDs()) {
                        Village village = DataHolder.getSingleton().getVillagesById().get(id);
                        if (!villages.contains(village)) {
                            villages.add(village);
                        }
                    }
                }
            } else if (pTag instanceof Tag) {
                Tag tag = (Tag) pTag;
                for (Integer id : tag.getVillageIDs()) {
                    Village village = DataHolder.getSingleton().getVillagesById().get(id);
                    if (!villages.contains(village)) {
                        villages.add(village);
                    }
                }
            }
        }
        rebuildDataBoxes();
    }

    private void updateDataForReportSource(String pSet) {
        villages.clear();
        if (pSet != null) {
            List<ManageableType> relevantReports = null;

            if (pSet.equals(ALL_DATA)) {
                relevantReports = ReportManager.getSingleton().getAllElements();
            } else {
                relevantReports = ReportManager.getSingleton().getAllElements(pSet);
            }

            for (ManageableType element : relevantReports) {
                FightReport report = (FightReport) element;
                Village target = report.getTargetVillage();
                if (!villages.contains(target)) {
                    villages.add(target);
                }
            }
        }
        rebuildDataBoxes();
    }

    private void updateDataForDrawingSource(Object pDrawing) {
        villages.clear();
        if (pDrawing != null) {
            if (pDrawing instanceof String) {
                for (ManageableType element : FormManager.getSingleton().getAllElements()) {
                    for (Village village : ((AbstractForm) element).getContainedVillages()) {
                        if (!villages.contains(village)) {
                            villages.add(village);
                        }
                    }
                }
            } else if (pDrawing instanceof AbstractForm) {
                AbstractForm drawing = (AbstractForm) pDrawing;
                for (Village village : drawing.getContainedVillages()) {
                    if (!villages.contains(village)) {
                        villages.add(village);
                    }
                }
            }
        }
        rebuildDataBoxes();
    }

    private void rebuildDataBoxes() {
        allyTribeMappings.clear();
        for (Village v : villages) {
            Tribe t = v.getTribe();
            Ally a = t.getAlly();
            if (a == null) {
                a = NoAlly.getSingleton();
            }
            List<Tribe> tribesForAlly = allyTribeMappings.get(a);
            if (tribesForAlly == null) {
                tribesForAlly = new LinkedList<Tribe>();
                allyTribeMappings.put(a, tribesForAlly);
            }
            if (!tribesForAlly.contains(t)) {
                tribesForAlly.add(t);
            }
        }

        DefaultListModel allyModel = new DefaultListModel();
        allyModel.addElement(NoAlly.getSingleton());
        for (Ally a : allyTribeMappings.keySet()) {
            allyModel.addElement(a);
        }
        jAllyList.setModel(allyModel);
        jAllyList.setSelectedIndex(0);
    }

    private void updateTribeBox() {
        Object[] selection = jAllyList.getSelectedValues();
        if (selection == null || selection.length == 0) {
            return;
        }
        DefaultListModel tribeModel = new DefaultListModel();
        for (Object item : selection) {
            Ally a = (Ally) item;
            List<Tribe> tribeList = allyTribeMappings.get(a);
            Collections.sort(tribeList);

            for (Tribe t : tribeList) {
                tribeModel.addElement(t);
            }
        }
        jTribeList.setModel(tribeModel);
        jTribeList.setSelectedIndex(0);
    }

    private void updateContinentBox() {
        Object[] selection = jTribeList.getSelectedValues();
        if (selection == null || selection.length == 0) {
            return;
        }
        DefaultListModel continentModel = new DefaultListModel();
        for (Object item : selection) {
            Tribe t = (Tribe) item;
            Village[] villages = t.getVillageList();

            List<String> continentList = new LinkedList<String>();
            for (Village v : villages) {
                int iCont = v.getContinent();
                String cont = "K" + ((iCont < 10) ? "0" + iCont : iCont);
                if (!continentList.contains(cont)) {
                    continentList.add(cont);
                }
            }
            Collections.sort(continentList, String.CASE_INSENSITIVE_ORDER);

            for (String cont : continentList) {
                continentModel.addElement(cont);
            }
        }
        jContinentList.setModel(continentModel);
        jContinentList.setSelectionInterval(0, continentModel.size() - 1);
    }

    private void updateVillageBox() {
        int[] continents = jContinentList.getSelectedIndices();
        if (continents == null) {
            return;
        }
        //build list of allowed continents
        List<Integer> allowedContinents = new LinkedList<Integer>();
        for (Integer cont : continents) {
            int contId = Integer.parseInt(((String) jContinentList.getModel().getElementAt(cont)).replaceAll("K", ""));
            allowedContinents.add(contId);
        }
        Object[] selection = jTribeList.getSelectedValues();
        List<Village> villageList = new ArrayList<Village>();
        for (Object item : selection) {
            Tribe t = (Tribe) item;
            for (Village village : t.getVillageList()) {
                if (allowedContinents.contains(village.getContinent())) {
                    villageList.add(village);
                }
            }
        }
        Collections.sort(villageList, Village.CASE_INSENSITIVE_ORDER);

        DefaultListModel villageModel = new DefaultListModel();
        for (Village village : villageList) {
            villageModel.addElement(village);
        }
        jVillageList.setModel(villageModel);
    }
    // </editor-fold>
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private org.jdesktop.swingx.JXList jAllyList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private org.jdesktop.swingx.JXList jContinentList;
    private javax.swing.JPanel jDateSourcesPanel;
    private javax.swing.JRadioButton jDrawingSource;
    private javax.swing.JRadioButton jGroupSource;
    private javax.swing.JScrollPane jInfoScrollPane;
    private javax.swing.JTextPane jInfoTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jReportSource;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JRadioButton jSelectionSource;
    private javax.swing.JComboBox jSetBox;
    private javax.swing.JLabel jSetLabel;
    private javax.swing.JRadioButton jSosSource;
    private org.jdesktop.swingx.JXList jTribeList;
    private org.jdesktop.swingx.JXList jUnitList;
    private org.jdesktop.swingx.JXList jVillageList;
    private javax.swing.JRadioButton jWorlddataSource;
    private org.jdesktop.swingx.JXCollapsiblePane jXCollapsiblePane1;
    private org.jdesktop.swingx.JXCollapsiblePane jXCollapsiblePane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        GlobalOptions.setSelectedServer("de43");
        ProfileManager.getSingleton().loadProfiles();
        GlobalOptions.setSelectedProfile(ProfileManager.getSingleton().getProfiles("de43")[0]);

        DataHolder.getSingleton().loadData(false);
        try {
            //  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
        }

        JFrame f = new JFrame("Test");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setSize(500, 400);
        f.getContentPane().add(new AttackSourcePanel());
        f.pack();
        f.setVisible(true);
    }
}
