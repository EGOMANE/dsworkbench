/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AttackSourcePanel.java
 *
 * Created on Oct 15, 2011, 9:54:36 AM
 */
package de.tor.tribes.ui.wiz.tap;

import de.tor.tribes.control.ManageableType;
import de.tor.tribes.io.DataHolder;
import de.tor.tribes.io.UnitHolder;
import de.tor.tribes.types.AbstractForm;
import de.tor.tribes.types.Ally;
import de.tor.tribes.types.FightReport;
import de.tor.tribes.types.NoAlly;
import de.tor.tribes.types.Tag;
import de.tor.tribes.types.Tribe;
import de.tor.tribes.types.Village;
import de.tor.tribes.ui.renderer.UnitListCellRenderer;
import de.tor.tribes.ui.views.DSWorkbenchSOSRequestAnalyzer;
import de.tor.tribes.ui.views.DSWorkbenchSelectionFrame;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.ProfileManager;
import de.tor.tribes.util.map.FormManager;
import de.tor.tribes.util.report.ReportManager;
import de.tor.tribes.util.tag.TagManager;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Torridity
 */
public abstract class AbstractAttackPanel extends javax.swing.JPanel {
    
    protected static final String NO_DATA_AVAILABLE = "Keine Daten vorhanden";
    protected static final String ALL_DATA = "Alle";
    private Map<Ally, List<Tribe>> allyTribeMappings = new TreeMap<Ally, List<Tribe>>(Ally.CASE_INSENSITIVE_ORDER);

    /** Creates new form AttackSourcePanel */
    AbstractAttackPanel() {
        initComponents();
        jXCollapsiblePane1.setLayout(new BorderLayout());
        jXCollapsiblePane1.add(jInfoScrollPane, BorderLayout.CENTER);
        jXCollapsiblePane2.setLayout(new BorderLayout());
        jXCollapsiblePane2.add(jDateSourcesPanel, BorderLayout.CENTER);
        DefaultListModel model = new DefaultListModel();
        for (UnitHolder unit : DataHolder.getSingleton().getUnits()) {
            model.addElement(unit);
        }
        jUnitList.setModel(model);
        jUnitList.setCellRenderer(new UnitListCellRenderer());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDateSourcesPanel = new javax.swing.JPanel();
        jGroupSource = new javax.swing.JRadioButton();
        jSosSource = new javax.swing.JRadioButton();
        jReportSource = new javax.swing.JRadioButton();
        jSelectionSource = new javax.swing.JRadioButton();
        jDrawingSource = new javax.swing.JRadioButton();
        jWorlddataSource = new javax.swing.JRadioButton();
        jSetBox = new javax.swing.JComboBox();
        jSetLabel = new javax.swing.JLabel();
        jInfoScrollPane = new javax.swing.JScrollPane();
        jInfoTextPane = new javax.swing.JTextPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jXCollapsiblePane1 = new org.jdesktop.swingx.JXCollapsiblePane();
        jLabel1 = new javax.swing.JLabel();
        jXCollapsiblePane2 = new org.jdesktop.swingx.JXCollapsiblePane();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTableScrollPane = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jDataPanel = new javax.swing.JPanel();
        jAllyScrollPane = new javax.swing.JScrollPane();
        jAllyList = new org.jdesktop.swingx.JXList();
        jTribeScrollPane = new javax.swing.JScrollPane();
        jTribeList = new org.jdesktop.swingx.JXList();
        jContinentScrollPane = new javax.swing.JScrollPane();
        jContinentList = new org.jdesktop.swingx.JXList();
        jVillageScrollPane = new javax.swing.JScrollPane();
        jVillageList = new org.jdesktop.swingx.JXList();
        jUnitScrollPane = new javax.swing.JScrollPane();
        jUnitList = new org.jdesktop.swingx.JXList();
        jXTextField1 = new org.jdesktop.swingx.JXTextField();
        jAdaptUnit = new javax.swing.JButton();
        jUsageAmount = new org.jdesktop.swingx.JXTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuPanel = new javax.swing.JPanel();
        jValidateByTroops = new javax.swing.JButton();
        jValidateWithAttackPlans = new javax.swing.JButton();
        jSetToFake = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jAddUsage = new javax.swing.JButton();
        jRemoveUsage = new javax.swing.JButton();
        jRestoreUsage = new javax.swing.JButton();
        jSetToNoFake = new javax.swing.JButton();

        jDateSourcesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Datenquelle"));
        jDateSourcesPanel.setMinimumSize(new java.awt.Dimension(810, 155));
        jDateSourcesPanel.setPreferredSize(new java.awt.Dimension(815, 155));
        jDateSourcesPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jGroupSource);
        jGroupSource.setText("Gruppenübersicht");
        jGroupSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jGroupSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jGroupSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jGroupSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jGroupSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jGroupSource, gridBagConstraints);

        buttonGroup1.add(jSosSource);
        jSosSource.setText("SOS-Analyzer");
        jSosSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jSosSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jSosSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jSosSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jSosSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSosSource, gridBagConstraints);

        buttonGroup1.add(jReportSource);
        jReportSource.setText("Berichte");
        jReportSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jReportSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jReportSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jReportSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jReportSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jReportSource, gridBagConstraints);

        buttonGroup1.add(jSelectionSource);
        jSelectionSource.setText("Auswahlübersicht");
        jSelectionSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jSelectionSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jSelectionSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jSelectionSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jSelectionSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSelectionSource, gridBagConstraints);

        buttonGroup1.add(jDrawingSource);
        jDrawingSource.setText("Zeichnungen");
        jDrawingSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jDrawingSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jDrawingSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jDrawingSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jDrawingSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jDrawingSource, gridBagConstraints);

        buttonGroup1.add(jWorlddataSource);
        jWorlddataSource.setText("Alle Weltdaten");
        jWorlddataSource.setMaximumSize(new java.awt.Dimension(140, 23));
        jWorlddataSource.setMinimumSize(new java.awt.Dimension(140, 23));
        jWorlddataSource.setPreferredSize(new java.awt.Dimension(140, 23));
        jWorlddataSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fireShowDataSourceInfoEvent(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fireHideDataSourceInfoEvent(evt);
            }
        });
        jWorlddataSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireDataSourceChangeEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jWorlddataSource, gridBagConstraints);

        jSetBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireSetSelectionChangedEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSetBox, gridBagConstraints);

        jSetLabel.setText("Set/Gruppe/Zeichnung");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDateSourcesPanel.add(jSetLabel, gridBagConstraints);

        jInfoScrollPane.setMinimumSize(new java.awt.Dimension(19, 180));
        jInfoScrollPane.setPreferredSize(new java.awt.Dimension(19, 180));

        jInfoTextPane.setContentType("text/html");
        jInfoTextPane.setEditable(false);
        jInfoTextPane.setText("<html>Du befindest dich im <b>Angriffsmodus</b>. Hier kannst du die Herkunftsd&ouml;rfer ausw&auml;hlen, die f&uuml;r Angriffe verwendet werden d&uuml;rfen. Hierf&uuml;r hast die folgenden M&ouml;glichkeiten:\n<ul>\n<li>Einf&uuml;gen von Dorfkoordinaten aus der Zwischenablage per STRG+V</li>\n<li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus der Gruppen&uuml;bersicht</li>\n<li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus dem SOS-Analyzer</li>\n<li>Einf&uuml;gen der Herkunftsd&ouml;rfer aus Berichten</li>\n<li>Einf&uuml;gen aus der Auswahlübersicht</li>\n<li>Manuelle Eingabe</li>\n</ul>\n</html>\n");
        jInfoScrollPane.setViewportView(jInfoTextPane);

        setLayout(new java.awt.GridBagLayout());

        jXCollapsiblePane1.setCollapsed(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jXCollapsiblePane1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Informationen ausblenden");
        jLabel1.setToolTipText("Blendet Informationen zu dieser Ansicht und zu den Datenquellen ein/aus");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireHideInfoEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel1, gridBagConstraints);

        jXCollapsiblePane2.setCollapsed(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        add(jXCollapsiblePane2, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Datenquellen ausblenden");
        jLabel2.setToolTipText("Blendet die Auswahl möglicher Datenquellen für Stämme, Spieler und Dörfer ein/aus");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireHideDateSourcesEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jLabel2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTableScrollPane.setMinimumSize(new java.awt.Dimension(23, 100));
        jTableScrollPane.setPreferredSize(new java.awt.Dimension(23, 100));

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableScrollPane.setViewportView(jXTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.7;
        jPanel2.add(jTableScrollPane, gridBagConstraints);

        jDataPanel.setMinimumSize(new java.awt.Dimension(0, 130));
        jDataPanel.setPreferredSize(new java.awt.Dimension(0, 130));
        jDataPanel.setLayout(new java.awt.GridBagLayout());

        jAllyScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Stamm"));
        jAllyScrollPane.setMinimumSize(new java.awt.Dimension(150, 48));
        jAllyScrollPane.setPreferredSize(new java.awt.Dimension(150, 48));

        jAllyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fireAllySelectionChangedEvent(evt);
            }
        });
        jAllyScrollPane.setViewportView(jAllyList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jDataPanel.add(jAllyScrollPane, gridBagConstraints);

        jTribeScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Spieler"));
        jTribeScrollPane.setMinimumSize(new java.awt.Dimension(150, 44));
        jTribeScrollPane.setPreferredSize(new java.awt.Dimension(150, 44));

        jTribeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fireTribeSelectionEvent(evt);
            }
        });
        jTribeScrollPane.setViewportView(jTribeList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jDataPanel.add(jTribeScrollPane, gridBagConstraints);

        jContinentScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Kontinent"));
        jContinentScrollPane.setMinimumSize(new java.awt.Dimension(80, 60));
        jContinentScrollPane.setPreferredSize(new java.awt.Dimension(80, 60));

        jContinentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fireContinentSelectionEvent(evt);
            }
        });
        jContinentScrollPane.setViewportView(jContinentList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jDataPanel.add(jContinentScrollPane, gridBagConstraints);

        jVillageScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Dörfer"));
        jVillageScrollPane.setMinimumSize(new java.awt.Dimension(150, 44));
        jVillageScrollPane.setPreferredSize(new java.awt.Dimension(150, 44));

        jVillageScrollPane.setViewportView(jVillageList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jDataPanel.add(jVillageScrollPane, gridBagConstraints);

        jUnitScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Einheit"));
        jUnitScrollPane.setMinimumSize(new java.awt.Dimension(80, 44));
        jUnitScrollPane.setPreferredSize(new java.awt.Dimension(80, 44));

        jUnitScrollPane.setViewportView(jUnitList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jDataPanel.add(jUnitScrollPane, gridBagConstraints);

        jXTextField1.setToolTipText("Erlaubt eine Filterung der Stammesnamen");
        jXTextField1.setPrompt("Filter angeben");
        jXTextField1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                fireAllyFilterEvent(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDataPanel.add(jXTextField1, gridBagConstraints);

        jAdaptUnit.setText("Angleichen");
        jAdaptUnit.setToolTipText("Setzt die langsamste Einheit der in der Tabelle markierten Dörfer auf die gewählte Einheit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDataPanel.add(jAdaptUnit, gridBagConstraints);

        jUsageAmount.setToolTipText("<html>Gibt die Anzahl der zu planenden Angriffe auf die Ziele an,<br/>\ndie im Folgenden eingef&uuml;gt werden.</html>");
        jUsageAmount.setPrompt("Anzahl Verwendungen");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jDataPanel.add(jUsageAmount, gridBagConstraints);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jDataPanel.add(jSeparator1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 0.3;
        jPanel2.add(jDataPanel, gridBagConstraints);

        jMenuPanel.setMinimumSize(new java.awt.Dimension(150, 130));
        jMenuPanel.setPreferredSize(new java.awt.Dimension(150, 130));
        jMenuPanel.setLayout(new java.awt.GridBagLayout());

        jValidateByTroops.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/filter_strength.png"))); // NOI18N
        jValidateByTroops.setToolTipText("<html>Filtert alle D&ouml;rfer in der Tabelle nach der Truppenst&auml;rke, die DS Workbench bekannt ist.<br/>\nUm diese Funktion sinnvoll nutzen zu k&ouml;nnen, sollten vorher Truppen aus dem Spiel nach DS Workbench<br/>\nimportiert worden sein.</html>");
        jValidateByTroops.setMaximumSize(new java.awt.Dimension(48, 33));
        jValidateByTroops.setMinimumSize(new java.awt.Dimension(48, 33));
        jValidateByTroops.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jValidateByTroops, gridBagConstraints);

        jValidateWithAttackPlans.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/filter_off.png"))); // NOI18N
        jValidateWithAttackPlans.setToolTipText("<html>Filtert alle D&ouml;rfer in der Tabelle nach ihrem Vorkommen in vorhandenen Angriffspl&auml;nen.<br/>\nSo kann verhindert werden, dass ein Dorf mehrfach verwendet wird.</html>");
        jValidateWithAttackPlans.setMaximumSize(new java.awt.Dimension(48, 33));
        jValidateWithAttackPlans.setMinimumSize(new java.awt.Dimension(48, 33));
        jValidateWithAttackPlans.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jValidateWithAttackPlans, gridBagConstraints);

        jSetToFake.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/fake.png"))); // NOI18N
        jSetToFake.setToolTipText("Setzt die markierten Dörfer der Tabelle auf Herkunft/Ziel für Fakes.");
        jSetToFake.setMaximumSize(new java.awt.Dimension(48, 33));
        jSetToFake.setMinimumSize(new java.awt.Dimension(48, 33));
        jSetToFake.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jSetToFake, gridBagConstraints);

        jPanel1.setMinimumSize(new java.awt.Dimension(123, 70));
        jPanel1.setPreferredSize(new java.awt.Dimension(123, 70));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButton5.setText("Alle einfügen");
        jButton5.setToolTipText("<html>F&uuml;gt alle D&ouml;rfer die sich aktuell in der D&ouml;rfer-Liste befinden<br/>\nin die Tabelle der zu verwendenden D&ouml;rfer ein</html>");
        jButton5.setMaximumSize(new java.awt.Dimension(123, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel1.add(jButton5, gridBagConstraints);

        jButton6.setText("Markierte einfügen");
        jButton6.setToolTipText("<html>F&uuml;gt alle markierten D&ouml;rfer aus der D&ouml;rfer-Liste<br/>\nin die Tabelle der zu verwendenden D&ouml;rfer ein</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jButton6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jMenuPanel.add(jPanel1, gridBagConstraints);

        jAddUsage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/add_attack.png"))); // NOI18N
        jAddUsage.setToolTipText("Erhöht die Anzahl der zu planenden Angriffe für die in der Tabelle markierten Ziele");
        jAddUsage.setMaximumSize(new java.awt.Dimension(48, 33));
        jAddUsage.setMinimumSize(new java.awt.Dimension(48, 33));
        jAddUsage.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jAddUsage, gridBagConstraints);

        jRemoveUsage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/remove_attack.png"))); // NOI18N
        jRemoveUsage.setToolTipText("Verringert die Anzahl der zu planenden Angriffe für die in der Tabelle markierten Ziele");
        jRemoveUsage.setMaximumSize(new java.awt.Dimension(48, 33));
        jRemoveUsage.setMinimumSize(new java.awt.Dimension(48, 33));
        jRemoveUsage.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jRemoveUsage, gridBagConstraints);

        jRestoreUsage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/reset_attacks.png"))); // NOI18N
        jRestoreUsage.setToolTipText("<html>Setzt die Anzahl der zu planenden Angriffe f&uuml;r die in der Tabelle markierten Ziele auf den Wert,<br/>\nder in dem Feld unterhalb der D&ouml;rfer-Liste eingetragen ist</html>");
        jRestoreUsage.setMaximumSize(new java.awt.Dimension(48, 33));
        jRestoreUsage.setMinimumSize(new java.awt.Dimension(48, 33));
        jRestoreUsage.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jRestoreUsage, gridBagConstraints);

        jSetToNoFake.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/no_fake.png"))); // NOI18N
        jSetToNoFake.setToolTipText("Setzt die markierten Dörfer der Tabelle auf Herkunft/Ziel für Offs.");
        jSetToNoFake.setMaximumSize(new java.awt.Dimension(48, 33));
        jSetToNoFake.setMinimumSize(new java.awt.Dimension(48, 33));
        jSetToNoFake.setPreferredSize(new java.awt.Dimension(48, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jMenuPanel.add(jSetToNoFake, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.3;
        jPanel2.add(jMenuPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fireHideInfoEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideInfoEvent
        if (jXCollapsiblePane1.isCollapsed()) {
            jXCollapsiblePane1.setCollapsed(false);
            jLabel1.setText("Informationen ausblenden");
        } else {
            jXCollapsiblePane1.setCollapsed(true);
            jLabel1.setText("Informationen einblenden");
        }
    }//GEN-LAST:event_fireHideInfoEvent
    
    private void fireHideDateSourcesEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideDateSourcesEvent
        if (jXCollapsiblePane2.isCollapsed()) {
            jXCollapsiblePane2.setCollapsed(false);
            jLabel2.setText("Datenquellen ausblenden");
        } else {
            jXCollapsiblePane2.setCollapsed(true);
            jLabel2.setText("Datenquellen einblenden");
        }
    }//GEN-LAST:event_fireHideDateSourcesEvent
    
    private void fireDataSourceChangeEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireDataSourceChangeEvent
        if (evt.getSource() == jGroupSource) {
            List<ManageableType> tags = TagManager.getSingleton().getAllElements();
            updateSetSelection(tags.toArray(new ManageableType[tags.size()]));
        } else if (evt.getSource() == jSosSource) {
            updateSetSelection(null);
        } else if (evt.getSource() == jReportSource) {
            updateSetSelection(ReportManager.getSingleton().getGroups());
        } else if (evt.getSource() == jSelectionSource) {
            updateSetSelection(null);
        } else if (evt.getSource() == jDrawingSource) {
            List<ManageableType> forms = FormManager.getSingleton().getAllElements();
            updateSetSelection(forms.toArray(new ManageableType[forms.size()]));
        } else if (evt.getSource() == jWorlddataSource) {
            updateSetSelection(null);
        }
    }//GEN-LAST:event_fireDataSourceChangeEvent
    
    private void fireShowDataSourceInfoEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireShowDataSourceInfoEvent
        if (evt.getSource() == jGroupSource) {
            jInfoTextPane.setText(getGroupInfo());
        } else if (evt.getSource() == jSosSource) {
            jInfoTextPane.setText(getSosInfo());
        } else if (evt.getSource() == jReportSource) {
            jInfoTextPane.setText(getReportInfo());
        } else if (evt.getSource() == jSelectionSource) {
            jInfoTextPane.setText(getSelectionInfo());
        } else if (evt.getSource() == jDrawingSource) {
            jInfoTextPane.setText(getDrawingInfo());
        } else if (evt.getSource() == jWorlddataSource) {
            jInfoTextPane.setText(getWorldDataInfo());
        }
    }//GEN-LAST:event_fireShowDataSourceInfoEvent
    
    private void fireHideDataSourceInfoEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideDataSourceInfoEvent
        jInfoTextPane.setText(getGeneralInfo());
    }//GEN-LAST:event_fireHideDataSourceInfoEvent
    
    private void fireSetSelectionChangedEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireSetSelectionChangedEvent
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (jGroupSource.isSelected()) {
                updateDataForGroupSource(jSetBox.getSelectedItem());
            } else if (jReportSource.isSelected()) {
                updateDataForReportSource((String) jSetBox.getSelectedItem());
            } else if (jDrawingSource.isSelected()) {
                updateDataForDrawingSource(jSetBox.getSelectedItem());
            }
        }
    }//GEN-LAST:event_fireSetSelectionChangedEvent
    
    private void fireAllySelectionChangedEvent(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fireAllySelectionChangedEvent
        if (!evt.getValueIsAdjusting()) {
            updateTribeBox();
        }
    }//GEN-LAST:event_fireAllySelectionChangedEvent
    
    private void fireTribeSelectionEvent(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fireTribeSelectionEvent
        if (!evt.getValueIsAdjusting()) {
            updateContinentBox();
        }
    }//GEN-LAST:event_fireTribeSelectionEvent
    
    private void fireContinentSelectionEvent(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fireContinentSelectionEvent
        if (!evt.getValueIsAdjusting()) {
            updateVillageBox();
        }
    }//GEN-LAST:event_fireContinentSelectionEvent
    
    private void fireAllyFilterEvent(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fireAllyFilterEvent
        rebuildDataBoxes();
    }//GEN-LAST:event_fireAllyFilterEvent
    
    public abstract String getGeneralInfo();
    
    public abstract String getGroupInfo();
    
    public abstract String getSosInfo();
    
    public abstract String getReportInfo();
    
    public abstract String getSelectionInfo();
    
    public abstract String getDrawingInfo();
    
    public abstract String getWorldDataInfo();

    // <editor-fold defaultstate="collapsed" desc=" Update methods for data area ">
    protected abstract void updateSetSelection(Object[] pElements);
    
    protected abstract void updateDataForGroupSource(Object pTag);
    
    protected abstract void updateDataForReportSource(String pSet);
    
    protected abstract void updateDataForDrawingSource(Object pDrawing);
    
    protected abstract List<Village> getVillages();
    
    protected void rebuildDataBoxes() {
        allyTribeMappings.clear();
        String filter = null;
        if (jXTextField1.getText() != null && jXTextField1.getText().length() > 0) {
            filter = jXTextField1.getText();
        }
        
        for (Village v : getVillages()) {
            Tribe t = v.getTribe();
            Ally a = t.getAlly();
            boolean noAlly = false;
            if (a == null) {
                a = NoAlly.getSingleton();
                noAlly = true;
            }
            List<Tribe> tribesForAlly = allyTribeMappings.get(a);
            if (tribesForAlly == null) {
                if (filter != null) {
                    if (noAlly || a.getName().toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                        tribesForAlly = new LinkedList<Tribe>();
                        allyTribeMappings.put(a, tribesForAlly);
                    }
                } else {//no filter
                    tribesForAlly = new LinkedList<Tribe>();
                    allyTribeMappings.put(a, tribesForAlly);
                }
            }
            if (tribesForAlly != null && !tribesForAlly.contains(t)) {
                tribesForAlly.add(t);
            }
        }
        
        DefaultListModel allyModel = new DefaultListModel();
        allyModel.addElement(NoAlly.getSingleton());
        for (Ally a : allyTribeMappings.keySet()) {
            if (!a.equals(NoAlly.getSingleton())) {
                allyModel.addElement(a);
            }
        }
        jAllyList.setModel(allyModel);
        jAllyList.setSelectedIndex(0);
    }
    
    private void updateTribeBox() {
        Object[] selection = jAllyList.getSelectedValues();
        if (selection == null || selection.length == 0) {
            return;
        }
        DefaultListModel tribeModel = new DefaultListModel();
        for (Object item : selection) {
            Ally a = (Ally) item;
            List<Tribe> tribeList = allyTribeMappings.get(a);
            if (tribeList == null) {
                //probably just removed
                return;
            }
            Collections.sort(tribeList);
            
            for (Tribe t : tribeList) {
                tribeModel.addElement(t);
            }
        }
        jTribeList.setModel(tribeModel);
        jTribeList.setSelectedIndex(0);
    }
    
    private void updateContinentBox() {
        Object[] selection = jTribeList.getSelectedValues();
        if (selection == null || selection.length == 0) {
            return;
        }
        DefaultListModel continentModel = new DefaultListModel();
        for (Object item : selection) {
            Tribe t = (Tribe) item;
            Village[] villages = t.getVillageList();
            
            List<String> continentList = new LinkedList<String>();
            for (Village v : villages) {
                int iCont = v.getContinent();
                String cont = "K" + ((iCont < 10) ? "0" + iCont : iCont);
                if (!continentList.contains(cont)) {
                    continentList.add(cont);
                }
            }
            Collections.sort(continentList, String.CASE_INSENSITIVE_ORDER);
            
            for (String cont : continentList) {
                continentModel.addElement(cont);
            }
        }
        jContinentList.setModel(continentModel);
        jContinentList.setSelectionInterval(0, continentModel.size() - 1);
    }
    
    private void updateVillageBox() {
        int[] continents = jContinentList.getSelectedIndices();
        if (continents == null) {
            return;
        }
        //build list of allowed continents
        List<Integer> allowedContinents = new LinkedList<Integer>();
        for (Integer cont : continents) {
            int contId = Integer.parseInt(((String) jContinentList.getModel().getElementAt(cont)).replaceAll("K", ""));
            allowedContinents.add(contId);
        }
        Object[] selection = jTribeList.getSelectedValues();
        List<Village> villageList = new ArrayList<Village>();
        for (Object item : selection) {
            Tribe t = (Tribe) item;
            for (Village village : t.getVillageList()) {
                if (allowedContinents.contains(village.getContinent())) {
                    villageList.add(village);
                }
            }
        }
        Collections.sort(villageList, Village.CASE_INSENSITIVE_ORDER);
        
        DefaultListModel villageModel = new DefaultListModel();
        for (Village village : villageList) {
            villageModel.addElement(village);
        }
        jVillageList.setModel(villageModel);
    }
    // </editor-fold>
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    protected javax.swing.JButton jAdaptUnit;
    protected javax.swing.JButton jAddUsage;
    private org.jdesktop.swingx.JXList jAllyList;
    private javax.swing.JScrollPane jAllyScrollPane;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private org.jdesktop.swingx.JXList jContinentList;
    private javax.swing.JScrollPane jContinentScrollPane;
    private javax.swing.JPanel jDataPanel;
    private javax.swing.JPanel jDateSourcesPanel;
    protected javax.swing.JRadioButton jDrawingSource;
    protected javax.swing.JRadioButton jGroupSource;
    private javax.swing.JScrollPane jInfoScrollPane;
    private javax.swing.JTextPane jInfoTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jMenuPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    protected javax.swing.JButton jRemoveUsage;
    protected javax.swing.JRadioButton jReportSource;
    protected javax.swing.JButton jRestoreUsage;
    protected javax.swing.JRadioButton jSelectionSource;
    private javax.swing.JSeparator jSeparator1;
    protected javax.swing.JComboBox jSetBox;
    protected javax.swing.JLabel jSetLabel;
    protected javax.swing.JButton jSetToFake;
    protected javax.swing.JButton jSetToNoFake;
    protected javax.swing.JRadioButton jSosSource;
    private javax.swing.JScrollPane jTableScrollPane;
    private org.jdesktop.swingx.JXList jTribeList;
    private javax.swing.JScrollPane jTribeScrollPane;
    protected org.jdesktop.swingx.JXList jUnitList;
    private javax.swing.JScrollPane jUnitScrollPane;
    protected org.jdesktop.swingx.JXTextField jUsageAmount;
    protected javax.swing.JButton jValidateByTroops;
    protected javax.swing.JButton jValidateWithAttackPlans;
    private org.jdesktop.swingx.JXList jVillageList;
    private javax.swing.JScrollPane jVillageScrollPane;
    protected javax.swing.JRadioButton jWorlddataSource;
    private org.jdesktop.swingx.JXCollapsiblePane jXCollapsiblePane1;
    private org.jdesktop.swingx.JXCollapsiblePane jXCollapsiblePane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXTextField jXTextField1;
    // End of variables declaration//GEN-END:variables
}
