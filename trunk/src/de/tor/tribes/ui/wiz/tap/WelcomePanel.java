/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EntryPanel.java
 *
 * Created on Oct 14, 2011, 5:23:41 PM
 */
package de.tor.tribes.ui.wiz.tap;

import java.util.Map;
import org.netbeans.spi.wizard.Wizard;
import org.netbeans.spi.wizard.WizardPanel;
import org.netbeans.spi.wizard.WizardPanelNavResult;

/**
 *
 * @author Torridity
 */
public class WelcomePanel extends javax.swing.JPanel implements WizardPanel {

    private static WelcomePanel singleton = null;

    public static synchronized WelcomePanel getSingleton() {
        if (singleton == null) {
            singleton = new WelcomePanel();
        }
        return singleton;
    }

    /** Creates new form EntryPanel */
    WelcomePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jAttackType = new javax.swing.JRadioButton();
        jDefendType = new javax.swing.JRadioButton();

        setLayout(new java.awt.BorderLayout());

        jTextPane1.setContentType("text/html");
        jTextPane1.setEditable(false);
        jTextPane1.setText("<html>Willkommen beim DS Workbench Taktikplaner.<br/>\nIn den folgenden Schritten kannst du dir entweder einen Angriffs- oder einen Verteidigungsplan erstellen lassen. W&auml;hle bitte zuerst aus, welche Art von Plan du erstellen m√∂chtest.</html>");
        jScrollPane1.setViewportView(jTextPane1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jAttackType);
        jAttackType.setSelected(true);
        jAttackType.setText("Angriff");
        jAttackType.setMaximumSize(new java.awt.Dimension(59, 30));
        jAttackType.setMinimumSize(new java.awt.Dimension(59, 30));
        jAttackType.setPreferredSize(new java.awt.Dimension(59, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        jPanel1.add(jAttackType, gridBagConstraints);

        buttonGroup1.add(jDefendType);
        jDefendType.setText("Verteidigung");
        jDefendType.setMaximumSize(new java.awt.Dimension(59, 30));
        jDefendType.setMinimumSize(new java.awt.Dimension(59, 30));
        jDefendType.setPreferredSize(new java.awt.Dimension(59, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 50, 5, 5);
        jPanel1.add(jDefendType, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton jAttackType;
    private javax.swing.JRadioButton jDefendType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    public boolean isAttackMode() {
        return jAttackType.isSelected();
    }

    @Override
    public WizardPanelNavResult allowNext(String string, Map map, Wizard wizard) {
        SourcePanel.getSingleton().setupForAttack(jAttackType.isSelected());
        TargetPanel.getSingleton().setupForAttack(jAttackType.isSelected());
        return WizardPanelNavResult.PROCEED;
    }

    @Override
    public WizardPanelNavResult allowBack(String string, Map map, Wizard wizard) {
        return WizardPanelNavResult.REMAIN_ON_PAGE;
    }

    @Override
    public WizardPanelNavResult allowFinish(String string, Map map, Wizard wizard) {
        return WizardPanelNavResult.REMAIN_ON_PAGE;
    }
}
