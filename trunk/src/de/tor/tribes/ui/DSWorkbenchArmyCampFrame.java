/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DSWorkbenchArmyCampFrame.java
 *
 * Created on Sep 18, 2010, 2:26:58 PM
 */
package de.tor.tribes.ui;

import de.tor.tribes.types.Village;
import de.tor.tribes.ui.editors.VillageCellEditor;
import de.tor.tribes.ui.renderer.SortableTableHeaderRenderer;
import de.tor.tribes.util.Constants;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.armycamp.ArmyCampManager;
import de.tor.tribes.util.armycamp.ArmyCampManagerListener;
import java.awt.Point;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;

/**
 *
 * @author Torridity
 */
public class DSWorkbenchArmyCampFrame extends AbstractDSWorkbenchFrame implements ArmyCampManagerListener {

    private static Logger logger = Logger.getLogger("ArmyCampView");
    private static DSWorkbenchArmyCampFrame SINGLETON = null;
    private TableCellRenderer mHeaderRenderer = null;

    public static synchronized DSWorkbenchArmyCampFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new DSWorkbenchArmyCampFrame();
        }
        return SINGLETON;
    }

    /** Creates new form DSWorkbenchArmyCampFrame */
    DSWorkbenchArmyCampFrame() {
        super();
        initComponents();
        try {
            jArmyCampFrameAlwaysOnTop.setSelected(Boolean.parseBoolean(GlobalOptions.getProperty("army.camp.frame.alwaysOnTop")));
            setAlwaysOnTop(jArmyCampFrameAlwaysOnTop.isSelected());
        } catch (Exception e) {
            //setting not available
        }

        mHeaderRenderer = new SortableTableHeaderRenderer();

        jArmyCampTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                int selected = jArmyCampTable.getSelectedRows().length;
                if (selected == 0) {
                    setTitle("Heereslager");
                } else if (selected == 1) {
                    setTitle("Heereslager (1 Heereslager ausgewählt)");
                } else if (selected > 1) {
                    setTitle("Heereslager (" + selected + " Heereslager ausgewählt)");
                }
            }
        });
        pack();
    }

    public void setupArmyCampPanel() {
        jArmyCampTable.invalidate();
        jArmyCampTable.setModel(ArmyCampManager.getSingleton().getTableModel());
        ArmyCampManager.getSingleton().addArmyCamphManagerListener(this);
        //setup renderer and general view
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jArmyCampTable.getModel());
        jArmyCampTable.setRowSorter(sorter);
        jScrollPane1.getViewport().setBackground(Constants.DS_BACK_LIGHT);
        //update view
        ArmyCampManager.getSingleton().armyCampsUpdatedExternally();
        jArmyCampTable.revalidate();
        jArmyCampTable.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jArmyCampTable = new javax.swing.JTable();
        jArmyCampFrameAlwaysOnTop = new javax.swing.JCheckBox();

        setTitle("Heereslager");

        jPanel1.setBackground(new java.awt.Color(239, 235, 223));

        jArmyCampTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jArmyCampTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addContainerGap())
        );

        jArmyCampFrameAlwaysOnTop.setText("Immer im Vordergrund");
        jArmyCampFrameAlwaysOnTop.setOpaque(false);
        jArmyCampFrameAlwaysOnTop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireArmyCampFrameAlwaysOnTopEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jArmyCampFrameAlwaysOnTop)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jArmyCampFrameAlwaysOnTop)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireArmyCampFrameAlwaysOnTopEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireArmyCampFrameAlwaysOnTopEvent
        setAlwaysOnTop(!isAlwaysOnTop());
    }//GEN-LAST:event_fireArmyCampFrameAlwaysOnTopEvent

    public void fireVillagesDraggedEvent(List<Village> pVillages, Point pDropLocation) {
    }

    public void fireArmyCampsChangedEvent() {
        jArmyCampTable.invalidate();
        jArmyCampTable.setModel(ArmyCampManager.getSingleton().getTableModel());

        //setup table view

        for (int i = 0; i < jArmyCampTable.getColumnCount(); i++) {
            jArmyCampTable.getColumn(jArmyCampTable.getColumnName(i)).setHeaderRenderer(mHeaderRenderer);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(ArmyCampManager.getSingleton().getTableModel());
        jArmyCampTable.setRowSorter(sorter);
        jArmyCampTable.revalidate();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jArmyCampFrameAlwaysOnTop;
    private javax.swing.JTable jArmyCampTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
