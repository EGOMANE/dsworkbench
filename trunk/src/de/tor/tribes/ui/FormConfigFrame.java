/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormConfigFrame.java
 *
 * Created on 06.01.2009, 10:38:27
 */
package de.tor.tribes.ui;

import de.tor.tribes.types.AbstractForm;
import de.tor.tribes.types.Circle;
import de.tor.tribes.types.FreeForm;
import de.tor.tribes.types.Line;
import de.tor.tribes.types.Rectangle;
import de.tor.tribes.types.Text;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.map.FormManager;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import net.java.dev.colorchooser.ColorChooser;

/**
 *
 * @author Charon
 */
public class FormConfigFrame extends javax.swing.JFrame {

    private AbstractForm mCurrentForm = null;
    private static FormConfigFrame SINGLETON = null;
    private ColorChooser mTextColorChooser = null;
    private ColorChooser mDrawColorChooser = null;
    private SamplePanel mSamplePanel = null;
    private boolean isInEditMode = false;

    public static synchronized FormConfigFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new FormConfigFrame();
        }
        return SINGLETON;
    }

    /** Creates new form FormConfigFrame */
    public FormConfigFrame() {
        initComponents();
        mTextColorChooser = new ColorChooser(Color.BLACK);
        mDrawColorChooser = new ColorChooser(Color.WHITE);
        ActionListener l = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updateValues();
            }
        };
        mDrawColorChooser.addActionListener(l);
        mTextColorChooser.addActionListener(l);
        jDrawColorPanel.add(mDrawColorChooser);
        jTextColorPanel.add(mTextColorChooser);
        mSamplePanel = new SamplePanel();
        jSamplePanel.add(mSamplePanel);

        try {
            jAlwaysOnTop.setSelected(Boolean.parseBoolean(GlobalOptions.getProperty("form.config.frame.alwaysOnTop")));
            setAlwaysOnTop(jAlwaysOnTop.isSelected());
        } catch (Exception e) {
            //setting not available
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jFormName = new javax.swing.JTextField();
        jSamplePanel = new javax.swing.JPanel();
        jDrawName = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jTextTransparencyLabel = new javax.swing.JLabel();
        jTextTransparency = new javax.swing.JSpinner();
        jDrawTransparencyLabel = new javax.swing.JLabel();
        jDrawTransparency = new javax.swing.JSpinner();
        jTextColorLabel = new javax.swing.JLabel();
        jDrawColorLabel = new javax.swing.JLabel();
        jDrawColorPanel = new javax.swing.JPanel();
        jTextColorPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jStrokeWidthLabel = new javax.swing.JLabel();
        jStrokeWidth = new javax.swing.JSpinner();
        jFillFormLabel = new javax.swing.JLabel();
        jFillForm = new javax.swing.JCheckBox();
        jRoundBorders = new javax.swing.JSpinner();
        jRoundBorderLabel = new javax.swing.JLabel();
        jTextHeight = new javax.swing.JSpinner();
        jTextHeightLabel = new javax.swing.JLabel();
        jStartArrowLabel = new javax.swing.JLabel();
        jDrawStartArrow = new javax.swing.JCheckBox();
        jEndArrowLabel = new javax.swing.JLabel();
        jDrawEndArrow = new javax.swing.JCheckBox();
        jToleranceLabel = new javax.swing.JLabel();
        jToleranceSpinner = new javax.swing.JSpinner();
        jAlwaysOnTop = new javax.swing.JCheckBox();

        setTitle("Form Einstellungen");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(239, 235, 223));

        jLabel1.setText("Name/Text");

        jFormName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                fireNameUpdateEvent(evt);
            }
        });

        jSamplePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Vorschau"));
        jSamplePanel.setOpaque(false);
        jSamplePanel.setLayout(new java.awt.BorderLayout());

        jDrawName.setText("Name zeichnen");
        jDrawName.setOpaque(false);
        jDrawName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireDrawNameEvent(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Farben"));
        jPanel2.setOpaque(false);

        jTextTransparencyLabel.setText("Texttransparenz");

        jTextTransparency.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.1f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        jTextTransparency.setMaximumSize(new java.awt.Dimension(80, 18));
        jTextTransparency.setMinimumSize(new java.awt.Dimension(80, 18));
        jTextTransparency.setPreferredSize(new java.awt.Dimension(80, 18));
        jTextTransparency.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireTransparencyChangedEvent(evt);
            }
        });

        jDrawTransparencyLabel.setText("Zeichentransparenz");

        jDrawTransparency.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.1f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        jDrawTransparency.setMaximumSize(new java.awt.Dimension(80, 18));
        jDrawTransparency.setMinimumSize(new java.awt.Dimension(80, 18));
        jDrawTransparency.setPreferredSize(new java.awt.Dimension(80, 18));
        jDrawTransparency.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireTransparencyChangedEvent(evt);
            }
        });

        jTextColorLabel.setText("Textfarbe");

        jDrawColorLabel.setText("Zeichenfarbe");

        jDrawColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jDrawColorPanel.setMaximumSize(new java.awt.Dimension(80, 18));
        jDrawColorPanel.setMinimumSize(new java.awt.Dimension(80, 18));
        jDrawColorPanel.setOpaque(false);
        jDrawColorPanel.setPreferredSize(new java.awt.Dimension(80, 18));
        jDrawColorPanel.setLayout(new java.awt.BorderLayout());

        jTextColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextColorPanel.setMaximumSize(new java.awt.Dimension(80, 18));
        jTextColorPanel.setMinimumSize(new java.awt.Dimension(80, 18));
        jTextColorPanel.setOpaque(false);
        jTextColorPanel.setPreferredSize(new java.awt.Dimension(80, 18));
        jTextColorPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDrawColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jTextColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDrawColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jDrawTransparencyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDrawTransparency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextTransparencyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextTransparency, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextTransparency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextTransparencyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jDrawTransparency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDrawTransparencyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDrawColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDrawColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Sonstiges"));
        jPanel3.setOpaque(false);

        jStrokeWidthLabel.setText("Strichbreite");

        jStrokeWidth.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.1f), Float.valueOf(15.0f), Float.valueOf(1.0f)));
        jStrokeWidth.setMaximumSize(new java.awt.Dimension(80, 18));
        jStrokeWidth.setMinimumSize(new java.awt.Dimension(80, 18));
        jStrokeWidth.setPreferredSize(new java.awt.Dimension(80, 18));
        jStrokeWidth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireStrokeChangedEvent(evt);
            }
        });

        jFillFormLabel.setText("Form ausfüllen");

        jFillForm.setOpaque(false);
        jFillForm.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireFillChangedEvent(evt);
            }
        });

        jRoundBorders.setModel(new javax.swing.SpinnerNumberModel(0, 0, 50, 1));
        jRoundBorders.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireRoundBorderChangedEvent(evt);
            }
        });

        jRoundBorderLabel.setText("Kantenrundung");

        jTextHeight.setModel(new javax.swing.SpinnerNumberModel(14, 10, 50, 1));
        jTextHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireTextHeightChangedEvent(evt);
            }
        });

        jTextHeightLabel.setText("Texthöhe");

        jStartArrowLabel.setText("Pfeil (Anfang)");

        jDrawStartArrow.setOpaque(false);
        jDrawStartArrow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireArrowsChanged(evt);
            }
        });

        jEndArrowLabel.setText("Pfeil (Ende)");

        jDrawEndArrow.setOpaque(false);
        jDrawEndArrow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireArrowsChanged(evt);
            }
        });

        jToleranceLabel.setText("Feinheitsgrad");

        jToleranceSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        jToleranceSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireToleranceChangedEvent(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextHeightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(jStrokeWidthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(jStartArrowLabel)
                    .addComponent(jEndArrowLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDrawEndArrow, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDrawStartArrow, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jTextHeight, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jStrokeWidth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jFillFormLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                    .addComponent(jRoundBorderLabel)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToleranceLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jFillForm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jRoundBorders, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jToleranceSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jStrokeWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jStrokeWidthLabel)
                            .addComponent(jFillFormLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextHeightLabel)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jFillForm, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRoundBorders, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRoundBorderLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDrawStartArrow, 0, 0, Short.MAX_VALUE)
                    .addComponent(jStartArrowLabel)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jToleranceLabel)
                        .addComponent(jToleranceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jEndArrowLabel)
                    .addComponent(jDrawEndArrow, 0, 0, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jSamplePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jFormName)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDrawName))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFormName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDrawName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSamplePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jAlwaysOnTop.setText("Immer im Vordergrund");
        jAlwaysOnTop.setOpaque(false);
        jAlwaysOnTop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireChangeAlwaysOnTopEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jAlwaysOnTop)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAlwaysOnTop)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean setupMode = false;

    public void setupAndShowInEditMode(AbstractForm pToEdit) {
        isInEditMode = true;
        setupMode = true;
        boolean fillAllowed = false;
        boolean drawAllowed = false;
        boolean arrowAllowed = false;
        boolean roundBorderAllowed = false;
        boolean toleranceAllowed = false;
        Class type = pToEdit.getClass();
        mCurrentForm = pToEdit;

        if (type.equals(Line.class)) {
            Line f = (Line) mCurrentForm;
            mSamplePanel.setType(0);
            drawAllowed = true;
            arrowAllowed = true;
            jDrawName.setEnabled(true);
            jDrawName.setSelected(false);
            mSamplePanel.setStrokeWidth(f.getStrokeWidth());
            mSamplePanel.setDrawColor(f.getDrawColor());
            mSamplePanel.setDrawTransparency(f.getDrawAlpha());
            mSamplePanel.setDrawText(f.isDrawName());
            mSamplePanel.drawStartArrow(f.isStartArrow());
            mSamplePanel.drawEndArrow(f.isEndArrow());
            mDrawColorChooser.setColor(f.getDrawColor());
            jDrawTransparency.setValue(f.getDrawAlpha());
            jStrokeWidth.setValue(f.getStrokeWidth());
            jDrawName.setSelected(f.isDrawName());
            jDrawStartArrow.setSelected(f.isStartArrow());
            jDrawEndArrow.setSelected(f.isEndArrow());
        } else if (type.equals(Rectangle.class)) {
            Rectangle f = (Rectangle) mCurrentForm;
            mSamplePanel.setType(1);
            fillAllowed = true;
            roundBorderAllowed = true;
            drawAllowed = true;
            jDrawName.setEnabled(true);
            jDrawName.setSelected(false);
            mSamplePanel.setStrokeWidth(f.getStrokeWidth());
            mSamplePanel.setDrawColor(f.getDrawColor());
            mSamplePanel.setDrawTransparency(f.getDrawAlpha());
            mSamplePanel.setFill(f.isFilled());
            mSamplePanel.setDrawText(f.isDrawName());
            mSamplePanel.setRoundBorders(f.getRounding());
            mDrawColorChooser.setColor(f.getDrawColor());
            jDrawTransparency.setValue(f.getDrawAlpha());
            jFillForm.setSelected(f.isFilled());
            jStrokeWidth.setValue(f.getStrokeWidth());
            jDrawName.setSelected(f.isDrawName());
            jRoundBorders.setValue(f.getRounding());
        } else if (type.equals(Circle.class)) {
            Circle f = (Circle) mCurrentForm;
            mSamplePanel.setType(2);
            fillAllowed = true;
            drawAllowed = true;
            jDrawName.setEnabled(true);
            jDrawName.setSelected(false);
            mSamplePanel.setStrokeWidth(f.getStrokeWidth());
            mSamplePanel.setDrawColor(f.getDrawColor());
            mSamplePanel.setDrawTransparency(f.getDrawAlpha());
            mSamplePanel.setFill(f.isFilled());
            mSamplePanel.setDrawText(f.isDrawName());
            mDrawColorChooser.setColor(f.getDrawColor());
            jDrawTransparency.setValue(f.getDrawAlpha());
            jFillForm.setSelected(f.isFilled());
            jStrokeWidth.setValue(f.getStrokeWidth());
            jDrawName.setSelected(f.isDrawName());
        } else if (type.equals(Text.class)) {
            mSamplePanel.setType(3);
            jDrawName.setEnabled(false);
            jDrawName.setSelected(true);
        } else if (type.equals(FreeForm.class)) {
            FreeForm f = (FreeForm) pToEdit;
            mSamplePanel.setType(4);
            fillAllowed = true;
            drawAllowed = true;
            jDrawName.setEnabled(true);
            jDrawName.setSelected(false);
            mSamplePanel.setTolerance(f.getTolerance());
            mSamplePanel.setStrokeWidth(f.getStrokeWidth());
            mSamplePanel.setDrawColor(f.getDrawColor());
            mSamplePanel.setDrawTransparency(f.getDrawAlpha());
            mSamplePanel.setFill(f.isFilled());
            mSamplePanel.setDrawText(f.isDrawName());
            jToleranceSpinner.setValue(f.getTolerance());
            mDrawColorChooser.setColor(f.getDrawColor());
            jDrawTransparency.setValue(f.getDrawAlpha());
            jFillForm.setSelected(f.isFilled());
            jStrokeWidth.setValue(f.getStrokeWidth());
            jDrawName.setSelected(f.isDrawName());
        }

        //drawable switch
        jDrawColorLabel.setEnabled(drawAllowed);
        jDrawColorPanel.setEnabled(drawAllowed);
        mDrawColorChooser.setEnabled(drawAllowed);
        jDrawTransparencyLabel.setEnabled(drawAllowed);
        jDrawTransparency.setEnabled(drawAllowed);

        //arrow switch
        jStartArrowLabel.setEnabled(arrowAllowed);
        jDrawStartArrow.setEnabled(arrowAllowed);
        jEndArrowLabel.setEnabled(arrowAllowed);
        jDrawEndArrow.setEnabled(arrowAllowed);

        //fill switch
        jFillFormLabel.setEnabled(fillAllowed);
        jFillForm.setEnabled(fillAllowed);

        //round corner switch
        jRoundBorderLabel.setEnabled(roundBorderAllowed);
        jRoundBorders.setEnabled(roundBorderAllowed);

        //tolerance switch
        jToleranceLabel.setEnabled(toleranceAllowed);
        jToleranceSpinner.setEnabled(toleranceAllowed);

        //set form values
        mSamplePanel.setText(mCurrentForm.getFormName());
        mSamplePanel.setTextSize((int) mCurrentForm.getTextSize());
        mSamplePanel.setTextColor(mCurrentForm.getTextColor());
        mSamplePanel.setTextTransparency(Math.abs(mCurrentForm.getTextAlpha()));
        jFormName.setText(mCurrentForm.getFormName());
        mTextColorChooser.setColor(mCurrentForm.getTextColor());
        jTextTransparency.setValue(Math.abs(mCurrentForm.getTextAlpha()));
        jTextHeight.setValue(mCurrentForm.getTextSize());
        jSamplePanel.updateUI();

        //showing frame
        setVisible(true);
        jSamplePanel.updateUI();
        setupMode = false;
    }

    public boolean isInEditMode() {
        return isInEditMode;
    }

    @Override
    public void setVisible(boolean v) {
        if (!v) {
            if (isInEditMode) {
                isInEditMode = false;
                mCurrentForm = null;
            }
        }
        super.setVisible(v);
    }

    public void purge() {
        FormManager.getSingleton().addForm(mCurrentForm);
        Class c = mCurrentForm.getClass();
        mCurrentForm = null;
        setupAndShow(c);
    }

    public void setupAndShow(Class pType) {
        if (isInEditMode) {
            mCurrentForm = null;
            isInEditMode = false;
        }
        boolean fillAllowed = false;
        boolean drawAllowed = false;
        boolean arrowAllowed = false;
        boolean roundBorderAllowed = false;
        boolean toleranceAllowed = false;
        boolean isText = false;
        jFormName.setText("");
        if (pType.equals(Line.class)) {
            mCurrentForm = new Line();
            drawAllowed = true;
            arrowAllowed = true;
            jDrawName.setEnabled(true);
        } else if (pType.equals(Rectangle.class)) {
            mCurrentForm = new Rectangle();
            fillAllowed = true;
            roundBorderAllowed = true;
            drawAllowed = true;
            jDrawName.setEnabled(true);
        } else if (pType.equals(Circle.class)) {
            mCurrentForm = new Circle();
            fillAllowed = true;
            drawAllowed = true;
            jDrawName.setEnabled(true);
        } else if (pType.equals(Text.class)) {
            mCurrentForm = new Text();
            jDrawName.setEnabled(false);
            isText = true;
        } else if (pType.equals(FreeForm.class)) {
            mCurrentForm = new FreeForm();
            fillAllowed = true;
            drawAllowed = true;
            toleranceAllowed = true;
            jDrawName.setEnabled(true);
        }

        //drawable switch
        jDrawColorLabel.setEnabled(drawAllowed);
        jDrawColorPanel.setEnabled(drawAllowed);
        mDrawColorChooser.setEnabled(drawAllowed);
        jDrawTransparencyLabel.setEnabled(drawAllowed);
        jDrawTransparency.setEnabled(drawAllowed);

        //arrow switch
        jStartArrowLabel.setEnabled(arrowAllowed);
        jDrawStartArrow.setEnabled(arrowAllowed);
        jEndArrowLabel.setEnabled(arrowAllowed);
        jDrawEndArrow.setEnabled(arrowAllowed);

        //fill switch
        jFillFormLabel.setEnabled(fillAllowed);
        jFillForm.setEnabled(fillAllowed);

        //round corner switch
        jRoundBorderLabel.setEnabled(roundBorderAllowed);
        jRoundBorders.setEnabled(roundBorderAllowed);

        //tolerance switch
        jToleranceLabel.setEnabled(toleranceAllowed);
        jToleranceSpinner.setEnabled(toleranceAllowed);

        //text switch
        jStrokeWidthLabel.setEnabled(!isText);
        jStrokeWidth.setEnabled(!isText);

        setVisible(true);
        int state = getExtendedState();
        // Clear the iconified bit
        state &= ~ICONIFIED;
        // Deiconify the frame
        setExtendedState(state);
        updateValues();
    }

    private void fireNameUpdateEvent(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fireNameUpdateEvent
        updateValues();
}//GEN-LAST:event_fireNameUpdateEvent

    private void fireFillChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireFillChangedEvent
        updateValues();
    }//GEN-LAST:event_fireFillChangedEvent

    private void fireStrokeChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireStrokeChangedEvent
        updateValues();
    }//GEN-LAST:event_fireStrokeChangedEvent

    private void fireTransparencyChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireTransparencyChangedEvent
        updateValues();
    }//GEN-LAST:event_fireTransparencyChangedEvent

    private void fireDrawNameEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireDrawNameEvent
        if (!jDrawName.isEnabled()) {
            return;
        }
        updateValues();
    }//GEN-LAST:event_fireDrawNameEvent

    private void fireRoundBorderChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireRoundBorderChangedEvent
        if (!jRoundBorders.isEnabled()) {
            return;
        }
        updateValues();
    }//GEN-LAST:event_fireRoundBorderChangedEvent

    private void fireTextHeightChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireTextHeightChangedEvent
        updateValues();
    }//GEN-LAST:event_fireTextHeightChangedEvent

    private void fireArrowsChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireArrowsChanged
        updateValues();
    }//GEN-LAST:event_fireArrowsChanged

    private void fireToleranceChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireToleranceChangedEvent
        updateValues();
    }//GEN-LAST:event_fireToleranceChangedEvent

    private void fireChangeAlwaysOnTopEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireChangeAlwaysOnTopEvent
        setAlwaysOnTop(jAlwaysOnTop.isSelected());
    }//GEN-LAST:event_fireChangeAlwaysOnTopEvent

    private void updateValues() {
        if (setupMode) {
            //do not set values in setup
            return;
        }
        if (mCurrentForm != null) {
            mCurrentForm.setFormName(jFormName.getText());

            if (mCurrentForm instanceof Text) {
                ((Text) mCurrentForm).setTextColor(mTextColorChooser.getColor());
                ((Text) mCurrentForm).setTextSize((Integer) jTextHeight.getValue());
                ((Text) mCurrentForm).setTextAlpha((Float) jTextTransparency.getValue());
                //sample panel settings
                mSamplePanel.setType(3);
            } else if (mCurrentForm instanceof Rectangle) {
                ((Rectangle) mCurrentForm).setStrokeWidth((Float) jStrokeWidth.getValue());
                ((Rectangle) mCurrentForm).setDrawColor(mDrawColorChooser.getColor());
                ((Rectangle) mCurrentForm).setTextColor(mTextColorChooser.getColor());
                ((Rectangle) mCurrentForm).setTextSize((Integer) jTextHeight.getValue());
                ((Rectangle) mCurrentForm).setDrawAlpha((Float) jDrawTransparency.getValue());
                ((Rectangle) mCurrentForm).setTextAlpha((Float) jTextTransparency.getValue());
                ((Rectangle) mCurrentForm).setDrawName(jDrawName.isSelected());
                ((Rectangle) mCurrentForm).setFilled(jFillForm.isSelected());
                ((Rectangle) mCurrentForm).setRounding((Integer) jRoundBorders.getValue());
                //sample panel settings
                mSamplePanel.setType(1);
                mSamplePanel.setRoundBorders((Integer) jRoundBorders.getValue());
                mSamplePanel.setFill(jFillForm.isSelected());
                mSamplePanel.setDrawColor(mDrawColorChooser.getColor());
                mSamplePanel.setDrawTransparency((Float) jDrawTransparency.getValue());
                mSamplePanel.setStrokeWidth((Float) jStrokeWidth.getValue());
            } else if (mCurrentForm instanceof Circle) {
                ((Circle) mCurrentForm).setStrokeWidth((Float) jStrokeWidth.getValue());
                ((Circle) mCurrentForm).setDrawColor(mDrawColorChooser.getColor());
                ((Circle) mCurrentForm).setTextColor(mTextColorChooser.getColor());
                ((Circle) mCurrentForm).setTextSize((Integer) jTextHeight.getValue());
                ((Circle) mCurrentForm).setDrawAlpha((Float) jDrawTransparency.getValue());
                ((Circle) mCurrentForm).setTextAlpha((Float) jTextTransparency.getValue());
                ((Circle) mCurrentForm).setDrawName(jDrawName.isSelected());
                ((Circle) mCurrentForm).setFilled(jFillForm.isSelected());
                //sample panel settings
                mSamplePanel.setType(2);
                mSamplePanel.setFill(jFillForm.isSelected());
                mSamplePanel.setDrawColor(mDrawColorChooser.getColor());
                mSamplePanel.setDrawTransparency((Float) jDrawTransparency.getValue());
                mSamplePanel.setStrokeWidth((Float) jStrokeWidth.getValue());
            } else if (mCurrentForm instanceof Line) {
                ((Line) mCurrentForm).setStrokeWidth((Float) jStrokeWidth.getValue());
                ((Line) mCurrentForm).setDrawColor(mDrawColorChooser.getColor());
                ((Line) mCurrentForm).setTextColor(mTextColorChooser.getColor());
                ((Line) mCurrentForm).setDrawAlpha((Float) jDrawTransparency.getValue());
                ((Line) mCurrentForm).setTextAlpha((Float) jTextTransparency.getValue());
                ((Line) mCurrentForm).setStartArrow(jDrawStartArrow.isSelected());
                ((Line) mCurrentForm).setEndArrow(jDrawEndArrow.isSelected());
                ((Line) mCurrentForm).setDrawName(jDrawName.isSelected());
                //sample panel settings
                mSamplePanel.setType(0);
                mSamplePanel.drawStartArrow(jDrawStartArrow.isSelected());
                mSamplePanel.drawEndArrow(jDrawEndArrow.isSelected());
                mSamplePanel.setDrawColor(mDrawColorChooser.getColor());
                mSamplePanel.setDrawTransparency((Float) jDrawTransparency.getValue());
                mSamplePanel.setStrokeWidth((Float) jStrokeWidth.getValue());
            } else if (mCurrentForm instanceof FreeForm) {
                ((FreeForm) mCurrentForm).setStrokeWidth((Float) jStrokeWidth.getValue());
                ((FreeForm) mCurrentForm).setDrawColor(mDrawColorChooser.getColor());
                ((FreeForm) mCurrentForm).setTextColor(mTextColorChooser.getColor());
                ((FreeForm) mCurrentForm).setTextSize((Integer) jTextHeight.getValue());
                ((FreeForm) mCurrentForm).setDrawAlpha((Float) jDrawTransparency.getValue());
                ((FreeForm) mCurrentForm).setTextAlpha((Float) jTextTransparency.getValue());
                ((FreeForm) mCurrentForm).setDrawName(jDrawName.isSelected());
                ((FreeForm) mCurrentForm).setFilled(jFillForm.isSelected());
                ((FreeForm) mCurrentForm).setTolerance((Float) jToleranceSpinner.getValue());
                //sample panel settings
                mSamplePanel.setType(4);
                mSamplePanel.setFill(jFillForm.isSelected());
                mSamplePanel.setDrawColor(mDrawColorChooser.getColor());
                mSamplePanel.setDrawTransparency((Float) jDrawTransparency.getValue());
                mSamplePanel.setStrokeWidth((Float) jStrokeWidth.getValue());
                mSamplePanel.setTolerance((Float) jToleranceSpinner.getValue());
            }

            mSamplePanel.setText(jFormName.getText());
            mSamplePanel.setDrawText(jDrawName.isSelected());
            mSamplePanel.setTextSize((Integer) jTextHeight.getValue());
            mSamplePanel.setTextColor(mTextColorChooser.getColor());
            mSamplePanel.setTextTransparency((Float) jTextTransparency.getValue());
            jSamplePanel.updateUI();
        }
    }

    public AbstractForm getCurrentForm() {
        return mCurrentForm;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FormConfigFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAlwaysOnTop;
    private javax.swing.JLabel jDrawColorLabel;
    private javax.swing.JPanel jDrawColorPanel;
    private javax.swing.JCheckBox jDrawEndArrow;
    private javax.swing.JCheckBox jDrawName;
    private javax.swing.JCheckBox jDrawStartArrow;
    private javax.swing.JSpinner jDrawTransparency;
    private javax.swing.JLabel jDrawTransparencyLabel;
    private javax.swing.JLabel jEndArrowLabel;
    private javax.swing.JCheckBox jFillForm;
    private javax.swing.JLabel jFillFormLabel;
    private javax.swing.JTextField jFormName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jRoundBorderLabel;
    private javax.swing.JSpinner jRoundBorders;
    private javax.swing.JPanel jSamplePanel;
    private javax.swing.JLabel jStartArrowLabel;
    private javax.swing.JSpinner jStrokeWidth;
    private javax.swing.JLabel jStrokeWidthLabel;
    private javax.swing.JLabel jTextColorLabel;
    private javax.swing.JPanel jTextColorPanel;
    private javax.swing.JSpinner jTextHeight;
    private javax.swing.JLabel jTextHeightLabel;
    private javax.swing.JSpinner jTextTransparency;
    private javax.swing.JLabel jTextTransparencyLabel;
    private javax.swing.JLabel jToleranceLabel;
    private javax.swing.JSpinner jToleranceSpinner;
    // End of variables declaration//GEN-END:variables
}
