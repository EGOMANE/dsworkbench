/*
 * ToolBoxFrame.java
 *
 * Created on 26. Juni 2008, 15:42
 */
package de.tor.tribes.ui;

import de.tor.tribes.util.GlobalOptions;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author  Jejkal
 */
public class ToolBoxFrame extends javax.swing.JFrame {

    private MapPanel mMap = null;
    private MinimapPanel mMiniMap = null;
    private HideThread hThread = null;
    private int dx = 0;
    private int dy = 0;

    /** Creates new form ToolBoxFrame */
    public ToolBoxFrame(MapPanel pMap, MinimapPanel pMinimap) {
        initComponents();
        buildButtons();
        initListeners();
        pack();
        mMap = pMap;
        mMiniMap = pMinimap;
        hThread = new HideThread(this);
        hThread.start();
    }

    private void buildButtons() {
        try {
            jDragLabel.setIcon(new ImageIcon("./graphics/icons/tools.png"));
            jMeasureButton.setIcon(new ImageIcon("./graphics/icons/measure.png"));
            jMarkButton.setIcon(new ImageIcon("./graphics/icons/mark.png"));
            jAttackAxeButton.setIcon(new ImageIcon("./graphics/icons/attack_axe.png"));
            jAttackRamButton.setIcon(new ImageIcon("./graphics/icons/attack_ram.png"));
            jAttackSnobButton.setIcon(new ImageIcon("./graphics/icons/attack_snob.png"));
            jAttackSpyButton.setIcon(new ImageIcon("./graphics/icons/attack_spy.png"));
            jAttackLightButton.setIcon(new ImageIcon("./graphics/icons/attack_light.png"));
            jAttackHeavyButton.setIcon(new ImageIcon("./graphics/icons/attack_heavy.png"));
            jAttackSwordButton.setIcon(new ImageIcon("./graphics/icons/attack_sword.png"));
            jMoveButton.setIcon(new ImageIcon("./graphics/icons/move.png"));
            jZoomButton.setIcon(new ImageIcon("./graphics/icons/zoom.png"));
            jSearchButton.setIcon(new ImageIcon("./graphics/icons/search.png"));
            jSettingsButton.setIcon(new ImageIcon("./graphics/icons/settings.png"));
          //  jScreenshotButton.setIcon(new ImageIcon("./graphics/icons/camera.gif"));
        } catch (Exception e) {
        }
    }

    private void initListeners() {
        jDragLabel.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    if (e.getClickCount() == 2) {
                        hThread.setHidden(!hThread.isHidden());
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                dx = e.getX();
                dy = e.getY();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                dx = 0;
                dy = 0;
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

        jDragLabel.addMouseMotionListener(new MouseMotionListener() {

            @Override
            public void mouseDragged(MouseEvent e) {
                setLocation(e.getLocationOnScreen().x - dx, e.getLocationOnScreen().y - dy);
            }

            @Override
            public void mouseMoved(MouseEvent e) {
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jMeasureButton = new javax.swing.JButton();
        jMarkButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jAttackAxeButton = new javax.swing.JButton();
        jAttackRamButton = new javax.swing.JButton();
        jAttackSnobButton = new javax.swing.JButton();
        jAttackSpyButton = new javax.swing.JButton();
        jAttackLightButton = new javax.swing.JButton();
        jAttackHeavyButton = new javax.swing.JButton();
        jAttackSwordButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMoveButton = new javax.swing.JButton();
        jZoomButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSearchButton = new javax.swing.JButton();
        jSettingsButton = new javax.swing.JButton();
        jDragLabel = new javax.swing.JLabel();

        setTitle("Tools");
        setAlwaysOnTop(true);
        setResizable(false);
        setUndecorated(true);

        jPanel1.setMaximumSize(new java.awt.Dimension(30, 330));
        jPanel1.setMinimumSize(new java.awt.Dimension(30, 330));
        jPanel1.setPreferredSize(new java.awt.Dimension(30, 330));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jMeasureButton.setToolTipText("Entfernungen messen");
        jMeasureButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jMeasureButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jMeasureButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jMeasureButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jMeasureButton);

        jMarkButton.setToolTipText("Markieren");
        jMarkButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jMarkButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jMarkButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jMarkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jMarkButton);

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setMaximumSize(new java.awt.Dimension(40, 4));
        jLabel2.setMinimumSize(new java.awt.Dimension(40, 4));
        jLabel2.setPreferredSize(new java.awt.Dimension(40, 4));
        jPanel1.add(jLabel2);

        jAttackAxeButton.setToolTipText("Angriff (Axt)");
        jAttackAxeButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackAxeButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackAxeButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackAxeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackAxeButton);

        jAttackRamButton.setToolTipText("Angriff (Ramme)");
        jAttackRamButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackRamButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackRamButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackRamButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackRamButton);

        jAttackSnobButton.setToolTipText("Angriff (AG)");
        jAttackSnobButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackSnobButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackSnobButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackSnobButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackSnobButton);

        jAttackSpyButton.setToolTipText("Angriff (Sp√§her)");
        jAttackSpyButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackSpyButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackSpyButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackSpyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackSpyButton);

        jAttackLightButton.setToolTipText("Angriff (LKav)");
        jAttackLightButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackLightButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackLightButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackLightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackLightButton);

        jAttackHeavyButton.setToolTipText("Angriff (SKav)");
        jAttackHeavyButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackHeavyButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackHeavyButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackHeavyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackHeavyButton);

        jAttackSwordButton.setToolTipText("Angriff (Schwert)");
        jAttackSwordButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jAttackSwordButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jAttackSwordButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jAttackSwordButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jAttackSwordButton);

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setMaximumSize(new java.awt.Dimension(40, 4));
        jLabel1.setMinimumSize(new java.awt.Dimension(40, 4));
        jLabel1.setPreferredSize(new java.awt.Dimension(40, 4));
        jPanel1.add(jLabel1);

        jMoveButton.setToolTipText("Minimap bewegen");
        jMoveButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jMoveButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jMoveButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jMoveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jMoveButton);

        jZoomButton.setToolTipText("Minimap zoomen");
        jZoomButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jZoomButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jZoomButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jZoomButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jZoomButton);

        jLabel3.setBackground(new java.awt.Color(102, 102, 102));
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setMaximumSize(new java.awt.Dimension(40, 4));
        jLabel3.setMinimumSize(new java.awt.Dimension(40, 4));
        jLabel3.setPreferredSize(new java.awt.Dimension(40, 4));
        jPanel1.add(jLabel3);

        jSearchButton.setToolTipText("Suche");
        jSearchButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jSearchButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jSearchButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jSearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jSearchButton);

        jSettingsButton.setToolTipText("Einstellungen");
        jSettingsButton.setMaximumSize(new java.awt.Dimension(30, 30));
        jSettingsButton.setMinimumSize(new java.awt.Dimension(30, 30));
        jSettingsButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jSettingsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireToolClickedEvent(evt);
            }
        });
        jPanel1.add(jSettingsButton);

        jDragLabel.setBackground(new java.awt.Color(153, 153, 153));
        jDragLabel.setMaximumSize(new java.awt.Dimension(30, 30));
        jDragLabel.setMinimumSize(new java.awt.Dimension(30, 30));
        jDragLabel.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDragLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDragLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void fireToolClickedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireToolClickedEvent
    if (evt.getSource() == jMeasureButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_MEASURE);
    } else if (evt.getSource() == jMarkButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_MARK);
    } else if (evt.getSource() == jAttackAxeButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_AXE);
    } else if (evt.getSource() == jAttackRamButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_RAM);
    } else if (evt.getSource() == jAttackSnobButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_SNOB);
    } else if (evt.getSource() == jAttackSpyButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_SPY);
    } else if (evt.getSource() == jAttackLightButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_LIGHT);
    } else if (evt.getSource() == jAttackHeavyButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_HEAVY);
    } else if (evt.getSource() == jAttackSwordButton) {
        mMap.setCurrentCursor(GlobalOptions.CURSOR_ATTACK_SWORD);
    } else if (evt.getSource() == jMoveButton) {
        mMiniMap.setCurrentCursor(GlobalOptions.CURSOR_MOVE);
    } else if (evt.getSource() == jZoomButton) {
        mMiniMap.setCurrentCursor(GlobalOptions.CURSOR_ZOOM);
    }else if (evt.getSource() == jSearchButton) {
        SearchFrame.getGlobalSearchFrame().setVisible(true);
    }else if (evt.getSource() == jSettingsButton) {
        DSWorkbenchSettingsDialog.getGlobalSettingsFrame().setVisible(true);
    }/*else if (evt.getSource() == jScreenshotButton) {
        MinimapPanel.getGlobalMinimap().makeScreenshot();
    }*/
    
}//GEN-LAST:event_fireToolClickedEvent

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ToolBoxFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAttackAxeButton;
    private javax.swing.JButton jAttackHeavyButton;
    private javax.swing.JButton jAttackLightButton;
    private javax.swing.JButton jAttackRamButton;
    private javax.swing.JButton jAttackSnobButton;
    private javax.swing.JButton jAttackSpyButton;
    private javax.swing.JButton jAttackSwordButton;
    private javax.swing.JLabel jDragLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jMarkButton;
    private javax.swing.JButton jMeasureButton;
    private javax.swing.JButton jMoveButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jSearchButton;
    private javax.swing.JButton jSettingsButton;
    private javax.swing.JButton jZoomButton;
    // End of variables declaration//GEN-END:variables
}

class HideThread extends Thread {

    JFrame mParent;
    boolean hidden = false;

    public HideThread(JFrame pParent) {
        mParent = pParent;
        setDaemon(true);
    }

    public void setHidden(boolean v) {
        hidden = v;
    }

    public boolean isHidden() {
        return hidden;
    }

    @Override
    public void run() {
        while (true) {
            if (hidden) {
                if (mParent.getHeight() > 40) {
                    mParent.setSize(mParent.getWidth(), mParent.getHeight() - 10);
                }
            } else {
                if (mParent.getHeight() < 456) {
                    if (mParent.getHeight() != 456) {
                        mParent.setSize(mParent.getWidth(), mParent.getHeight() + 10);
                    }
                }
            }
            try {
                Thread.sleep(10);
            } catch (Exception e) {
            }
        }
    }
}
