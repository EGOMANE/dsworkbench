/*
 * DSWorkbenchAttackFrame.java
 *
 * Created on 28. September 2008, 14:58
 */
package de.tor.tribes.ui;

import de.tor.tribes.io.UnitHolder;
import de.tor.tribes.types.Attack;
import de.tor.tribes.types.Village;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import de.tor.tribes.util.BrowserCommandSender;
import de.tor.tribes.util.Constants;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.attack.AttackManager;
import java.util.List;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import de.tor.tribes.util.attack.AttackManagerListener;
import de.tor.tribes.ui.editors.DateSpinEditor;
import de.tor.tribes.ui.editors.UnitCellEditor;
import de.tor.tribes.ui.editors.VillageCellEditor;
import de.tor.tribes.ui.renderer.DateCellRenderer;
import de.tor.tribes.util.DSWorkbenchFrameListener;
import java.awt.Component;
import java.util.LinkedList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author  Charon
 */
public class DSWorkbenchAttackFrame extends javax.swing.JFrame implements AttackManagerListener {

    private static DSWorkbenchAttackFrame SINGLETON = null;
    private List<DSWorkbenchFrameListener> mFrameListeners = null;

    /** Creates new form DSWorkbenchAttackFrame */
    DSWorkbenchAttackFrame() {
        mFrameListeners = new LinkedList<DSWorkbenchFrameListener>();
        initComponents();
        getContentPane().setBackground(Constants.DS_BACK);

        try {
            jAttackFrameAlwaysOnTop.setSelected(Boolean.parseBoolean(GlobalOptions.getProperty(java.util.ResourceBundle.getBundle("de/tor/tribes/ui/Bundle").getString("attack.frame.alwaysOnTop"))));
            setAlwaysOnTop(jAttackFrameAlwaysOnTop.isSelected());
        } catch (Exception e) {
            //setting not available
        }
        pack();
    }

    public static DSWorkbenchAttackFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new DSWorkbenchAttackFrame();
        }
        return SINGLETON;
    }

    public synchronized void addFrameListener(DSWorkbenchFrameListener pListener) {
        mFrameListeners.add(pListener);
    }

    public synchronized void removeFrameListener(DSWorkbenchFrameListener pListener) {
        mFrameListeners.remove(pListener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jAttackPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jAttackTable = new javax.swing.JTable();
        jRemoveAttackButton = new javax.swing.JButton();
        jCheckAttacksButton = new javax.swing.JButton();
        jSendAttackButton = new javax.swing.JButton();
        jMarkFilteredButton = new javax.swing.JButton();
        jCopyUnformattedToClipboardButton = new javax.swing.JButton();
        jCopyBBCodeToClipboardButton = new javax.swing.JButton();
        jChangeArrivalButton = new javax.swing.JButton();
        jMarkAllButton = new javax.swing.JButton();
        jDrawMarkedButton = new javax.swing.JButton();
        jAttackFrameAlwaysOnTop = new javax.swing.JCheckBox();

        setTitle(null);

        jAttackPanel.setBackground(new java.awt.Color(239, 235, 223));
        jAttackPanel.setMaximumSize(new java.awt.Dimension(750, 377));
        jAttackPanel.setMinimumSize(new java.awt.Dimension(750, 377));
        jAttackPanel.setRequestFocusEnabled(false);

        jAttackTable.setBackground(new java.awt.Color(236, 233, 216));
        jAttackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jAttackTable.setOpaque(false);
        jAttackTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(jAttackTable);

        jRemoveAttackButton.setBackground(new java.awt.Color(239, 235, 223));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/tor/tribes/ui/Bundle"); // NOI18N
        jRemoveAttackButton.setText(bundle.getString("DSWorkbenchAttackFrame.jRemoveAttackButton.text")); // NOI18N
        jRemoveAttackButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jRemoveAttackButton.toolTipText")); // NOI18N
        jRemoveAttackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireRemoveAttackEvent(evt);
            }
        });

        jCheckAttacksButton.setBackground(new java.awt.Color(239, 235, 223));
        jCheckAttacksButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCheckAttacksButton.text")); // NOI18N
        jCheckAttacksButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jCheckAttacksButton.toolTipText")); // NOI18N
        jCheckAttacksButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireValidateAttacksEvent(evt);
            }
        });

        jSendAttackButton.setBackground(new java.awt.Color(239, 235, 223));
        jSendAttackButton.setText(bundle.getString("DSWorkbenchAttackFrame.jSendAttackButton.text")); // NOI18N
        jSendAttackButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jSendAttackButton.toolTipText")); // NOI18N
        jSendAttackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSendAttackEvent(evt);
            }
        });

        jMarkFilteredButton.setBackground(new java.awt.Color(239, 235, 223));
        jMarkFilteredButton.setText(bundle.getString("DSWorkbenchAttackFrame.jMarkAllButton.text")); // NOI18N
        jMarkFilteredButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jMarkAllButton.toolTipText")); // NOI18N

        jCopyUnformattedToClipboardButton.setBackground(new java.awt.Color(239, 235, 223));
        jCopyUnformattedToClipboardButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCopyUnformattedToClipboardButton.text")); // NOI18N
        jCopyUnformattedToClipboardButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jCopyUnformattedToClipboardButton.toolTipText")); // NOI18N
        jCopyUnformattedToClipboardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jCopyBBCodeToClipboardButton.setBackground(new java.awt.Color(239, 235, 223));
        jCopyBBCodeToClipboardButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCopyBBCodeToClipboardButton.text")); // NOI18N
        jCopyBBCodeToClipboardButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jCopyBBCodeToClipboardButton.toolTipText")); // NOI18N
        jCopyBBCodeToClipboardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jChangeArrivalButton.setBackground(new java.awt.Color(239, 235, 223));
        jChangeArrivalButton.setText(bundle.getString("DSWorkbenchAttackFrame.jChangeArrivalButton.text")); // NOI18N
        jChangeArrivalButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jChangeArrivalButton.toolTipText")); // NOI18N

        jMarkAllButton.setBackground(new java.awt.Color(239, 235, 223));
        jMarkAllButton.setText(bundle.getString("DSWorkbenchAttackFrame.jButton1.text")); // NOI18N
        jMarkAllButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jButton1.toolTipText")); // NOI18N
        jMarkAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireMarkAllEvent(evt);
            }
        });

        jDrawMarkedButton.setBackground(new java.awt.Color(239, 235, 223));
        jDrawMarkedButton.setText(bundle.getString("DSWorkbenchAttackFrame.jButton2.text")); // NOI18N
        jDrawMarkedButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jDrawMarkedButton.toolTipText")); // NOI18N
        jDrawMarkedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireDrawSelectedEvent(evt);
            }
        });

        javax.swing.GroupLayout jAttackPanelLayout = new javax.swing.GroupLayout(jAttackPanel);
        jAttackPanel.setLayout(jAttackPanelLayout);
        jAttackPanelLayout.setHorizontalGroup(
            jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jAttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCheckAttacksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemoveAttackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSendAttackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMarkAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMarkFilteredButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jChangeArrivalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCopyBBCodeToClipboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDrawMarkedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCopyUnformattedToClipboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jAttackPanelLayout.setVerticalGroup(
            jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addGroup(jAttackPanelLayout.createSequentialGroup()
                        .addComponent(jCheckAttacksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemoveAttackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSendAttackButton)
                        .addGap(30, 30, 30)
                        .addComponent(jMarkAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMarkFilteredButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jChangeArrivalButton)
                        .addGap(30, 30, 30)
                        .addComponent(jCopyUnformattedToClipboardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCopyBBCodeToClipboardButton)
                        .addGap(38, 38, 38)
                        .addComponent(jDrawMarkedButton)))
                .addContainerGap())
        );

        jAttackFrameAlwaysOnTop.setText(bundle.getString("DSWorkbenchAttackFrame.jAttackFrameAlwaysOnTop.text")); // NOI18N
        jAttackFrameAlwaysOnTop.setOpaque(false);
        jAttackFrameAlwaysOnTop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireAttackFrameOnTopEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jAttackFrameAlwaysOnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jAttackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 685, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jAttackPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAttackFrameAlwaysOnTop)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void fireRemoveAttackEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireRemoveAttackEvent
    int[] rows = jAttackTable.getSelectedRows();
    if (rows.length == 0) {
        return;
    }

    String message = ((rows.length == 1) ? "Angriff " : (rows.length + " Angriffe ")) + "wirklich löschen?";
    int res = JOptionPane.showConfirmDialog(this, message, "Angriff entfernen", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (res != JOptionPane.YES_OPTION) {
        return;
    }

    AttackManager.getSingleton().removeAttack(rows);
}//GEN-LAST:event_fireRemoveAttackEvent

private void fireValidateAttacksEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireValidateAttacksEvent
    DefaultTableModel model = (DefaultTableModel) jAttackTable.getModel();

    Hashtable<Integer, String> errors = new Hashtable<Integer, String>();
    for (int i = 0; i < model.getRowCount(); i++) {
        Date sendTime = (Date) model.getValueAt(i, 3);
        Date arriveTime = (Date) model.getValueAt(i, 4);
        if (arriveTime.getTime() < System.currentTimeMillis()) {
            errors.put(i, "Ankunftszeit liegt in der Vergangenheit");
        } else if (sendTime.getTime() < System.currentTimeMillis()) {
            errors.put(i, "Abschickzeit liegt in der Vergangenheit");
        }
    }

    if (errors.size() != 0) {
        String message = "";
        Enumeration<Integer> keys = errors.keys();
        ListSelectionModel sModel = jAttackTable.getSelectionModel();
        sModel.removeSelectionInterval(0, jAttackTable.getRowCount());
        while (keys.hasMoreElements()) {
            int row = keys.nextElement();
            String error = errors.get(row);
            message = "Zeile " + (row + 1) + ": " + error + "\n" + message;
            sModel.addSelectionInterval(row, row);
        }
        JOptionPane.showMessageDialog(this, message, "Fehler", JOptionPane.WARNING_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Keine Fehler gefunden", "Information", JOptionPane.INFORMATION_MESSAGE);
    }
}//GEN-LAST:event_fireValidateAttacksEvent

private void fireSendAttackEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireSendAttackEvent
    int selectedRow = jAttackTable.getSelectedRow();
    if (selectedRow < 0) {
        return;
    }
    Village source = (Village) ((DefaultTableModel) jAttackTable.getModel()).getValueAt(selectedRow, 0);
    Village target = (Village) ((DefaultTableModel) jAttackTable.getModel()).getValueAt(selectedRow, 1);
    BrowserCommandSender.sendTroops(source, target);
}//GEN-LAST:event_fireSendAttackEvent

private void fireAttackFrameOnTopEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireAttackFrameOnTopEvent
    setAlwaysOnTop(!isAlwaysOnTop());
}//GEN-LAST:event_fireAttackFrameOnTopEvent

private void fireMarkAllEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireMarkAllEvent
    int[] rows = jAttackTable.getSelectedRows();
    if ((rows == null) || (rows.length == 0)) {
        jAttackTable.getSelectionModel().setSelectionInterval(0, jAttackTable.getRowCount());
    } else {
        jAttackTable.getSelectionModel().removeSelectionInterval(0, jAttackTable.getRowCount());
    }
}//GEN-LAST:event_fireMarkAllEvent

private void fireDrawSelectedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireDrawSelectedEvent
int[] rows = jAttackTable.getSelectionModel().getSelectedRows();
    System.out.println("l " + rows.length);
    System.out.println(jAttackTable.getRowCount());
    if ((rows != null) && (rows.length > 0)) {
        for(int r : rows){
            System.out.println("SELECT " + r);
            AttackManager.getSingleton().getAttackPlan(null).get(r).setShowOnMap(Boolean.TRUE);
        }
        
        AttackManager.getSingleton().attacksUpdatedExternally(null);
    }
}//GEN-LAST:event_fireDrawSelectedEvent

    public void setVisible(boolean v) {
        super.setVisible(v);
        fireVisibilityChangedEvents(v);
    }

    protected void setupAttackPanel() {
        AttackManager.getSingleton().addAttackManagerListener(this);
        jAttackTable.setModel(AttackManager.getSingleton().getTableModel());
        //setup renderer and general view
        jAttackTable.setDefaultRenderer(Date.class, new DateCellRenderer());
        jAttackTable.setDefaultEditor(Date.class, new DateSpinEditor());
        jAttackTable.setDefaultEditor(UnitHolder.class, new UnitCellEditor());
        jAttackTable.setDefaultEditor(Village.class, new VillageCellEditor());

        // jAttackTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

        // <editor-fold defaultstate="collapsed" desc=" Add CellEditorListener for changes ">

        CellEditorListener attackChangedListener = new CellEditorListener() {

            @Override
            public void editingStopped(ChangeEvent e) {
                try {
                    for (int i = 0; i < jAttackTable.getRowCount(); i++) {
                        List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
                        Attack a = attacks.get(i);
                        a.setSource((Village) jAttackTable.getValueAt(i, 0));
                        a.setTarget((Village) jAttackTable.getValueAt(i, 1));
                        a.setUnit((UnitHolder) jAttackTable.getValueAt(i, 2));
                        //3 is only sendTime
                        a.setArriveTime((Date) jAttackTable.getValueAt(i, 4));
                        a.setShowOnMap((Boolean) jAttackTable.getValueAt(i, 5));
                    }
                    AttackManager.getSingleton().attacksUpdatedExternally(null);
                } catch (Exception ee) {
                    //ignored
                }
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
            }
        };
        // </editor-fold>

        jAttackTable.getDefaultEditor(Boolean.class).addCellEditorListener(attackChangedListener);
        jAttackTable.getDefaultEditor(Date.class).addCellEditorListener(attackChangedListener);
        jAttackTable.getDefaultEditor(UnitHolder.class).addCellEditorListener(attackChangedListener);
        jAttackTable.getDefaultEditor(Village.class).addCellEditorListener(attackChangedListener);

        AttackManager.getSingleton().attacksUpdatedExternally(null);
    }

    private synchronized void fireVisibilityChangedEvents(boolean v) {
        for (DSWorkbenchFrameListener listener : mFrameListeners) {
            listener.fireVisibilityChangedEvent(this, v);
        }
    }

    @Override
    public void fireAttacksChangedEvent(String pPlan) {
        jAttackTable.invalidate();
        jAttackTable.setModel(AttackManager.getSingleton().getTableModel());
        jScrollPane2.getViewport().setBackground(Constants.DS_BACK_LIGHT);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = new DefaultTableCellRenderer().getTableCellRendererComponent(table, value, hasFocus, hasFocus, row, row);
                c.setBackground(Constants.DS_BACK);
                DefaultTableCellRenderer r = ((DefaultTableCellRenderer) c);
                r.setText("<html><b>" + r.getText() + "</b></html>");
                return c;
            }
        };

        for (int i = 0; i < jAttackTable.getColumnCount(); i++) {
            jAttackTable.getColumn(jAttackTable.getColumnName(i)).setHeaderRenderer(headerRenderer);
        }

        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(AttackManager.getSingleton().getTableModel());
        jAttackTable.setRowSorter(sorter);

        jAttackTable.revalidate();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAttackFrameAlwaysOnTop;
    private javax.swing.JPanel jAttackPanel;
    private javax.swing.JTable jAttackTable;
    private javax.swing.JButton jChangeArrivalButton;
    private javax.swing.JButton jCheckAttacksButton;
    private javax.swing.JButton jCopyBBCodeToClipboardButton;
    private javax.swing.JButton jCopyUnformattedToClipboardButton;
    private javax.swing.JButton jDrawMarkedButton;
    private javax.swing.JButton jMarkAllButton;
    private javax.swing.JButton jMarkFilteredButton;
    private javax.swing.JButton jRemoveAttackButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jSendAttackButton;
    // End of variables declaration//GEN-END:variables
}
