/*
 * DSWorkbenchAttackFrame.java
 *
 * Created on 28. September 2008, 14:58
 */
package de.tor.tribes.ui;

import de.tor.tribes.io.UnitHolder;
import de.tor.tribes.types.Attack;
import de.tor.tribes.types.Tribe;
import de.tor.tribes.types.Village;
import de.tor.tribes.ui.models.AttackManagerTableModel;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import de.tor.tribes.util.BrowserCommandSender;
import de.tor.tribes.util.Constants;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.attack.AttackManager;
import java.util.List;
import de.tor.tribes.util.attack.AttackManagerListener;
import de.tor.tribes.ui.editors.DateSpinEditor;
import de.tor.tribes.ui.editors.UnitCellEditor;
import de.tor.tribes.ui.editors.VillageCellEditor;
import de.tor.tribes.ui.renderer.DateCellRenderer;
import de.tor.tribes.util.DSCalculator;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;

/**
 *
 * @author  Charon
 */
public class DSWorkbenchAttackFrame extends AbstractDSWorkbenchFrame implements AttackManagerListener {

    private static Logger logger = Logger.getLogger(DSWorkbenchAttackFrame.class);
    private static DSWorkbenchAttackFrame SINGLETON = null;
    private List<DefaultTableCellRenderer> renderers = new LinkedList<DefaultTableCellRenderer>();

    public static synchronized DSWorkbenchAttackFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new DSWorkbenchAttackFrame();
        }
        return SINGLETON;
    }

    /** Creates new form DSWorkbenchAttackFrame */
    DSWorkbenchAttackFrame() {
        initComponents();
        getContentPane().setBackground(Constants.DS_BACK);

        try {
            jAttackFrameAlwaysOnTop.setSelected(Boolean.parseBoolean(GlobalOptions.getProperty("attack.frame.alwaysOnTop")));
            setAlwaysOnTop(jAttackFrameAlwaysOnTop.isSelected());
        } catch (Exception e) {
            //setting not available
        }

        //color scrollpanes of selection dialog
        jScrollPane1.getViewport().setBackground(Constants.DS_BACK_LIGHT);
        jScrollPane2.getViewport().setBackground(Constants.DS_BACK_LIGHT);
        jScrollPane3.getViewport().setBackground(Constants.DS_BACK_LIGHT);
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>();
        jAttackTable.setRowSorter(sorter);
        jAttackTable.setColumnSelectionAllowed(false);
        jAttackTable.getTableHeader().setReorderingAllowed(false);
        sorter.setModel(AttackManagerTableModel.getSingleton());
        jAttackTable.setModel(AttackManagerTableModel.getSingleton());

        //instantiate the column renderers
        for (int i = 0; i < jAttackTable.getColumnCount(); i++) {
            DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer() {

                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = new DefaultTableCellRenderer().getTableCellRendererComponent(table, value, hasFocus, hasFocus, row, row);
                    c.setBackground(Constants.DS_BACK);
                    DefaultTableCellRenderer r = ((DefaultTableCellRenderer) c);
                    r.setText("<html><b>" + r.getText() + "</b></html>");
                    return c;
                }
            };
            jAttackTable.getColumn(jAttackTable.getColumnName(i)).setHeaderRenderer(headerRenderer);
            renderers.add(headerRenderer);
        }

        jSelectionFilterDialog.pack();
        jTimeChangeDialog.pack();
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSelectionFilterDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSourceTribeBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSourceVillageTable = new javax.swing.JTable();
        jAllSourceVillageButton = new javax.swing.JButton();
        jNoSourceVillageButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTargetTribeBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTargetVillageTable = new javax.swing.JTable();
        jAllTargetVillageButton = new javax.swing.JButton();
        jNoTargetVillageButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTimeChangeDialog = new javax.swing.JDialog();
        jMinuteField = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jOKButton = new javax.swing.JButton();
        jCancelButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jHourField = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jDayField = new javax.swing.JSpinner();
        jAttackPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jAttackTable = new javax.swing.JTable();
        jRemoveAttackButton = new javax.swing.JButton();
        jCheckAttacksButton = new javax.swing.JButton();
        jSendAttackButton = new javax.swing.JButton();
        jMarkFilteredButton = new javax.swing.JButton();
        jCopyUnformattedToClipboardButton = new javax.swing.JButton();
        jCopyBBCodeToClipboardButton = new javax.swing.JButton();
        jChangeArrivalButton = new javax.swing.JButton();
        jMarkAllButton = new javax.swing.JButton();
        jDrawMarkedButton = new javax.swing.JButton();
        jFlipMarkButton = new javax.swing.JButton();
        jNotDrawMarkedButton = new javax.swing.JButton();
        jAttackFrameAlwaysOnTop = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/tor/tribes/ui/Bundle"); // NOI18N
        jSelectionFilterDialog.setTitle(bundle.getString("DSWorkbenchAttackFrame.jSelectionFilterDialog.title")); // NOI18N
        jSelectionFilterDialog.setAlwaysOnTop(true);
        jSelectionFilterDialog.setModal(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("DSWorkbenchAttackFrame.jPanel1.border.title"))); // NOI18N

        jLabel1.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel1.text")); // NOI18N

        jLabel2.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel2.text")); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(32, 14));

        jSourceTribeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireSourcePlayerChangedEvent(evt);
            }
        });

        jSourceVillageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dorf", "Ausw√§hlen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jSourceVillageTable);

        jAllSourceVillageButton.setText(bundle.getString("DSWorkbenchAttackFrame.jAllSourceVillageButton.text")); // NOI18N
        jAllSourceVillageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSelectNoneAllEvent(evt);
            }
        });

        jNoSourceVillageButton.setText(bundle.getString("DSWorkbenchAttackFrame.jNoSourceVillageButton.text")); // NOI18N
        jNoSourceVillageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSelectNoneAllEvent(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(jSourceTribeBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 375, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jNoSourceVillageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAllSourceVillageButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSourceTribeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAllSourceVillageButton)
                            .addComponent(jNoSourceVillageButton)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("DSWorkbenchAttackFrame.jPanel2.border.title"))); // NOI18N

        jLabel3.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel3.text")); // NOI18N

        jTargetTribeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireTargetPlayerChangedEvent(evt);
            }
        });

        jLabel4.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel4.text")); // NOI18N

        jTargetVillageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dorf", "Ausw√§hlen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTargetVillageTable);

        jAllTargetVillageButton.setText(bundle.getString("DSWorkbenchAttackFrame.jAllTargetVillageButton.text")); // NOI18N
        jAllTargetVillageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSelectNoneAllEvent(evt);
            }
        });

        jNoTargetVillageButton.setText(bundle.getString("DSWorkbenchAttackFrame.jNoTargetVillageButton.text")); // NOI18N
        jNoTargetVillageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSelectNoneAllEvent(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(jTargetTribeBox, 0, 375, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jNoTargetVillageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jAllTargetVillageButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTargetTribeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAllTargetVillageButton)
                            .addComponent(jNoTargetVillageButton)))
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText(bundle.getString("DSWorkbenchAttackFrame.jButton1.text_1")); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireMarkFilterEvent(evt);
            }
        });

        jButton2.setText(bundle.getString("DSWorkbenchAttackFrame.jButton2.text_1")); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCancelFilterEvent(evt);
            }
        });

        javax.swing.GroupLayout jSelectionFilterDialogLayout = new javax.swing.GroupLayout(jSelectionFilterDialog.getContentPane());
        jSelectionFilterDialog.getContentPane().setLayout(jSelectionFilterDialogLayout);
        jSelectionFilterDialogLayout.setHorizontalGroup(
            jSelectionFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jSelectionFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSelectionFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jSelectionFilterDialogLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jSelectionFilterDialogLayout.setVerticalGroup(
            jSelectionFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jSelectionFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jSelectionFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMinuteField.setModel(new javax.swing.SpinnerNumberModel(0, -59, 59, 1));

        jLabel5.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel5.text")); // NOI18N

        jOKButton.setText(bundle.getString("DSWorkbenchAttackFrame.jOKButton.text")); // NOI18N
        jOKButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCloseTimeChangeDialogEvent(evt);
            }
        });

        jCancelButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCancelButton.text")); // NOI18N
        jCancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCloseTimeChangeDialogEvent(evt);
            }
        });

        jLabel6.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel6.text")); // NOI18N

        jHourField.setModel(new javax.swing.SpinnerNumberModel(0, -59, 59, 1));

        jLabel7.setText(bundle.getString("DSWorkbenchAttackFrame.jLabel7.text")); // NOI18N

        jDayField.setModel(new javax.swing.SpinnerNumberModel(0, -31, 31, 1));

        javax.swing.GroupLayout jTimeChangeDialogLayout = new javax.swing.GroupLayout(jTimeChangeDialog.getContentPane());
        jTimeChangeDialog.getContentPane().setLayout(jTimeChangeDialogLayout);
        jTimeChangeDialogLayout.setHorizontalGroup(
            jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jTimeChangeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jTimeChangeDialogLayout.createSequentialGroup()
                        .addComponent(jCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jOKButton))
                    .addComponent(jDayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jTimeChangeDialogLayout.createSequentialGroup()
                        .addComponent(jMinuteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jHourField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jTimeChangeDialogLayout.setVerticalGroup(
            jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTimeChangeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMinuteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jHourField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jTimeChangeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOKButton)
                    .addComponent(jCancelButton))
                .addContainerGap())
        );

        setTitle(bundle.getString("DSWorkbenchAttackFrame.title")); // NOI18N

        jAttackPanel.setBackground(new java.awt.Color(239, 235, 223));
        jAttackPanel.setMaximumSize(new java.awt.Dimension(750, 377));
        jAttackPanel.setMinimumSize(new java.awt.Dimension(750, 377));
        jAttackPanel.setRequestFocusEnabled(false);

        jAttackTable.setBackground(new java.awt.Color(236, 233, 216));
        jAttackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jAttackTable.setOpaque(false);
        jAttackTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(jAttackTable);

        jRemoveAttackButton.setBackground(new java.awt.Color(239, 235, 223));
        jRemoveAttackButton.setText(bundle.getString("DSWorkbenchAttackFrame.jRemoveAttackButton.text")); // NOI18N
        jRemoveAttackButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jRemoveAttackButton.toolTipText")); // NOI18N
        jRemoveAttackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireRemoveAttackEvent(evt);
            }
        });

        jCheckAttacksButton.setBackground(new java.awt.Color(239, 235, 223));
        jCheckAttacksButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCheckAttacksButton.text")); // NOI18N
        jCheckAttacksButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jCheckAttacksButton.toolTipText")); // NOI18N
        jCheckAttacksButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireValidateAttacksEvent(evt);
            }
        });

        jSendAttackButton.setBackground(new java.awt.Color(239, 235, 223));
        jSendAttackButton.setText(bundle.getString("DSWorkbenchAttackFrame.jSendAttackButton.text")); // NOI18N
        jSendAttackButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jSendAttackButton.toolTipText")); // NOI18N
        jSendAttackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSendAttackEvent(evt);
            }
        });

        jMarkFilteredButton.setBackground(new java.awt.Color(239, 235, 223));
        jMarkFilteredButton.setText(bundle.getString("DSWorkbenchAttackFrame.jMarkAllButton.text")); // NOI18N
        jMarkFilteredButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jMarkAllButton.toolTipText")); // NOI18N
        jMarkFilteredButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireSelectFilteredEvent(evt);
            }
        });

        jCopyUnformattedToClipboardButton.setBackground(new java.awt.Color(239, 235, 223));
        jCopyUnformattedToClipboardButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCopyUnformattedToClipboardButton.text")); // NOI18N
        jCopyUnformattedToClipboardButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jCopyUnformattedToClipboardButton.toolTipText")); // NOI18N
        jCopyUnformattedToClipboardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCopyUnformattedToClipboardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCopyUnformatedToClipboardEvent(evt);
            }
        });

        jCopyBBCodeToClipboardButton.setBackground(new java.awt.Color(239, 235, 223));
        jCopyBBCodeToClipboardButton.setText(bundle.getString("DSWorkbenchAttackFrame.jCopyBBCodeToClipboardButton.text")); // NOI18N
        jCopyBBCodeToClipboardButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jCopyBBCodeToClipboardButton.toolTipText")); // NOI18N
        jCopyBBCodeToClipboardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCopyBBCodeToClipboardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCopyAsBBCodeToClipboardEvent(evt);
            }
        });

        jChangeArrivalButton.setBackground(new java.awt.Color(239, 235, 223));
        jChangeArrivalButton.setText(bundle.getString("DSWorkbenchAttackFrame.jChangeArrivalButton.text")); // NOI18N
        jChangeArrivalButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jChangeArrivalButton.toolTipText")); // NOI18N
        jChangeArrivalButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTimesEvent(evt);
            }
        });

        jMarkAllButton.setBackground(new java.awt.Color(239, 235, 223));
        jMarkAllButton.setText(bundle.getString("DSWorkbenchAttackFrame.jButton1.text")); // NOI18N
        jMarkAllButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jButton1.toolTipText")); // NOI18N
        jMarkAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireMarkAllEvent(evt);
            }
        });

        jDrawMarkedButton.setBackground(new java.awt.Color(239, 235, 223));
        jDrawMarkedButton.setText(bundle.getString("DSWorkbenchAttackFrame.jButton2.text")); // NOI18N
        jDrawMarkedButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jDrawMarkedButton.toolTipText")); // NOI18N
        jDrawMarkedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireDrawSelectedEvent(evt);
            }
        });

        jFlipMarkButton.setBackground(new java.awt.Color(239, 235, 223));
        jFlipMarkButton.setText(bundle.getString("DSWorkbenchAttackFrame.jFlipMarkButton.text")); // NOI18N
        jFlipMarkButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jFlipMarkButton.toolTipText")); // NOI18N
        jFlipMarkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireFlipMarkEvent(evt);
            }
        });

        jNotDrawMarkedButton.setBackground(new java.awt.Color(239, 235, 223));
        jNotDrawMarkedButton.setText(bundle.getString("DSWorkbenchAttackFrame.jNotDrawMarkedButton.text")); // NOI18N
        jNotDrawMarkedButton.setToolTipText(bundle.getString("DSWorkbenchAttackFrame.jNotDrawMarkedButton.toolTipText")); // NOI18N
        jNotDrawMarkedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireDrawSelectedEvent(evt);
            }
        });

        javax.swing.GroupLayout jAttackPanelLayout = new javax.swing.GroupLayout(jAttackPanel);
        jAttackPanel.setLayout(jAttackPanelLayout);
        jAttackPanelLayout.setHorizontalGroup(
            jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jAttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jNotDrawMarkedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckAttacksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemoveAttackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSendAttackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMarkAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMarkFilteredButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jFlipMarkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDrawMarkedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jChangeArrivalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCopyUnformattedToClipboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCopyBBCodeToClipboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jAttackPanelLayout.setVerticalGroup(
            jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addGroup(jAttackPanelLayout.createSequentialGroup()
                        .addComponent(jCheckAttacksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemoveAttackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSendAttackButton)
                        .addGap(30, 30, 30)
                        .addComponent(jMarkAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMarkFilteredButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFlipMarkButton)
                        .addGap(30, 30, 30)
                        .addComponent(jChangeArrivalButton)
                        .addGap(30, 30, 30)
                        .addComponent(jDrawMarkedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNotDrawMarkedButton)
                        .addGap(30, 30, 30)
                        .addComponent(jCopyUnformattedToClipboardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCopyBBCodeToClipboardButton)))
                .addContainerGap())
        );

        jAttackFrameAlwaysOnTop.setText(bundle.getString("DSWorkbenchAttackFrame.jAttackFrameAlwaysOnTop.text")); // NOI18N
        jAttackFrameAlwaysOnTop.setOpaque(false);
        jAttackFrameAlwaysOnTop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fireAttackFrameOnTopEvent(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jAttackFrameAlwaysOnTop)
                    .addComponent(jAttackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 691, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jAttackPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAttackFrameAlwaysOnTop, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void fireRemoveAttackEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireRemoveAttackEvent
    int[] rows = jAttackTable.getSelectedRows();
    if (rows.length == 0) {
        return;
    }

    String message = ((rows.length == 1) ? "Angriff " : (rows.length + " Angriffe ")) + "wirklich l√∂schen?";
    int res = JOptionPane.showConfirmDialog(this, message, "Angriff entfernen", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (res != JOptionPane.YES_OPTION) {
        return;
    }

    jAttackTable.editingCanceled(new ChangeEvent(this));

    for (int r = rows.length - 1; r >= 0; r--) {
        jAttackTable.invalidate();
        int row = jAttackTable.convertRowIndexToModel(rows[r]);
        AttackManagerTableModel.getSingleton().removeRow(row);
        jAttackTable.revalidate();
    }
    jAttackTable.updateUI();
}//GEN-LAST:event_fireRemoveAttackEvent

private void fireValidateAttacksEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireValidateAttacksEvent
    DefaultTableModel model = (DefaultTableModel) jAttackTable.getModel();

    Hashtable<Integer, String> errors = new Hashtable<Integer, String>();
    for (int i = 0; i < model.getRowCount(); i++) {
        Date sendTime = (Date) model.getValueAt(i, 3);
        Date arriveTime = (Date) model.getValueAt(i, 4);
        if (arriveTime.getTime() < System.currentTimeMillis()) {
            errors.put(i, "Ankunftszeit liegt in der Vergangenheit");
        } else if (sendTime.getTime() < System.currentTimeMillis()) {
            errors.put(i, "Abschickzeit liegt in der Vergangenheit");
        }
    }

    if (errors.size() != 0) {
        String message = "";
        Enumeration<Integer> keys = errors.keys();
        ListSelectionModel sModel = jAttackTable.getSelectionModel();
        sModel.removeSelectionInterval(0, jAttackTable.getRowCount());
        while (keys.hasMoreElements()) {
            int row = keys.nextElement();
            String error = errors.get(row);
            message = "Zeile " + (row + 1) + ": " + error + "\n" + message;
            sModel.addSelectionInterval(row, row);
        }
        JOptionPane.showMessageDialog(this, message, "Fehler", JOptionPane.WARNING_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Keine Fehler gefunden", "Information", JOptionPane.INFORMATION_MESSAGE);
    }
}//GEN-LAST:event_fireValidateAttacksEvent

private void fireSendAttackEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireSendAttackEvent
    int selectedRow = jAttackTable.getSelectedRow();
    if (selectedRow < 0) {
        return;
    }
    selectedRow = jAttackTable.convertRowIndexToModel(selectedRow);
    Village source = (Village) AttackManagerTableModel.getSingleton().getValueAt(selectedRow, 0);
    Village target = (Village) AttackManagerTableModel.getSingleton().getValueAt(selectedRow, 1);
    BrowserCommandSender.sendTroops(source, target);
}//GEN-LAST:event_fireSendAttackEvent

private void fireAttackFrameOnTopEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fireAttackFrameOnTopEvent
    setAlwaysOnTop(!isAlwaysOnTop());
}//GEN-LAST:event_fireAttackFrameOnTopEvent

private void fireMarkAllEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireMarkAllEvent
    int[] rows = jAttackTable.getSelectedRows();
    if ((rows == null) || (rows.length == 0)) {
        jAttackTable.getSelectionModel().setSelectionInterval(0, jAttackTable.getRowCount() - 1);
    } else {
        jAttackTable.getSelectionModel().removeSelectionInterval(0, jAttackTable.getRowCount() - 1);
    }
}//GEN-LAST:event_fireMarkAllEvent

private void fireDrawSelectedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireDrawSelectedEvent

    boolean draw = (evt.getSource() == jDrawMarkedButton);

    int[] rows = jAttackTable.getSelectedRows();
    if ((rows != null) && (rows.length > 0)) {
        for (int r : rows) {
            jAttackTable.invalidate();
            int row = jAttackTable.convertRowIndexToModel(r);
            AttackManagerTableModel.getSingleton().setValueAt(new Boolean(draw), row, 5);
            jAttackTable.revalidate();
        }
    }
    jAttackTable.updateUI();
}//GEN-LAST:event_fireDrawSelectedEvent

private void fireCopyUnformatedToClipboardEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCopyUnformatedToClipboardEvent
    try {
        int[] rows = jAttackTable.getSelectedRows();
        if ((rows != null) && (rows.length > 0)) {
            String data = "";
            List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
            for (int i : rows) {
                jAttackTable.invalidate();
                int row = jAttackTable.convertRowIndexToModel(i);
                Village sVillage = attacks.get(row).getSource();
                Village tVillage = attacks.get(row).getTarget();
                UnitHolder sUnit = attacks.get(row).getUnit();
                Date aTime = attacks.get(row).getArriveTime();
                Date sTime = new Date(aTime.getTime() - (long) (DSCalculator.calculateMoveTimeInSeconds(sVillage, tVillage, sUnit.getSpeed()) * 1000));

                String sendtime = Constants.DATE_FORMAT.format(sTime);
                String arrivetime = Constants.DATE_FORMAT.format(aTime);
                data += sVillage.getTribe() + "\t" + sVillage + "\t" + sUnit + "\t" + tVillage.getTribe() + "\t" + tVillage + "\t" + sendtime + "\t" + arrivetime + "\n";
                jAttackTable.revalidate();
            }

            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(data), null);
            String result = "Daten in Zwischenablage kopiert.";
            JOptionPane.showMessageDialog(this, result, "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
        }
    } catch (Exception e) {
        logger.error("Failed to copy data to clipboard", e);
        String result = "Fehler beim Kopieren in die Zwischenablage.";
        JOptionPane.showMessageDialog(this, result, "Fehler", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_fireCopyUnformatedToClipboardEvent

private void fireCopyAsBBCodeToClipboardEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCopyAsBBCodeToClipboardEvent
    try {
        int[] rows = jAttackTable.getSelectedRows();
        if ((rows != null) && (rows.length > 0)) {
            String data = "";
            List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
            for (int i : rows) {
                jAttackTable.invalidate();
                int row = jAttackTable.convertRowIndexToModel(i);
                Village sVillage = attacks.get(row).getSource();
                Village tVillage = attacks.get(row).getTarget();
                UnitHolder sUnit = attacks.get(row).getUnit();
                Date aTime = attacks.get(row).getArriveTime();
                Date sTime = new Date(aTime.getTime() - (long) (DSCalculator.calculateMoveTimeInSeconds(sVillage, tVillage, sUnit.getSpeed()) * 1000));
                String sendtime = Constants.DATE_FORMAT.format(sTime);
                String arrivetime = Constants.DATE_FORMAT.format(aTime);
                data = "Angriff von ";
                if (sVillage.getTribe() != null) {
                    data += sVillage.getTribe().toBBCode() + " aus ";
                } else {
                    data = " Barbaren aus ";
                }

                data += sVillage.toBBCode() + " mit " + sUnit + " auf ";

                if (tVillage.getTribe() != null) {
                    data += tVillage.getTribe().toBBCode() + " in ";
                } else {
                    data = " Barbaren in ";
                }

                data += tVillage.toBBCode() + " startet um " + sendtime + " und kommt um " + arrivetime + " an\n";
                jAttackTable.revalidate();
            }

            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(data), null);
            String result = "Daten in Zwischenablage kopiert.";
            JOptionPane.showMessageDialog(this, result, "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (Exception e) {
        logger.error("Failed to copy data to clipboard", e);
        String result = "Fehler beim Kopieren in die Zwischenablage.";
        JOptionPane.showMessageDialog(this, result, "Fehler", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_fireCopyAsBBCodeToClipboardEvent

private void fireMarkFilterEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireMarkFilterEvent

    //get selected source villages
    List<Village> source = new LinkedList<Village>();
    for (int i = 0; i < jSourceVillageTable.getRowCount(); i++) {
        Village v = (Village) jSourceVillageTable.getValueAt(i, 0);
        Boolean b = (Boolean) jSourceVillageTable.getValueAt(i, 1);
        if (b.booleanValue()) {
            source.add(v);
        }
    }
    //get selected target villages
    List<Village> target = new LinkedList<Village>();
    for (int i = 0; i < jTargetVillageTable.getRowCount(); i++) {
        Village v = (Village) jTargetVillageTable.getValueAt(i, 0);
        Boolean b = (Boolean) jTargetVillageTable.getValueAt(i, 1);
        if (b.booleanValue()) {
            target.add(v);
        }
    }

    //get the line numbers of attacks which should be selected
    List<Integer> selection = new LinkedList<Integer>();
    int cnt = 0;
    for (Attack a : AttackManager.getSingleton().getAttackPlan(null)) {
        int row = jAttackTable.convertRowIndexToView(cnt);
        if (source.contains(a.getSource())) {
            if (!selection.contains(new Integer(row))) {
                selection.add(new Integer(row));
            }
        }
        if (target.contains(a.getTarget())) {
            if (!selection.contains(new Integer(row))) {
                selection.add(new Integer(row));
            }
        }
        cnt++;
    }
    //remove current selection
    jAttackTable.getSelectionModel().removeIndexInterval(0, jAttackTable.getRowCount() - 1);
    jAttackTable.getSelectionModel().setValueIsAdjusting(true);
    for (Integer i : selection) {
        jAttackTable.getSelectionModel().addSelectionInterval(i, i);
    }
    jAttackTable.getSelectionModel().setValueIsAdjusting(false);

    jSelectionFilterDialog.setVisible(false);
}//GEN-LAST:event_fireMarkFilterEvent

private void fireCancelFilterEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCancelFilterEvent
    jSelectionFilterDialog.setVisible(false);
}//GEN-LAST:event_fireCancelFilterEvent

private void fireSourcePlayerChangedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireSourcePlayerChangedEvent
    try {
        Tribe source = (Tribe) jSourceTribeBox.getSelectedItem();
        List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
        Hashtable<Village, Boolean> villageMarks = new Hashtable<Village, Boolean>();
        //check attacks for the selected player
        int cnt = 0;

        jSourceVillageTable.invalidate();
        for (Attack a : attacks) {
            int row = jAttackTable.convertRowIndexToView(cnt);
            Village v = a.getSource();
            if ((v != null) && (v.getTribe() == source)) {
                if (jAttackTable.getSelectionModel().isSelectedIndex(row)) {
                    //village is selected in the attack table, so select it here too
                    villageMarks.put(v, Boolean.TRUE);
                } else {
                    villageMarks.put(v, Boolean.FALSE);
                }
            }
            cnt++;
            //create model with player villages in attack plan
            setTableModel(jSourceVillageTable, villageMarks);
            jSourceVillageTable.revalidate();
            jSourceVillageTable.updateUI();
        }
    } catch (Exception e) {
        //"please select" selected    
        setTableModel(jSourceVillageTable, new Hashtable<Village, Boolean>());
    }
}//GEN-LAST:event_fireSourcePlayerChangedEvent

private void fireTargetPlayerChangedEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireTargetPlayerChangedEvent
    try {
        Tribe target = (Tribe) jTargetTribeBox.getSelectedItem();
        List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
        Hashtable<Village, Boolean> villageMarks = new Hashtable<Village, Boolean>();
        //check attacks for the selected player
        int cnt = 0;

        jTargetVillageTable.invalidate();
        for (Attack a : attacks) {
            int row = jAttackTable.convertRowIndexToView(cnt);
            Village v = a.getTarget();
            if ((v != null) && (v.getTribe() == target)) {
                if (jAttackTable.getSelectionModel().isSelectedIndex(row)) {
                    //village is selected in the attack table, so select it here too
                    villageMarks.put(v, Boolean.TRUE);
                } else {
                    villageMarks.put(v, Boolean.FALSE);
                }
            }
            cnt++;
        }

        //create model with player villages in attack plan
        setTableModel(jTargetVillageTable, villageMarks);
        jTargetVillageTable.revalidate();
        jTargetVillageTable.updateUI();
    } catch (Exception e) {
        //"please select" selected    
        setTableModel(jTargetVillageTable, new Hashtable<Village, Boolean>());
    }
}//GEN-LAST:event_fireTargetPlayerChangedEvent

private void fireSelectFilteredEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireSelectFilteredEvent
    List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
    List<Tribe> sourceTribes = new LinkedList<Tribe>();
    List<Tribe> targetTribes = new LinkedList<Tribe>();
    //search attacks for source and target tribes
    for (Attack a : attacks) {
        Tribe s = a.getSource().getTribe();
        if (!sourceTribes.contains(s)) {
            sourceTribes.add(s);
        }

        Tribe t = a.getTarget().getTribe();
        if (!targetTribes.contains(t)) {
            targetTribes.add(t);
        }

    }
    //build source and target selection and select default value
    DefaultComboBoxModel sModel = new DefaultComboBoxModel(sourceTribes.toArray(new Tribe[]{}));
    sModel.insertElementAt("Bitte w√§hlen", 0);
    jSourceTribeBox.setModel(sModel);
    sModel.setSelectedItem("Bitte w√§hlen");
    DefaultComboBoxModel tModel = new DefaultComboBoxModel(targetTribes.toArray(new Tribe[]{}));
    tModel.insertElementAt("Bitte w√§hlen", 0);
    jTargetTribeBox.setModel(tModel);
    tModel.setSelectedItem("Bitte w√§hlen");
    //initialize tables and scroll panes
    setTableModel(jSourceVillageTable, new Hashtable<Village, Boolean>());
    setTableModel(jTargetVillageTable, new Hashtable<Village, Boolean>());

    jSelectionFilterDialog.setVisible(true);
}//GEN-LAST:event_fireSelectFilteredEvent

private void fireFlipMarkEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireFlipMarkEvent

    int rows[] = jAttackTable.getSelectedRows();
    List<Integer> selected = new LinkedList<Integer>();
    //add currently selected rows to a list
    for (int row : rows) {
        selected.add(new Integer(row));
    }

    int cnt = jAttackTable.getRowCount();
    //look for all rows wether the index is selected or not.
    //selected indices are removed from the existing list, unselected are added
    for (int i = 0; i < cnt; i++) {
        int row = jAttackTable.convertRowIndexToModel(i);
        Integer iV = new Integer(row);
        if (selected.contains(iV)) {
            selected.remove(iV);
        } else {
            selected.add(iV);
        }
    }

    //assign the values of the selected list to the table
    jAttackTable.getSelectionModel().setValueIsAdjusting(true);
    for (int i = 0; i < cnt; i++) {
        Integer iV = new Integer(i);
        if (selected.contains(iV)) {
            jAttackTable.getSelectionModel().addSelectionInterval(i, i);
        } else {
            jAttackTable.getSelectionModel().removeSelectionInterval(i, i);
        }

    }
    jAttackTable.getSelectionModel().setValueIsAdjusting(false);
}//GEN-LAST:event_fireFlipMarkEvent

private void fireSelectNoneAllEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireSelectNoneAllEvent
    if (evt.getSource() == jAllSourceVillageButton) {
        if (jSourceVillageTable.getRowCount() > 0) {
            //update source table values that all villages are selected
            jSourceVillageTable.invalidate();
            for (int i = 0; i < jSourceVillageTable.getRowCount(); i++) {
                jSourceVillageTable.getModel().setValueAt(Boolean.TRUE, i, 1);
            }
            jSourceVillageTable.revalidate();
            jSourceVillageTable.updateUI();
        }
    } else if (evt.getSource() == jNoSourceVillageButton) {
        //update source table values that all villages are unselected
        jSourceVillageTable.invalidate();
        for (int i = 0; i < jSourceVillageTable.getRowCount(); i++) {
            jSourceVillageTable.getModel().setValueAt(Boolean.FALSE, i, 1);
        }
        jSourceVillageTable.revalidate();
        jSourceVillageTable.updateUI();
    } else if (evt.getSource() == jAllTargetVillageButton) {
        //update target table values that all villages are selected
        if (jTargetVillageTable.getRowCount() > 0) {
            jTargetVillageTable.invalidate();
            for (int i = 0; i < jTargetVillageTable.getRowCount(); i++) {
                jTargetVillageTable.getModel().setValueAt(Boolean.TRUE, i, 1);
            }
            jTargetVillageTable.revalidate();
            jTargetVillageTable.updateUI();
        }
    } else if (evt.getSource() == jNoTargetVillageButton) {
        //update target table values that all villages are unselected
        jTargetVillageTable.invalidate();
        for (int i = 0; i < jTargetVillageTable.getRowCount(); i++) {
            jTargetVillageTable.getModel().setValueAt(Boolean.FALSE, i, 1);
        }
        jTargetVillageTable.revalidate();
        jTargetVillageTable.updateUI();
    }
}//GEN-LAST:event_fireSelectNoneAllEvent

private void fireCloseTimeChangeDialogEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCloseTimeChangeDialogEvent
    if (evt.getSource() == jOKButton) {
        int[] rows = jAttackTable.getSelectedRows();
        if ((rows != null) || (rows.length > 0)) {
            Integer min = (Integer) jMinuteField.getValue();
            Integer hour = (Integer) jHourField.getValue();
            Integer day = (Integer) jDayField.getValue();
            List<Attack> attacks = AttackManager.getSingleton().getAttackPlan(null);
            jAttackTable.invalidate();
            for (int i : rows) {
                int row = jAttackTable.convertRowIndexToModel(i);
                long arrive = attacks.get(row).getArriveTime().getTime();
                long diff = min * 60000 + hour * 3600000 + day * 86400000;
                //later if first index is selected
                //if later, add diff to arrival, else remove diff from arrival
                arrive += diff;
                AttackManager.getSingleton().getAttackPlan(null).get(row).setArriveTime(new Date(arrive));
            }
            jAttackTable.revalidate();
            jAttackTable.updateUI();
        }
    }

    jTimeChangeDialog.setVisible(false);
}//GEN-LAST:event_fireCloseTimeChangeDialogEvent

private void fireChangeTimesEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireChangeTimesEvent
    int[] rows = jAttackTable.getSelectedRows();
    if ((rows == null) || (rows.length <= 0)) {
        JOptionPane.showMessageDialog(this, "Keine Angriffe markiert", "Information", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    jTimeChangeDialog.setVisible(true);
}//GEN-LAST:event_fireChangeTimesEvent

    /**Set table model for filteres selection*/
    private void setTableModel(JTable pTable, Hashtable<Village, Boolean> pVillages) {
        //create default table model
        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Dorf", "Markieren"
                }) {

            Class[] types = new Class[]{
                Village.class, Boolean.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                if (col == 1) {
                    return true;
                }
                return false;
            }
        };

        //walk villages for row values
        if (pVillages.size() != 0) {
            Enumeration<Village> villages = pVillages.keys();
            while (villages.hasMoreElements()) {
                Village v = villages.nextElement();
                model.addRow(new Object[]{v, pVillages.get(v)});
            }
        }

        //set model and header renders
        pTable.setModel(model);

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = new DefaultTableCellRenderer().getTableCellRendererComponent(table, value, hasFocus, hasFocus, row, row);
                c.setBackground(Constants.DS_BACK);
                DefaultTableCellRenderer r = ((DefaultTableCellRenderer) c);
                r.setText("<html><b>" + r.getText() + "</b></html>");
                return c;
            }
        };

        for (int i = 0; i < pTable.getColumnCount(); i++) {
            pTable.getColumn(pTable.getColumnName(i)).setHeaderRenderer(headerRenderer);
        }

        //set max width
        pTable.getColumnModel().getColumn(1).setMaxWidth(75);
        //set sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);

        pTable.setRowSorter(sorter);
    }

    protected void setupAttackPanel() {
        AttackManager.getSingleton().addAttackManagerListener(this);
        //setup renderer and general view
        jAttackTable.setDefaultRenderer(Date.class, new DateCellRenderer());
        jAttackTable.setDefaultEditor(Date.class, new DateSpinEditor());
        jAttackTable.setDefaultEditor(UnitHolder.class, new UnitCellEditor());
        jAttackTable.setDefaultEditor(Village.class, new VillageCellEditor());

        AttackManager.getSingleton().attacksUpdatedExternally(null);
    }

    @Override
    public void fireAttacksChangedEvent(String pPlan) {
        try {
            jAttackTable.invalidate();

            for (int i = 0; i < jAttackTable.getColumnCount(); i++) {
                jAttackTable.getColumn(jAttackTable.getColumnName(i)).setHeaderRenderer(renderers.get(i));
            }
            jAttackTable.revalidate();
            jAttackTable.updateUI();
        } catch (Exception e) {
            logger.error("Failed to update attacks table", e);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAllSourceVillageButton;
    private javax.swing.JButton jAllTargetVillageButton;
    private javax.swing.JCheckBox jAttackFrameAlwaysOnTop;
    private javax.swing.JPanel jAttackPanel;
    private javax.swing.JTable jAttackTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jCancelButton;
    private javax.swing.JButton jChangeArrivalButton;
    private javax.swing.JButton jCheckAttacksButton;
    private javax.swing.JButton jCopyBBCodeToClipboardButton;
    private javax.swing.JButton jCopyUnformattedToClipboardButton;
    private javax.swing.JSpinner jDayField;
    private javax.swing.JButton jDrawMarkedButton;
    private javax.swing.JButton jFlipMarkButton;
    private javax.swing.JSpinner jHourField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton jMarkAllButton;
    private javax.swing.JButton jMarkFilteredButton;
    private javax.swing.JSpinner jMinuteField;
    private javax.swing.JButton jNoSourceVillageButton;
    private javax.swing.JButton jNoTargetVillageButton;
    private javax.swing.JButton jNotDrawMarkedButton;
    private javax.swing.JButton jOKButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jRemoveAttackButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JDialog jSelectionFilterDialog;
    private javax.swing.JButton jSendAttackButton;
    private javax.swing.JComboBox jSourceTribeBox;
    private javax.swing.JTable jSourceVillageTable;
    private javax.swing.JComboBox jTargetTribeBox;
    private javax.swing.JTable jTargetVillageTable;
    private javax.swing.JDialog jTimeChangeDialog;
    // End of variables declaration//GEN-END:variables
    }
