/*
 * MinimapZoomFrame.java
 *
 * Created on 10. Juni 2008, 19:51
 */
package de.tor.tribes.ui;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

/**
 *
 * @author  Charon
 */
public class MinimapZoomFrame extends javax.swing.JFrame {

    protected BufferedImage mMap = null;
    private DrawThread mDrawThread;
    private BufferedImage mBorder = null;

    /** Creates new form MinimapZoomFrame */
    public MinimapZoomFrame(BufferedImage pMap) {
        initComponents();
        mMap = pMap;
        mDrawThread = new DrawThread(this);
        mDrawThread.setDaemon(true);
        mDrawThread.start();
        try {
            mBorder = ImageIO.read(new File("border.png"));
        } catch (Exception e) {
        }
    }

    public void update(BufferedImage bImage, int dx, int dy) {
        if (isVisible()) {
            BufferStrategy bs = getBufferStrategy();
            if (bs != null) {
                Graphics2D g2d = (Graphics2D) bs.getDrawGraphics();
                g2d.setColor(new Color(35, 125, 0));
                g2d.fillRect(0, 0, getWidth(), getHeight());

                g2d.drawImage(bImage, null, dx, dy);
                if (mBorder != null) {
                    g2d.drawImage(mBorder, null, 0, 0);
                }
                g2d.dispose();
                bs.show();
            }
        }
    }

    public void updatePosition(int pXPos, int pYPos) {
        mDrawThread.updatePosition(pXPos, pYPos);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setResizable(false);
        setUndecorated(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

class DrawThread extends Thread {

    private MinimapZoomFrame mParent;
    private int centerX = 0;
    private int centerY = 0;
    private BufferedImage mBorder;
    private BufferedImage mBuffer;

    public DrawThread(MinimapZoomFrame pParent) {
        mParent = pParent;
    }

    @Override
    public void run() {
        while (true) {
            if (mParent.isVisible()) {
                int pWidth = mParent.getWidth();
                int pHeight = mParent.getHeight();
                int dx = 0;
                int dy = 0;
                int pXStart = centerX - pWidth / 2;
                int pYStart = centerY - pHeight / 2;

                if (pXStart < 0) {
                    dx = -1 * pXStart;
                    pXStart = 0;
                }
                if (pYStart < 0) {
                    dy = -1 * pYStart;
                    pYStart = 0;
                }

                if (pXStart + pWidth > mParent.mMap.getWidth()) {
                    pWidth = mParent.mMap.getWidth() - pXStart;
                }
                if (pYStart + pHeight > mParent.mMap.getHeight()) {
                    pHeight = mParent.mMap.getHeight() - pYStart;
                }
                BufferedImage part = mParent.mMap.getSubimage(pXStart, pYStart, pWidth, pHeight);

                mParent.update(part, dx, dy);
            }
            try {
                Thread.sleep(100);
            } catch (InterruptedException ie) {
            }
        }
    }

    public void updatePosition(int pXPos, int pYPos) {
        centerX = pXPos;
        centerY = pYPos;
    }
}