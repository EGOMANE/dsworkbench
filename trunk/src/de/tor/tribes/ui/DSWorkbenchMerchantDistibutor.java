/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DSWorkbenchMerchantDistibutor.java
 *
 * Created on 18.06.2010, 08:12:57
 */
package de.tor.tribes.ui;

import de.tor.tribes.io.DataHolder;
import de.tor.tribes.types.Village;
import de.tor.tribes.ui.renderer.AlternatingColorCellRenderer;
import de.tor.tribes.ui.renderer.NumberFormatCellRenderer;
import de.tor.tribes.ui.renderer.SortableTableHeaderRenderer;
import de.tor.tribes.ui.renderer.TradeDirectionCellRenderer;
import de.tor.tribes.util.JOptionPaneHelper;
import de.tor.tribes.util.algo.MerchantDistributor;
import de.tor.tribes.util.algo.MerchantSource;
import de.tor.tribes.util.parser.MerchantParser;
import de.tor.tribes.util.parser.MerchantParser.VillageMerchantInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;

/**
 *
 * @author Jejkal
 */
public class DSWorkbenchMerchantDistibutor extends AbstractDSWorkbenchFrame {

    private static Logger logger = Logger.getLogger("MerchantDistributor");
    private static DSWorkbenchMerchantDistibutor SINGLETON = null;
    private List<VillageMerchantInfo> merchantInfos = new LinkedList<VillageMerchantInfo>();

    public static synchronized DSWorkbenchMerchantDistibutor getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new DSWorkbenchMerchantDistibutor();
        }
        return SINGLETON;
    }

    public enum Direction {

        INCOMING, OUTGOING, BOTH
    }

    /** Creates new form DSWorkbenchMerchantDistibutor */
    DSWorkbenchMerchantDistibutor() {
        initComponents();
    }

    public void setup() {
        merchantInfos.clear();
        rebuildTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMerchantDataTable = new javax.swing.JTable();
        jTaskPane1 = new com.l2fprod.common.swing.JTaskPane();
        jTaskPaneGroup2 = new com.l2fprod.common.swing.JTaskPaneGroup();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTaskPaneGroup1 = new com.l2fprod.common.swing.JTaskPaneGroup();
        jTradeBothButton = new javax.swing.JButton();
        jTradeInButton = new javax.swing.JButton();
        jTradeOutButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jEqualDistribution = new javax.swing.JRadioButton();
        jAdjustingDistribution = new javax.swing.JRadioButton();
        jTargetWood = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTargetClay = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTargetIron = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jRemainWood = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jRemainClay = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jRemainIron = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setTitle("Ressourcenverteiler");

        jPanel1.setBackground(new java.awt.Color(239, 235, 223));

        jMerchantDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jMerchantDataTable);

        jTaskPane1.setBackground(new java.awt.Color(239, 235, 223));
        com.l2fprod.common.swing.PercentLayout percentLayout1 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout1.setGap(14);
        percentLayout1.setOrientation(1);
        jTaskPane1.setLayout(percentLayout1);

        jTaskPaneGroup2.setTitle("Einlesen");
        com.l2fprod.common.swing.PercentLayout percentLayout3 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout3.setGap(2);
        percentLayout3.setOrientation(1);
        jTaskPaneGroup2.getContentPane().setLayout(percentLayout3);

        jButton4.setBackground(new java.awt.Color(239, 235, 223));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/from_clipboard.png"))); // NOI18N
        jButton4.setToolTipText("Daten aus der Zwischenablage lesen");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireReadDataEvent(evt);
            }
        });
        jTaskPaneGroup2.getContentPane().add(jButton4);

        jButton5.setBackground(new java.awt.Color(239, 235, 223));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/att_remove.png"))); // NOI18N
        jButton5.setToolTipText("Markierte Einträge löschen");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireRemoveMarkedEntriesEvent(evt);
            }
        });
        jTaskPaneGroup2.getContentPane().add(jButton5);

        jTaskPane1.add(jTaskPaneGroup2);

        jTaskPaneGroup1.setTitle("Herkunft/Ziel");
        com.l2fprod.common.swing.PercentLayout percentLayout2 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout2.setGap(2);
        percentLayout2.setOrientation(1);
        jTaskPaneGroup1.getContentPane().setLayout(percentLayout2);

        jTradeBothButton.setBackground(new java.awt.Color(239, 235, 223));
        jTradeBothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/trade_both.png"))); // NOI18N
        jTradeBothButton.setToolTipText("Markierte Dörfer sind Ressourcenlieferer und -empfänger");
        jTradeBothButton.setMaximumSize(new java.awt.Dimension(57, 33));
        jTradeBothButton.setMinimumSize(new java.awt.Dimension(57, 33));
        jTradeBothButton.setPreferredSize(new java.awt.Dimension(57, 33));
        jTradeBothButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTradeDirectionEvent(evt);
            }
        });
        jTaskPaneGroup1.getContentPane().add(jTradeBothButton);

        jTradeInButton.setBackground(new java.awt.Color(239, 235, 223));
        jTradeInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/trade_in.png"))); // NOI18N
        jTradeInButton.setToolTipText("Markierte Dörfer sind nur Ressourcenempfänger");
        jTradeInButton.setMaximumSize(new java.awt.Dimension(57, 33));
        jTradeInButton.setMinimumSize(new java.awt.Dimension(57, 33));
        jTradeInButton.setPreferredSize(new java.awt.Dimension(57, 33));
        jTradeInButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTradeDirectionEvent(evt);
            }
        });
        jTaskPaneGroup1.getContentPane().add(jTradeInButton);

        jTradeOutButton.setBackground(new java.awt.Color(239, 235, 223));
        jTradeOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/trade_out.png"))); // NOI18N
        jTradeOutButton.setToolTipText("Markierte Dörfer sind nur Ressourcenlieferer");
        jTradeOutButton.setMaximumSize(new java.awt.Dimension(57, 33));
        jTradeOutButton.setMinimumSize(new java.awt.Dimension(57, 33));
        jTradeOutButton.setPreferredSize(new java.awt.Dimension(57, 33));
        jTradeOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTradeDirectionEvent(evt);
            }
        });
        jTaskPaneGroup1.getContentPane().add(jTradeOutButton);

        jTaskPane1.add(jTaskPaneGroup1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Berechnung"));
        jPanel2.setOpaque(false);

        jButton6.setBackground(new java.awt.Color(239, 235, 223));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/att_validate.png"))); // NOI18N
        jButton6.setToolTipText("Daten aus der Zwischenablage lesen");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCalculateEvent(evt);
            }
        });

        buttonGroup1.add(jEqualDistribution);
        jEqualDistribution.setSelected(true);
        jEqualDistribution.setText("Gleichverteilung");
        jEqualDistribution.setOpaque(false);
        jEqualDistribution.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireCalculationTypeChangedEvent(evt);
            }
        });

        buttonGroup1.add(jAdjustingDistribution);
        jAdjustingDistribution.setText("Angleichung");
        jAdjustingDistribution.setOpaque(false);
        jAdjustingDistribution.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireCalculationTypeChangedEvent(evt);
            }
        });

        jTargetWood.setText("400000");
        jTargetWood.setEnabled(false);
        jTargetWood.setMaximumSize(new java.awt.Dimension(50, 20));
        jTargetWood.setMinimumSize(new java.awt.Dimension(50, 20));
        jTargetWood.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/holz.png"))); // NOI18N
        jLabel1.setEnabled(false);

        jTargetClay.setText("400000");
        jTargetClay.setEnabled(false);
        jTargetClay.setMaximumSize(new java.awt.Dimension(50, 20));
        jTargetClay.setMinimumSize(new java.awt.Dimension(50, 20));
        jTargetClay.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/lehm.png"))); // NOI18N
        jLabel2.setEnabled(false);

        jTargetIron.setText("400000");
        jTargetIron.setEnabled(false);
        jTargetIron.setMaximumSize(new java.awt.Dimension(50, 20));
        jTargetIron.setMinimumSize(new java.awt.Dimension(50, 20));
        jTargetIron.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/eisen.png"))); // NOI18N
        jLabel3.setEnabled(false);

        jRemainWood.setText("100000");
        jRemainWood.setMaximumSize(new java.awt.Dimension(50, 20));
        jRemainWood.setMinimumSize(new java.awt.Dimension(50, 20));
        jRemainWood.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/lehm.png"))); // NOI18N

        jRemainClay.setText("100000");
        jRemainClay.setMaximumSize(new java.awt.Dimension(50, 20));
        jRemainClay.setMinimumSize(new java.awt.Dimension(50, 20));
        jRemainClay.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/eisen.png"))); // NOI18N

        jRemainIron.setText("100000");
        jRemainIron.setMaximumSize(new java.awt.Dimension(50, 20));
        jRemainIron.setMinimumSize(new java.awt.Dimension(50, 20));
        jRemainIron.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/holz.png"))); // NOI18N

        jLabel7.setText("Min. Füllstand");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jAdjustingDistribution, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jEqualDistribution, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTargetWood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTargetClay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTargetIron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemainWood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemainClay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemainIron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jEqualDistribution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jAdjustingDistribution)
                            .addComponent(jTargetWood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jTargetClay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jTargetIron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .addComponent(jRemainWood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRemainClay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRemainIron, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)))
                        .addGap(84, 84, 84))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTaskPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTaskPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireReadDataEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireReadDataEvent
        try {
            Transferable t = (Transferable) Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
            String data = (String) t.getTransferData(DataFlavor.stringFlavor);
            List<VillageMerchantInfo> infos = MerchantParser.parse(data);
            if (!infos.isEmpty()) {
                Collections.addAll(merchantInfos, infos.toArray(new VillageMerchantInfo[]{}));
                rebuildTable();
            }

        } catch (Exception e) {
            logger.error("Failed to read merchant data", e);
            JOptionPaneHelper.showErrorBox(this, "Fehler beim Lesen aus der Zwischenablage", "Fehler");
        }
    }//GEN-LAST:event_fireReadDataEvent

    private void fireChangeTradeDirectionEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireChangeTradeDirectionEvent
        Direction dir = Direction.BOTH;
        if (evt.getSource() == jTradeBothButton) {
            dir = Direction.BOTH;
        } else if (evt.getSource() == jTradeInButton) {
            dir = Direction.INCOMING;
        } else if (evt.getSource() == jTradeOutButton) {
            dir = Direction.OUTGOING;
        }

        int[] rows = jMerchantDataTable.getSelectedRows();
        if (rows == null || rows.length == 0) {
            return;
        }

        for (int i = 0; i < rows.length; i++) {
            //int row = jMerchantDataTable.convertRowIndexToModel(rows[i]);
            jMerchantDataTable.setValueAt(dir, rows[i], 6);
        }

    }//GEN-LAST:event_fireChangeTradeDirectionEvent

    private void fireRemoveMarkedEntriesEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireRemoveMarkedEntriesEvent

        int[] rows = jMerchantDataTable.getSelectedRows();
        if (rows == null || rows.length == 0) {
            return;
        }

        Arrays.sort(rows);
        List<Village> villagesToRemove = new LinkedList<Village>();
        DefaultTableModel model = ((DefaultTableModel) jMerchantDataTable.getModel());
        jMerchantDataTable.invalidate();
        for (int i = rows.length - 1; i >= 0; i--) {
            int row = jMerchantDataTable.convertRowIndexToModel(rows[i]);
            villagesToRemove.add((Village) model.getValueAt(row, 0));
            model.removeRow(row);
        }
        jMerchantDataTable.revalidate();

        List<VillageMerchantInfo> infosToRemove = new LinkedList<VillageMerchantInfo>();
        for (VillageMerchantInfo info : merchantInfos) {
            if (villagesToRemove.contains(info.getVillage())) {
                infosToRemove.add(info);
            }
        }

        for (VillageMerchantInfo info : infosToRemove) {
            merchantInfos.remove(info);
        }
    }//GEN-LAST:event_fireRemoveMarkedEntriesEvent

    private void fireCalculateEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCalculateEvent

        DefaultTableModel model = (DefaultTableModel) jMerchantDataTable.getModel();
        ArrayList<Village> incomingOnly = new ArrayList<Village>();
        ArrayList<Village> outgoingOnly = new ArrayList<Village>();
        for (int i = 0; i < model.getRowCount(); i++) {
            int row = jMerchantDataTable.convertRowIndexToModel(i);
            Direction dir = (Direction) model.getValueAt(row, 6);
            if (dir == Direction.INCOMING) {
                incomingOnly.add((Village) model.getValueAt(row, 0));
            } else if (dir == Direction.OUTGOING) {
                outgoingOnly.add((Village) model.getValueAt(row, 0));
            }
        }
        int[] targetRes = null;
        int[] remainRes = null;
        if (jAdjustingDistribution.isSelected()) {
            targetRes = new int[]{Integer.parseInt(jTargetWood.getText()), Integer.parseInt(jTargetClay.getText()), Integer.parseInt(jTargetIron.getText())};
            remainRes = new int[]{Integer.parseInt(jRemainWood.getText()), Integer.parseInt(jRemainClay.getText()), Integer.parseInt(jRemainIron.getText())};
        } else {
            int woodSum = 0;
            int claySum = 0;
            int ironSum = 0;
            for (VillageMerchantInfo info : merchantInfos) {
                woodSum += info.getWoodStock();
                claySum += info.getClayStock();
                ironSum += info.getIronStock();
            }
            targetRes = new int[]{(int) Math.rint(woodSum / merchantInfos.size()), (int) Math.rint(claySum / merchantInfos.size()), (int) Math.rint(ironSum / merchantInfos.size())};
            jTargetWood.setText(Integer.toString(targetRes[0]));
            jTargetClay.setText(Integer.toString(targetRes[1]));
            jTargetIron.setText(Integer.toString(targetRes[2]));
            remainRes = targetRes;
        }

        List<VillageMerchantInfo> copy = new LinkedList<VillageMerchantInfo>(merchantInfos);
        List<List<MerchantSource>> results = new MerchantDistributor().calculate(copy, incomingOnly, outgoingOnly, targetRes, remainRes);


        // rebuildTable();

    }//GEN-LAST:event_fireCalculateEvent

    private void fireCalculationTypeChangedEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireCalculationTypeChangedEvent
        jTargetWood.setEnabled(jAdjustingDistribution.isSelected());
        jTargetClay.setEnabled(jAdjustingDistribution.isSelected());
        jTargetIron.setEnabled(jAdjustingDistribution.isSelected());
    }//GEN-LAST:event_fireCalculationTypeChangedEvent

    private void rebuildTable() {
        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Dorf", "Holz", "Lehm", "Eisen", "Speicher", "Händler", "Handelsrichtung"
                }) {

            Class[] types = new Class[]{
                Village.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, Direction.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        for (VillageMerchantInfo info : merchantInfos) {
            //add table rows

            Direction dir = Direction.BOTH;
            int v = (int) Math.rint(3 * Math.random());
            switch (v) {
                case 0:
                    dir = Direction.BOTH;
                    break;
                case 1:
                    dir = Direction.INCOMING;
                    break;
                case 2:
                    dir = Direction.OUTGOING;
                    break;
            }
            model.addRow(new Object[]{DataHolder.getSingleton().getVillages()[info.getVillage().getX()][info.getVillage().getY()], info.getWoodStock(), info.getClayStock(), info.getIronStock(), info.getStashCapacity(), info.getAvailableMerchants() + "/" + info.getOverallMerchants(), dir});
        }

        //set model
        jMerchantDataTable.setModel(model);
        jMerchantDataTable.setRowHeight(20);
        //set sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>();
        jMerchantDataTable.setRowSorter(sorter);
        sorter.setModel(model);
        //set cell renderers
        AlternatingColorCellRenderer rend = new AlternatingColorCellRenderer();
        jMerchantDataTable.setDefaultRenderer(Village.class, rend);
        jMerchantDataTable.setDefaultRenderer(String.class, rend);
        jMerchantDataTable.setDefaultRenderer(Direction.class, new TradeDirectionCellRenderer());
        jMerchantDataTable.setDefaultRenderer(Integer.class, new NumberFormatCellRenderer());

        //build table header

        SortableTableHeaderRenderer mHeaderRenderer = new SortableTableHeaderRenderer();
        for (int i = 0; i < jMerchantDataTable.getColumnCount(); i++) {

            jMerchantDataTable.getColumn(jMerchantDataTable.getColumnName(i)).setHeaderRenderer(mHeaderRenderer);
        }
    }

    @Override
    public void fireVillagesDraggedEvent(List<Village> pVillages, Point pDropLocation) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton jAdjustingDistribution;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JRadioButton jEqualDistribution;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTable jMerchantDataTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jRemainClay;
    private javax.swing.JTextField jRemainIron;
    private javax.swing.JTextField jRemainWood;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTargetClay;
    private javax.swing.JTextField jTargetIron;
    private javax.swing.JTextField jTargetWood;
    private com.l2fprod.common.swing.JTaskPane jTaskPane1;
    private com.l2fprod.common.swing.JTaskPaneGroup jTaskPaneGroup1;
    private com.l2fprod.common.swing.JTaskPaneGroup jTaskPaneGroup2;
    private javax.swing.JButton jTradeBothButton;
    private javax.swing.JButton jTradeInButton;
    private javax.swing.JButton jTradeOutButton;
    // End of variables declaration//GEN-END:variables
}
