/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DSWorkbenchMerchantDistibutor.java
 *
 * Created on 18.06.2010, 08:12:57
 */
package de.tor.tribes.ui;

import de.tor.tribes.io.DataHolder;
import de.tor.tribes.types.Village;
import de.tor.tribes.types.VillageMerchantInfo;
import de.tor.tribes.ui.renderer.AlternatingColorCellRenderer;
import de.tor.tribes.ui.renderer.BooleanCellRenderer;
import de.tor.tribes.ui.renderer.NumberFormatCellRenderer;
import de.tor.tribes.ui.renderer.TransportCellRenderer;
import de.tor.tribes.ui.renderer.SortableTableHeaderRenderer;
import de.tor.tribes.ui.renderer.TradeDirectionCellRenderer;
import de.tor.tribes.ui.renderer.VillageCellRenderer;
import de.tor.tribes.util.BrowserCommandSender;
import de.tor.tribes.util.GlobalOptions;
import de.tor.tribes.util.JOptionPaneHelper;
import de.tor.tribes.util.PluginManager;
import de.tor.tribes.util.algo.MerchantDestination;
import de.tor.tribes.util.algo.MerchantDistributor;
import de.tor.tribes.util.algo.MerchantSource;
import de.tor.tribes.util.algo.Order;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;

/**
 *@TODO (DIFF) Added merchant distributor
 * @TODO (DIFF) Add "ignore transports < X" field
 * @TODO (DIFF) Add confirm box on removing villages
 * @TODO (DIFF) Add confirm box on impossible calculation
 * @author Jejkal
 */
public class DSWorkbenchMerchantDistibutor extends AbstractDSWorkbenchFrame {

    private static Logger logger = Logger.getLogger("MerchantDistributor");
    private static DSWorkbenchMerchantDistibutor SINGLETON = null;
    private List<VillageMerchantInfo> merchantInfos = new LinkedList<VillageMerchantInfo>();
    private int iClickAccount = 0;

    public static synchronized DSWorkbenchMerchantDistibutor getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new DSWorkbenchMerchantDistibutor();
        }
        return SINGLETON;
    }

    /** Creates new form DSWorkbenchMerchantDistibutor */
    DSWorkbenchMerchantDistibutor() {
        initComponents();

        // <editor-fold defaultstate="collapsed" desc=" Init HelpSystem ">
        GlobalOptions.getHelpBroker().enableHelpKey(getRootPane(), "pages.merchant_distributor", GlobalOptions.getHelpBroker().getHelpSet());
        // </editor-fold>
    }

    public void resetView() {
        merchantInfos.clear();

        rebuildTable(jMerchantDataTable, new LinkedList<VillageMerchantInfo>());
        buildResults(new LinkedList<VillageMerchantInfo>(), new LinkedList<List<MerchantSource>>(), new int[]{0, 0, 0});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jResultFrame = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jResultsTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jUsedMerchants = new javax.swing.JLabel();
        jUsedTransports = new javax.swing.JLabel();
        jPerfectResults = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jResultsDataTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jClickAccountLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMerchantDataTable = new javax.swing.JTable();
        jTaskPane1 = new com.l2fprod.common.swing.JTaskPane();
        jTaskPaneGroup2 = new com.l2fprod.common.swing.JTaskPaneGroup();
        jInsertBothButton = new javax.swing.JButton();
        jInsertReceiveButton = new javax.swing.JButton();
        jInsertSendButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTaskPaneGroup1 = new com.l2fprod.common.swing.JTaskPaneGroup();
        jTradeBothButton = new javax.swing.JButton();
        jTradeInButton = new javax.swing.JButton();
        jTradeOutButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jEqualDistribution = new javax.swing.JRadioButton();
        jAdjustingDistribution = new javax.swing.JRadioButton();
        jTargetWood = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTargetClay = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTargetIron = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jRemainWood = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jRemainClay = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jRemainIron = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMinTransportAmount = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jIgnoreTransportsButton = new javax.swing.JCheckBox();

        jResultFrame.setTitle("Errechnete Transporte");

        jPanel3.setBackground(new java.awt.Color(239, 235, 223));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jResultsTable);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Sonstige Ergebnisse"));
        jPanel4.setOpaque(false);

        jLabel8.setText("Verwendete HÃ¤ndler");

        jLabel9.setText("Verwendete Transporte");

        jLabel10.setText("Optimale Ergebnisse");

        jUsedMerchants.setMaximumSize(new java.awt.Dimension(40, 14));
        jUsedMerchants.setMinimumSize(new java.awt.Dimension(40, 14));
        jUsedMerchants.setPreferredSize(new java.awt.Dimension(40, 14));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUsedMerchants, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .addComponent(jUsedTransports, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .addComponent(jPerfectResults, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jUsedMerchants, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jUsedTransports))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jPerfectResults))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jResultsDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jResultsDataTable);

        jLabel11.setText("<html><b>Resultierende Rohstoffverteilung</b></html>");

        jLabel12.setText("<html><b>DurchzufÃ¼hrende Transporte</b></html>");

        jButton1.setBackground(new java.awt.Color(239, 235, 223));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/att_browser.png"))); // NOI18N
        jButton1.setToolTipText("Markierte Transporte in den Browser Ã¼bertragen");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireTransferTransportsToBrowserEvent(evt);
            }
        });

        jClickAccountLabel.setBackground(new java.awt.Color(255, 255, 255));
        jClickAccountLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/LeftClick.png"))); // NOI18N
        jClickAccountLabel.setText("Klick-Konto [0]");
        jClickAccountLabel.setToolTipText("0 Klick(s) aufgeladen");
        jClickAccountLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jClickAccountLabel.setOpaque(true);
        jClickAccountLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireClickAccountChangedEvent(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(239, 235, 223));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/att_remove.png"))); // NOI18N
        jButton2.setToolTipText("Markierte Transporte entfernen");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireRemoveTransportsEvent(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(jClickAccountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jClickAccountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(100, 100, 100)))
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jCheckBox1.setText("Immer im Vordergrund");
        jCheckBox1.setOpaque(false);
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireAlwaysOnTopEvent(evt);
            }
        });

        javax.swing.GroupLayout jResultFrameLayout = new javax.swing.GroupLayout(jResultFrame.getContentPane());
        jResultFrame.getContentPane().setLayout(jResultFrameLayout);
        jResultFrameLayout.setHorizontalGroup(
            jResultFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jResultFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jResultFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );
        jResultFrameLayout.setVerticalGroup(
            jResultFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jResultFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );

        setTitle("Rohstoffverteiler");

        jPanel1.setBackground(new java.awt.Color(239, 235, 223));

        jMerchantDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jMerchantDataTable);

        jTaskPane1.setBackground(new java.awt.Color(239, 235, 223));
        com.l2fprod.common.swing.PercentLayout percentLayout1 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout1.setGap(14);
        percentLayout1.setOrientation(1);
        jTaskPane1.setLayout(percentLayout1);

        jTaskPaneGroup2.setTitle("Einlesen");
        com.l2fprod.common.swing.PercentLayout percentLayout3 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout3.setGap(2);
        percentLayout3.setOrientation(1);
        jTaskPaneGroup2.getContentPane().setLayout(percentLayout3);

        jInsertBothButton.setBackground(new java.awt.Color(239, 235, 223));
        jInsertBothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/res_both_from_clipboard.png"))); // NOI18N
        jInsertBothButton.setToolTipText("Daten aus der Zwischenablage lesen (Empfang und Lieferung)");
        jInsertBothButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireReadDataEvent(evt);
            }
        });
        jTaskPaneGroup2.getContentPane().add(jInsertBothButton);

        jInsertReceiveButton.setBackground(new java.awt.Color(239, 235, 223));
        jInsertReceiveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/res_in_from_clipboard.png"))); // NOI18N
        jInsertReceiveButton.setToolTipText("Daten aus der Zwischenablage lesen (Nur Empfang)");
        jInsertReceiveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireReadDataEvent(evt);
            }
        });
        jTaskPaneGroup2.getContentPane().add(jInsertReceiveButton);

        jInsertSendButton.setBackground(new java.awt.Color(239, 235, 223));
        jInsertSendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/res_out_from_clipboard.png"))); // NOI18N
        jInsertSendButton.setToolTipText("Daten aus der Zwischenablage lesen (Nur Lieferung)");
        jInsertSendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireReadDataEvent(evt);
            }
        });
        jTaskPaneGroup2.getContentPane().add(jInsertSendButton);

        jButton5.setBackground(new java.awt.Color(239, 235, 223));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/att_remove.png"))); // NOI18N
        jButton5.setToolTipText("Markierte EintrÃ¤ge lÃ¶schen");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireRemoveMarkedEntriesEvent(evt);
            }
        });
        jTaskPaneGroup2.getContentPane().add(jButton5);

        jTaskPane1.add(jTaskPaneGroup2);

        jTaskPaneGroup1.setTitle("Herkunft/Ziel");
        com.l2fprod.common.swing.PercentLayout percentLayout2 = new com.l2fprod.common.swing.PercentLayout();
        percentLayout2.setGap(2);
        percentLayout2.setOrientation(1);
        jTaskPaneGroup1.getContentPane().setLayout(percentLayout2);

        jTradeBothButton.setBackground(new java.awt.Color(239, 235, 223));
        jTradeBothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/trade_both.png"))); // NOI18N
        jTradeBothButton.setToolTipText("Markierte DÃ¶rfer sind Ressourcenlieferer und -empfÃ¤nger");
        jTradeBothButton.setMaximumSize(new java.awt.Dimension(57, 33));
        jTradeBothButton.setMinimumSize(new java.awt.Dimension(57, 33));
        jTradeBothButton.setPreferredSize(new java.awt.Dimension(57, 33));
        jTradeBothButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTradeDirectionEvent(evt);
            }
        });
        jTaskPaneGroup1.getContentPane().add(jTradeBothButton);

        jTradeInButton.setBackground(new java.awt.Color(239, 235, 223));
        jTradeInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/trade_in.png"))); // NOI18N
        jTradeInButton.setToolTipText("Markierte DÃ¶rfer sind nur RessourcenempfÃ¤nger");
        jTradeInButton.setMaximumSize(new java.awt.Dimension(57, 33));
        jTradeInButton.setMinimumSize(new java.awt.Dimension(57, 33));
        jTradeInButton.setPreferredSize(new java.awt.Dimension(57, 33));
        jTradeInButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTradeDirectionEvent(evt);
            }
        });
        jTaskPaneGroup1.getContentPane().add(jTradeInButton);

        jTradeOutButton.setBackground(new java.awt.Color(239, 235, 223));
        jTradeOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/trade_out.png"))); // NOI18N
        jTradeOutButton.setToolTipText("Markierte DÃ¶rfer sind nur Ressourcenlieferer");
        jTradeOutButton.setMaximumSize(new java.awt.Dimension(57, 33));
        jTradeOutButton.setMinimumSize(new java.awt.Dimension(57, 33));
        jTradeOutButton.setPreferredSize(new java.awt.Dimension(57, 33));
        jTradeOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireChangeTradeDirectionEvent(evt);
            }
        });
        jTaskPaneGroup1.getContentPane().add(jTradeOutButton);

        jTaskPane1.add(jTaskPaneGroup1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Berechnung"));
        jPanel2.setOpaque(false);

        jButton6.setBackground(new java.awt.Color(239, 235, 223));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/att_validate.png"))); // NOI18N
        jButton6.setToolTipText("Notwendige Transporte berechnen");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireCalculateEvent(evt);
            }
        });

        buttonGroup1.add(jEqualDistribution);
        jEqualDistribution.setSelected(true);
        jEqualDistribution.setText("Gleichverteilung");
        jEqualDistribution.setOpaque(false);
        jEqualDistribution.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireCalculationTypeChangedEvent(evt);
            }
        });

        buttonGroup1.add(jAdjustingDistribution);
        jAdjustingDistribution.setText("GewÃ¼nschter Lagerbestand");
        jAdjustingDistribution.setOpaque(false);
        jAdjustingDistribution.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fireCalculationTypeChangedEvent(evt);
            }
        });

        jTargetWood.setText("400000");
        jTargetWood.setEnabled(false);
        jTargetWood.setMaximumSize(new java.awt.Dimension(50, 20));
        jTargetWood.setMinimumSize(new java.awt.Dimension(50, 20));
        jTargetWood.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/holz.png"))); // NOI18N
        jLabel1.setEnabled(false);

        jTargetClay.setText("400000");
        jTargetClay.setEnabled(false);
        jTargetClay.setMaximumSize(new java.awt.Dimension(50, 20));
        jTargetClay.setMinimumSize(new java.awt.Dimension(50, 20));
        jTargetClay.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/lehm.png"))); // NOI18N
        jLabel2.setEnabled(false);

        jTargetIron.setText("400000");
        jTargetIron.setEnabled(false);
        jTargetIron.setMaximumSize(new java.awt.Dimension(50, 20));
        jTargetIron.setMinimumSize(new java.awt.Dimension(50, 20));
        jTargetIron.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/eisen.png"))); // NOI18N
        jLabel3.setEnabled(false);

        jRemainWood.setText("100000");
        jRemainWood.setEnabled(false);
        jRemainWood.setMaximumSize(new java.awt.Dimension(50, 20));
        jRemainWood.setMinimumSize(new java.awt.Dimension(50, 20));
        jRemainWood.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/lehm.png"))); // NOI18N
        jLabel4.setEnabled(false);

        jRemainClay.setText("100000");
        jRemainClay.setEnabled(false);
        jRemainClay.setMaximumSize(new java.awt.Dimension(50, 20));
        jRemainClay.setMinimumSize(new java.awt.Dimension(50, 20));
        jRemainClay.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/eisen.png"))); // NOI18N
        jLabel5.setEnabled(false);

        jRemainIron.setText("100000");
        jRemainIron.setEnabled(false);
        jRemainIron.setMaximumSize(new java.awt.Dimension(50, 20));
        jRemainIron.setMinimumSize(new java.awt.Dimension(50, 20));
        jRemainIron.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ui/holz.png"))); // NOI18N
        jLabel6.setEnabled(false);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Min. FÃ¼llstand");
        jLabel7.setEnabled(false);

        jMinTransportAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jMinTransportAmount.setText("10000");
        jMinTransportAmount.setMaximumSize(new java.awt.Dimension(40, 20));
        jMinTransportAmount.setMinimumSize(new java.awt.Dimension(40, 20));
        jMinTransportAmount.setPreferredSize(new java.awt.Dimension(40, 20));

        jLabel14.setText("Rohstoffen ignorieren.");

        jIgnoreTransportsButton.setText("Transporte mit weniger als");
        jIgnoreTransportsButton.setOpaque(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jAdjustingDistribution, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jEqualDistribution, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTargetWood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTargetClay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTargetIron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRemainWood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRemainClay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRemainIron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jIgnoreTransportsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMinTransportAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jEqualDistribution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAdjustingDistribution)
                    .addComponent(jTargetWood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTargetClay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTargetIron, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(jRemainWood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemainClay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemainIron, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jMinTransportAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(jIgnoreTransportsButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTaskPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTaskPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fireReadDataEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireReadDataEvent
        try {
            Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
            String data = (String) t.getTransferData(DataFlavor.stringFlavor);
            List<VillageMerchantInfo> infos = PluginManager.getSingleton().executeMerchantParser(data);
            if (infos.isEmpty()) {
                JOptionPaneHelper.showInformationBox(this, "Keine EintrÃ¤ge gefunden", "Information");
                return;
            }

            VillageMerchantInfo.Direction currentDir = VillageMerchantInfo.Direction.BOTH;
            if (evt.getSource() == jInsertSendButton) {
                currentDir = VillageMerchantInfo.Direction.OUTGOING;
            } else if (evt.getSource() == jInsertReceiveButton) {
                currentDir = VillageMerchantInfo.Direction.INCOMING;
            }

            for (VillageMerchantInfo newInfo : infos) {
                newInfo.setDirection(currentDir);
            }

            int changesToBoth = 0;
            int dirChanges = 0;
            for (VillageMerchantInfo existingInfo : merchantInfos) {
                VillageMerchantInfo toRemove = null;
                for (VillageMerchantInfo newInfo : infos) {
                    if (existingInfo.getVillage().equals(newInfo.getVillage())) {
                        //info exists
                        if (existingInfo.getDirection() == VillageMerchantInfo.Direction.INCOMING && newInfo.getDirection() == VillageMerchantInfo.Direction.OUTGOING
                                || existingInfo.getDirection() == VillageMerchantInfo.Direction.OUTGOING && newInfo.getDirection() == VillageMerchantInfo.Direction.INCOMING) {
                            //village acceptes only one and gets the other -> change to both
                            existingInfo.setDirection(VillageMerchantInfo.Direction.BOTH);
                            changesToBoth++;
                        } else if (existingInfo.getDirection() != currentDir) {
                            //set to new direction
                            existingInfo.setDirection(currentDir);
                            dirChanges++;
                        }
                        toRemove = newInfo;
                        break;
                    }
                }

                if (toRemove != null) {
                    infos.remove(toRemove);
                }
            }
            int newInfos = infos.size();
            Collections.addAll(merchantInfos, infos.toArray(new VillageMerchantInfo[]{}));

            rebuildTable(jMerchantDataTable, merchantInfos);
            String message = "";
            if (newInfos == 0 && changesToBoth == 0 && dirChanges == 0) {
                message = "Keine VerÃ¤nderung durch neue EintrÃ¤ge";
            } else {
                message = "VerÃ¤nderung der erfassten DÃ¶rfer:\n";
                message += " * " + newInfos + ((newInfos == 1) ? " neuer Eintrag\n" : " neue EintrÃ¤ge\n");
                message += " * " + changesToBoth + " Wechsel zu 'Lieferant+EmpfÃ¤nger'\n";
                message += " * " + dirChanges + " Wechsel der Handelsrichtung\n";

            }
            //JOptionPaneHelper.showInformationBox(this, message, "Information");
            NotifierFrame.doNotification("DS Workbench hat " + infos.size() + " Handelspartner in der Zwischenablage gefunden.\n" + message, NotifierFrame.NOTIFY_INFO);
            // }

        } catch (Exception e) {
            logger.error("Failed to read merchant data", e);
            JOptionPaneHelper.showErrorBox(this, "Fehler beim Lesen aus der Zwischenablage", "Fehler");
        }
    }//GEN-LAST:event_fireReadDataEvent

    private void fireChangeTradeDirectionEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireChangeTradeDirectionEvent
        VillageMerchantInfo.Direction dir = VillageMerchantInfo.Direction.BOTH;
        if (evt.getSource() == jTradeBothButton) {
            dir = VillageMerchantInfo.Direction.BOTH;
        } else if (evt.getSource() == jTradeInButton) {
            dir = VillageMerchantInfo.Direction.INCOMING;
        } else if (evt.getSource() == jTradeOutButton) {
            dir = VillageMerchantInfo.Direction.OUTGOING;
        }

        int[] rows = jMerchantDataTable.getSelectedRows();
        if (rows == null || rows.length == 0) {
            return;
        }

        for (int i = 0; i < rows.length; i++) {
            int row = jMerchantDataTable.convertRowIndexToModel(rows[i]);
            merchantInfos.get(row).setDirection(dir);
        }
        rebuildTable(jMerchantDataTable, merchantInfos);
    }//GEN-LAST:event_fireChangeTradeDirectionEvent

    private void fireRemoveMarkedEntriesEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireRemoveMarkedEntriesEvent

        int[] rows = jMerchantDataTable.getSelectedRows();
        if (rows == null || rows.length == 0) {
            return;
        }

        if (JOptionPaneHelper.showQuestionConfirmBox(this, (rows.length + ((rows.length == 1) ? " Eintrag wirklich lÃ¶schen?" : " EintrÃ¤ge wirklich lÃ¶schen?")), "EintrÃ¤ge lÃ¶schen", "Nein", "Ja") == JOptionPane.NO_OPTION) {
            return;
        }
        Arrays.sort(rows);
        List<Village> villagesToRemove = new LinkedList<Village>();
        DefaultTableModel model = ((DefaultTableModel) jMerchantDataTable.getModel());
        jMerchantDataTable.invalidate();
        for (int i = rows.length - 1; i >= 0; i--) {
            int row = jMerchantDataTable.convertRowIndexToModel(rows[i]);
            villagesToRemove.add((Village) model.getValueAt(row, 0));
            model.removeRow(row);
        }
        jMerchantDataTable.revalidate();

        List<VillageMerchantInfo> infosToRemove = new LinkedList<VillageMerchantInfo>();
        for (VillageMerchantInfo info : merchantInfos) {
            if (villagesToRemove.contains(info.getVillage())) {
                infosToRemove.add(info);
            }
        }

        for (VillageMerchantInfo info : infosToRemove) {
            merchantInfos.remove(info);
        }
    }//GEN-LAST:event_fireRemoveMarkedEntriesEvent

    private void fireCalculateEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCalculateEvent

        ArrayList<Village> incomingOnly = new ArrayList<Village>();
        ArrayList<Village> outgoingOnly = new ArrayList<Village>();
        int dualDirectionVillages = 0;
        if (merchantInfos.size() < 2) {
            JOptionPaneHelper.showInformationBox(this, "Es mÃ¼ssen mindestens 2 DÃ¶rfer ausgewÃ¤hlt sein.", "Information");
            return;
        }
        for (VillageMerchantInfo info : merchantInfos) {
            if (info.getDirection() == VillageMerchantInfo.Direction.INCOMING) {
                incomingOnly.add(info.getVillage());
            } else if (info.getDirection() == VillageMerchantInfo.Direction.OUTGOING) {
                outgoingOnly.add(info.getVillage());
            } else {
                dualDirectionVillages++;
            }
        }

        int[] targetRes = null;
        int[] remainRes = null;
        if (jAdjustingDistribution.isSelected()) {
            try {
                targetRes = new int[]{Integer.parseInt(jTargetWood.getText()), Integer.parseInt(jTargetClay.getText()), Integer.parseInt(jTargetIron.getText())};
                remainRes = new int[]{Integer.parseInt(jRemainWood.getText()), Integer.parseInt(jRemainClay.getText()), Integer.parseInt(jRemainIron.getText())};
            } catch (Exception e) {
                JOptionPaneHelper.showWarningBox(this, "Ressourcenangaben fehlerhaft", "Fehler");
                return;
            }
        } else {
            int woodSum = 0;
            int claySum = 0;
            int ironSum = 0;
            for (VillageMerchantInfo info : merchantInfos) {
                woodSum += info.getWoodStock();
                claySum += info.getClayStock();
                ironSum += info.getIronStock();
            }
            targetRes = new int[]{(int) Math.rint(woodSum / merchantInfos.size()), (int) Math.rint(claySum / merchantInfos.size()), (int) Math.rint(ironSum / merchantInfos.size())};
            jTargetWood.setText(Integer.toString(targetRes[0]));
            jTargetClay.setText(Integer.toString(targetRes[1]));
            jTargetIron.setText(Integer.toString(targetRes[2]));
            remainRes = targetRes;
        }

        List<VillageMerchantInfo> copy = new LinkedList<VillageMerchantInfo>();
        for (int i = 0; i < merchantInfos.size(); i++) {
            copy.add(merchantInfos.get(i).clone());
        }
        //   Collections.copy(copy, merchantInfos);
        //  System.out.println(merchantInfos);


        if (incomingOnly.isEmpty() && dualDirectionVillages < 1) {
            JOptionPaneHelper.showInformationBox(this, "Keine RohstoffempfÃ¤nger angegeben", "Fehler");
            return;
        } else if (outgoingOnly.isEmpty() && dualDirectionVillages < 1) {
            JOptionPaneHelper.showInformationBox(this, "Keine Rohstofflieferanten angegeben", "Fehler");
            return;
        } else if (incomingOnly.isEmpty() && outgoingOnly.isEmpty() && dualDirectionVillages < 2) {
            JOptionPaneHelper.showInformationBox(this, "Es mÃ¼ssen mindestens 2 DÃ¶rfer ausgewÃ¤hlt sein.", "Information");
            return;
        }

        List<List<MerchantSource>> results = new MerchantDistributor().calculate(copy, incomingOnly, outgoingOnly, targetRes, remainRes);
        buildResults(copy, results, targetRes);

    }//GEN-LAST:event_fireCalculateEvent

    private void fireCalculationTypeChangedEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireCalculationTypeChangedEvent
        jTargetWood.setEnabled(jAdjustingDistribution.isSelected());
        jTargetClay.setEnabled(jAdjustingDistribution.isSelected());
        jTargetIron.setEnabled(jAdjustingDistribution.isSelected());
        jLabel1.setEnabled(jAdjustingDistribution.isSelected());
        jLabel2.setEnabled(jAdjustingDistribution.isSelected());
        jLabel3.setEnabled(jAdjustingDistribution.isSelected());
        jLabel4.setEnabled(jAdjustingDistribution.isSelected());
        jLabel5.setEnabled(jAdjustingDistribution.isSelected());
        jLabel6.setEnabled(jAdjustingDistribution.isSelected());
        jLabel7.setEnabled(jAdjustingDistribution.isSelected());
        jRemainWood.setEnabled(jAdjustingDistribution.isSelected());
        jRemainClay.setEnabled(jAdjustingDistribution.isSelected());
        jRemainIron.setEnabled(jAdjustingDistribution.isSelected());

    }//GEN-LAST:event_fireCalculationTypeChangedEvent

    private void fireTransferTransportsToBrowserEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireTransferTransportsToBrowserEvent


        /*   int[] rows = jResultsTable.getSelectedRows();
        if (rows == null || rows.length == 0) {
        return;
        }
        for (int i = 0; i < rows.length; i++) {
        //int row = jMerchantDataTable.convertRowIndexToModel(rows[i]);
        Village source = (Village) jResultsTable.getValueAt(rows[i], 0);
        Village target = (Village) jResultsTable.getValueAt(rows[i], 2);
        Transport trans = (Transport) jResultsTable.getValueAt(rows[i], 1);

        BrowserCommandSender.sendRes(source, target, trans);
        }*/
        if (iClickAccount == 0) {
            int row = jResultsTable.getSelectedRow();
            if (row == -1) {
                return;
            }
            int modelRow = jResultsTable.convertRowIndexToModel(row);
            Village source = (Village) jResultsTable.getValueAt(row, 0);
            Village target = (Village) jResultsTable.getValueAt(row, 2);
            Transport trans = (Transport) jResultsTable.getValueAt(row, 1);

            BrowserCommandSender.sendRes(source, target, trans);
            ((DefaultTableModel) jResultsTable.getModel()).setValueAt(Boolean.TRUE, modelRow, 3);
            ((DefaultListSelectionModel) jResultsTable.getSelectionModel()).setSelectionInterval(row + 1, row + 1);
        } else {
            int[] rows = jResultsTable.getSelectedRows();
            if (rows == null || rows.length == 0) {
                return;
            }
            for (int i = 0; i < rows.length; i++) {
                int modelRow = jResultsTable.convertRowIndexToModel(rows[i]);
                Village source = (Village) jResultsTable.getValueAt(rows[i], 0);
                Village target = (Village) jResultsTable.getValueAt(rows[i], 2);
                Transport trans = (Transport) jResultsTable.getValueAt(rows[i], 1);

                BrowserCommandSender.sendRes(source, target, trans);
                ((DefaultTableModel) jResultsTable.getModel()).setValueAt(Boolean.TRUE, modelRow, 3);
                iClickAccount--;
                updateClickAccount();
                if (iClickAccount == 0) {
                    break;
                }
            }
        }
    }//GEN-LAST:event_fireTransferTransportsToBrowserEvent

    private void fireAlwaysOnTopEvent(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fireAlwaysOnTopEvent
        jResultFrame.setAlwaysOnTop(!jResultFrame.isAlwaysOnTop());
    }//GEN-LAST:event_fireAlwaysOnTopEvent

    private void fireClickAccountChangedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireClickAccountChangedEvent
        iClickAccount++;
        updateClickAccount();
    }//GEN-LAST:event_fireClickAccountChangedEvent

    private void fireRemoveTransportsEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireRemoveTransportsEvent
        int[] rows = jResultsTable.getSelectedRows();
        if (rows.length == 0) {
            return;
        }

        String message = ((rows.length == 1) ? "Transport " : (rows.length + " Transporte ")) + "wirklich lÃ¶schen?";
        if (JOptionPaneHelper.showQuestionConfirmBox(this, message, "Transporte lÃ¶schen", "Nein", "Ja") != JOptionPane.YES_OPTION) {
            return;
        }

        jResultsTable.editingCanceled(new ChangeEvent(this));

        for (int r = rows.length - 1; r >= 0; r--) {
            jResultsTable.invalidate();
            int row = jResultsTable.convertRowIndexToModel(rows[r]);
            ((DefaultTableModel) jResultsTable.getModel()).removeRow(row);
            jResultsTable.revalidate();
        }
        jResultsTable.repaint();//.updateUI();
    }//GEN-LAST:event_fireRemoveTransportsEvent

    private void updateClickAccount() {
        jClickAccountLabel.setToolTipText(iClickAccount + " Klick(s) aufgeladen");
        jClickAccountLabel.setText("Klick-Konto [" + iClickAccount + "]");
    }

    private void rebuildTable(JTable pTable, List<VillageMerchantInfo> pMerchantInfos) {
        DefaultTableModel model = null;
        model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Dorf", "Holz", "Lehm", "Eisen", "Speicher", "HÃ¤ndler", "Handelsrichtung"
                }) {

            Class[] types = new Class[]{
                Village.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, VillageMerchantInfo.Direction.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        for (VillageMerchantInfo info : pMerchantInfos) {
            //add table rows
            // System.out.println(info);
            model.addRow(new Object[]{DataHolder.getSingleton().getVillages()[info.getVillage().getX()][info.getVillage().getY()], info.getWoodStock(), info.getClayStock(), info.getIronStock(), info.getStashCapacity(), info.getAvailableMerchants() + "/" + info.getOverallMerchants(), info.getDirection()});
        }

        //set model
        pTable.setModel(model);
        pTable.setRowHeight(20);
        //set sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>();

        pTable.setRowSorter(sorter);

        sorter.setModel(model);
        //set cell renderers
        AlternatingColorCellRenderer rend = new AlternatingColorCellRenderer();

        pTable.setDefaultRenderer(Village.class, rend);
        pTable.setDefaultRenderer(String.class, rend);
        pTable.setDefaultRenderer(VillageMerchantInfo.Direction.class, new TradeDirectionCellRenderer());
        pTable.setDefaultRenderer(Integer.class, new NumberFormatCellRenderer());

        //build table header
        SortableTableHeaderRenderer mHeaderRenderer = new SortableTableHeaderRenderer();

        for (int i = 0; i < pTable.getColumnCount(); i++) {
            pTable.getColumn(pTable.getColumnName(i)).setHeaderRenderer(mHeaderRenderer);
        }
    }

    public static class Resource {

        public enum Type {

            WOOD, CLAY, IRON
        }
        private int amount;
        private Type type;

        public Resource(int pAmount, Type pType) {
            setAmount(pAmount);
            setType(pType);
        }

        /**
         * @return the amount
         */
        public int getAmount() {
            return amount;
        }

        /**
         * @param amount the amount to set
         */
        public void setAmount(int amount) {
            this.amount = amount;
        }

        /**
         * @return the type
         */
        public Type getType() {
            return type;
        }

        /**
         * @param type the type to set
         */
        public void setType(Type type) {
            this.type = type;
        }
    }

    public static class Transport {

        private List<Resource> resourceTransports;

        public Transport(List<Resource> pResourceTransports) {
            setSingleTransports(pResourceTransports);
        }

        /**
         * @return the amount
         */
        public List<Resource> getSingleTransports() {
            return resourceTransports;
        }

        /**
         * @param amount the amount to set
         */
        public void setSingleTransports(List<Resource> pTransports) {
            resourceTransports = new LinkedList<Resource>();
            resourceTransports.add(new Resource(0, Resource.Type.WOOD));
            resourceTransports.add(new Resource(0, Resource.Type.CLAY));
            resourceTransports.add(new Resource(0, Resource.Type.IRON));
            for (Resource r : pTransports) {
                if (r.getType() == Resource.Type.WOOD) {
                    resourceTransports.get(0).setAmount(r.getAmount());
                } else if (r.getType() == Resource.Type.CLAY) {
                    resourceTransports.get(1).setAmount(r.getAmount());
                } else if (r.getType() == Resource.Type.IRON) {
                    resourceTransports.get(2).setAmount(r.getAmount());
                }
            }
        }

        public boolean hasGoods() {
            return resourceTransports.get(0).getAmount() > 0 || resourceTransports.get(1).getAmount() > 0 || resourceTransports.get(2).getAmount() > 0;
        }
    }

    private void buildResults(List<VillageMerchantInfo> pInfos, List<List<MerchantSource>> pResults, int[] pTargetRes) {

        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Herkunft", "Rohstoff", "Ziel", "Ãbertragen"
                }) {

            Class[] types = new Class[]{
                Village.class, Transport.class, Village.class, Boolean.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        int usedMerchants = 0;
        int usedTransports = 0;
        if (!pResults.isEmpty()) {
            Hashtable<Village, Hashtable<Village, List<Resource>>> transports = new Hashtable<Village, Hashtable<Village, List<Resource>>>();
            for (int i = 0; i < 3; i++) {
                Resource.Type current = null;
                switch (i) {
                    case 0:
                        current = Resource.Type.WOOD;
                        break;
                    case 1:
                        current = Resource.Type.CLAY;
                        break;
                    case 2:
                        current = Resource.Type.IRON;
                        break;
                }
                List<MerchantSource> resultForResource = pResults.get(i);

                for (MerchantSource source : resultForResource) {
                    Village sourceVillage = DataHolder.getSingleton().getVillages()[source.getC().getX()][source.getC().getY()];
                    Hashtable<Village, List<Resource>> transportsForSource = transports.get(sourceVillage);

                    if (transportsForSource == null) {
                        transportsForSource = new Hashtable<Village, List<Resource>>();
                        transports.put(sourceVillage, transportsForSource);
                    }

                    for (Order order : source.getOrders()) {
                        // Village sourceVillage = DataHolder.getSingleton().getVillages()[source.getC().getX()][source.getC().getY()];
                        MerchantDestination dest = (MerchantDestination) order.getDestination();
                        Village targetVillage = DataHolder.getSingleton().getVillages()[dest.getC().getX()][dest.getC().getY()];
                        List<Resource> transportsFromSourceToDest = transportsForSource.get(targetVillage);
                        if (transportsFromSourceToDest == null) {
                            transportsFromSourceToDest = new LinkedList<Resource>();
                            transportsForSource.put(targetVillage, transportsFromSourceToDest);
                        }
                        int amount = order.getAmount();
                        int merchants = amount;
                        if (merchants > 0) {
                            Resource res = new Resource(merchants * 1000, current);
                            transportsFromSourceToDest.add(res);
                            // Village targetVillage = DataHolder.getSingleton().getVillages()[dest.getC().getX()][dest.getC().getY()];
                            //  model.addRow(new Object[]{sourceVillage, res, targetVillage});
                            usedTransports++;
                            usedMerchants += merchants;
                        }
                    }
                }
            }

            int minAmount = 0;

            try {
                minAmount = Integer.parseInt(jMinTransportAmount.getText());
            } catch (Exception e) {
                minAmount = -1;
            }
            // System.out.println(transports);
            Enumeration<Village> sourceKeys = transports.keys();
            while (sourceKeys.hasMoreElements()) {
                Village sourceVillage = sourceKeys.nextElement();

                Hashtable<Village, List<Resource>> transportsFromSource = transports.get(sourceVillage);
                Enumeration<Village> destKeys = transportsFromSource.keys();
                while (destKeys.hasMoreElements()) {
                    Village targetVillage = destKeys.nextElement();
                    // Village targetVillage = DataHolder.getSingleton().getVillages()[dest.getC().getX()][dest.getC().getY()];
                    Transport trans = new Transport(transportsFromSource.get(targetVillage));
                    if (trans.hasGoods()) {
                        if (jIgnoreTransportsButton.isSelected()) {
                            int amount = trans.getSingleTransports().get(0).getAmount() + trans.getSingleTransports().get(1).getAmount() + trans.getSingleTransports().get(2).getAmount();
                            if (amount >= minAmount) {
                                model.addRow(new Object[]{sourceVillage, trans, targetVillage, false});
                            } else {
                                usedTransports--;
                            }
                        } else {
                            model.addRow(new Object[]{sourceVillage, trans, targetVillage, false});
                        }
                    }
                }
            }
        }
        jResultsTable.setModel(model);
        int perfectResults = 0;
        for (VillageMerchantInfo info : pInfos) {
            if (info.getWoodStock() >= pTargetRes[0] && info.getClayStock() >= pTargetRes[1] && info.getIronStock() >= pTargetRes[2]) {
                perfectResults++;
            }
        }
        //set additional infos
        jUsedMerchants.setText(Integer.toString(usedMerchants));
        jUsedTransports.setText(Integer.toString(usedTransports));
        jPerfectResults.setText(Integer.toString(perfectResults));

        //set sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>();
        jResultsTable.setRowSorter(sorter);
        sorter.setModel(model);
        jResultsTable.setDefaultRenderer(Village.class, new VillageCellRenderer());
        jResultsTable.setDefaultRenderer(Transport.class, new TransportCellRenderer());
        jResultsTable.setDefaultRenderer(Boolean.class, new BooleanCellRenderer());
        SortableTableHeaderRenderer mHeaderRenderer = new SortableTableHeaderRenderer();
        for (int i = 0; i < jResultsTable.getColumnCount(); i++) {
            jResultsTable.getColumn(jResultsTable.getColumnName(i)).setHeaderRenderer(mHeaderRenderer);
        }
        rebuildTable(jResultsDataTable, pInfos);
        jResultFrame.pack();
        if (!pResults.isEmpty()) {
            jResultFrame.setVisible(true);
        }
    }

    @Override
    public void fireVillagesDraggedEvent(List<Village> pVillages, Point pDropLocation) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton jAdjustingDistribution;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jClickAccountLabel;
    private javax.swing.JRadioButton jEqualDistribution;
    private javax.swing.JCheckBox jIgnoreTransportsButton;
    private javax.swing.JButton jInsertBothButton;
    private javax.swing.JButton jInsertReceiveButton;
    private javax.swing.JButton jInsertSendButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTable jMerchantDataTable;
    private javax.swing.JTextField jMinTransportAmount;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jPerfectResults;
    private javax.swing.JTextField jRemainClay;
    private javax.swing.JTextField jRemainIron;
    private javax.swing.JTextField jRemainWood;
    private javax.swing.JFrame jResultFrame;
    private javax.swing.JTable jResultsDataTable;
    private javax.swing.JTable jResultsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTargetClay;
    private javax.swing.JTextField jTargetIron;
    private javax.swing.JTextField jTargetWood;
    private com.l2fprod.common.swing.JTaskPane jTaskPane1;
    private com.l2fprod.common.swing.JTaskPaneGroup jTaskPaneGroup1;
    private com.l2fprod.common.swing.JTaskPaneGroup jTaskPaneGroup2;
    private javax.swing.JButton jTradeBothButton;
    private javax.swing.JButton jTradeInButton;
    private javax.swing.JButton jTradeOutButton;
    private javax.swing.JLabel jUsedMerchants;
    private javax.swing.JLabel jUsedTransports;
    // End of variables declaration//GEN-END:variables
}
