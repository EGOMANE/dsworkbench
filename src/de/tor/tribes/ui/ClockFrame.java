/*
 * ClockFrame.java
 *
 * Created on 7. Juli 2008, 08:15
 */
package de.tor.tribes.ui;

import de.tor.tribes.util.Constants;
import de.tor.tribes.util.GlobalOptions;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.JSpinner.DateEditor;

/**
 * @author  Jejkal
 */
public class ClockFrame extends javax.swing.JFrame {

    private TimerThread tThread = null;
    private static ClockFrame SINGLETON = null;

    public static synchronized ClockFrame getSingleton() {
        if (SINGLETON == null) {
            SINGLETON = new ClockFrame();
        }
        return SINGLETON;
    }

    /** Creates new form ClockFrame */
    ClockFrame() {
        initComponents();
        getContentPane().setBackground(Constants.DS_BACK);
        jSpinner1.setValue(new Date(System.currentTimeMillis()));
        ((DateEditor) jSpinner1.getEditor()).getFormat().applyPattern("dd.MM.yy HH:mm:ss.SSS");
        //tThread = new TimerThread(this);
       // tThread.start();
           // <editor-fold defaultstate="collapsed" desc=" Init HelpSystem ">
       GlobalOptions.getHelpBroker().enableHelpKey(getRootPane(), "pages.clock_tool", GlobalOptions.getHelpBroker().getHelpSet());
        // </editor-fold>
    }

    protected void updateTime(String time) {
        jLabel1.setText(time);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jActivateTimerButton = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        jSpinner1.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MILLISECOND));

        jActivateTimerButton.setBackground(new java.awt.Color(239, 235, 223));
        jActivateTimerButton.setText("Aktivieren");
        jActivateTimerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fireActivateTimerEvent(evt);
            }
        });

        setTitle("Uhr");

        jLabel1.setBackground(new java.awt.Color(239, 235, 223));
        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void fireActivateTimerEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireActivateTimerEvent
   /* if (jActivateTimerButton.isSelected()) {
        tThread.setNotifyTime(((Date) jSpinner1.getValue()).getTime());
    } else {
        tThread.setNotifyTime(-1);
    }*/
}//GEN-LAST:event_fireActivateTimerEvent

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClockFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jActivateTimerButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables

    public void beep() {
        jActivateTimerButton.setSelected(false);
        Toolkit.getDefaultToolkit().beep();
    }
}

class TimerThread extends Thread {

    private ClockFrame mParent;
    private final SimpleDateFormat FORMAT = new SimpleDateFormat("HH:mm:ss:SSS");
    private long lNotifyTime = -1;

    public TimerThread(ClockFrame pParent) {
        mParent = pParent;
        setDaemon(true);
    }

    public void setNotifyTime(long pTime) {
        lNotifyTime = pTime;
    }

    public void run() {
        while (true) {
            long currentTime = System.currentTimeMillis();

            if ((lNotifyTime != -1) && (currentTime >= lNotifyTime)) {
                mParent.beep();try{
               new TrayIcon(ImageIO.read(new File("./graphics/big/axe.png"))).displayMessage("Some Message", "ALARM!", TrayIcon.MessageType.INFO);
                }catch(Exception e){}
                lNotifyTime = -1;
            }
            if (mParent.isVisible()) {
                mParent.updateTime(FORMAT.format(new Date(currentTime)));
                mParent.repaint();
            }
            try {
                Thread.sleep(50);
            } catch (InterruptedException ie) {
            }
        }
    }
    // NIST, Boulder, Colorado  (time-a.timefreq.bldrdoc.gov)
    public static final String ATOMICTIME_SERVER = "http://132.163.4.101:13";
    // NIST, Gaithersburg, Maryland (time-a.nist.gov)
    // public static final String ATOMICTIME_SERVER="http://129.6.15.28:13";
}
