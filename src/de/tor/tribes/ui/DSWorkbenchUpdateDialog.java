/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DSWorkbenchUpdateDialog.java
 *
 * Created on Oct 29, 2011, 12:45:01 PM
 */
package de.tor.tribes.ui;

import de.tor.tribes.util.AutoUpdater;
import de.tor.tribes.util.UpdateListener;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.List;
import javax.swing.JProgressBar;
import org.apache.log4j.Logger;

/**
 *
 * @author Torridity
 */
@SuppressWarnings("serial")
public class DSWorkbenchUpdateDialog extends javax.swing.JDialog implements UpdateListener {

    private static Logger logger = Logger.getLogger("DSWorkbenchUpdateDialog");
    private int filesToUpdate = 0;
    private int updatedFiles = 0;
    private UPDATE_RESULT result = UPDATE_RESULT.READY;
    private List<String> updates = null;

    public enum UPDATE_RESULT {

        READY, SUCCESS, ERROR, CANCELED, NOT_NEEDED
    }

    /** Creates new form DSWorkbenchUpdateDialog
     * @param parent
     * @param modal  
     */
    public DSWorkbenchUpdateDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jChangelogFrame.setAlwaysOnTop(true);
        jChangelogFrame.pack();
        try {
            updates = AutoUpdater.getUpdatedResources();
            if (updates.isEmpty()) {
                result = UPDATE_RESULT.NOT_NEEDED;
                fireUpdateFinishedEvent(true, "Kein Update notwendig");
                jButton1.setText("Schließen");
            } else {
                filesToUpdate = updates.size();
                jProgressBar1.setString(filesToUpdate + " Aktualisierungen gefunden");
                jButton1.setText("Update starten");
            }
        } catch (IOException ioe) {
            logger.error("Failed to obtain update list", ioe);
            result = UPDATE_RESULT.ERROR;
            jButton1.setText("Schließen");
        }
    }

    public UPDATE_RESULT getResult() {
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jChangelogFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jButton3 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();

        jChangelogFrame.setTitle("Changelog");
        jChangelogFrame.setAlwaysOnTop(true);
        jChangelogFrame.setMinimumSize(new java.awt.Dimension(600, 250));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(580, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(580, 200));

        jEditorPane1.setContentType("text/html");
        jEditorPane1.setEditable(false);
        jEditorPane1.setText("");
        jScrollPane1.setViewportView(jEditorPane1);

        jButton3.setText("Schließen");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fireHideChangelogEvent(evt);
            }
        });

        javax.swing.GroupLayout jChangelogFrameLayout = new javax.swing.GroupLayout(jChangelogFrame.getContentPane());
        jChangelogFrame.getContentPane().setLayout(jChangelogFrameLayout);
        jChangelogFrameLayout.setHorizontalGroup(
            jChangelogFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jChangelogFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jChangelogFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addComponent(jButton3))
                .addContainerGap())
        );
        jChangelogFrameLayout.setVerticalGroup(
            jChangelogFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jChangelogFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update");
        setMinimumSize(new java.awt.Dimension(450, 150));
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                fireUpdateCanceledEvent(evt);
            }
        });

        jProgressBar1.setMaximum(10000);
        jProgressBar1.setStringPainted(true);

        jButton1.setText("Update starten");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                firePerformUpdateEvent(evt);
            }
        });

        jButton2.setText("Änderungen anzeigen");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fireShowChangelogEvent(evt);
            }
        });

        jButton4.setText("Überspringen");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fireSkipUpdateEvent(evt);
            }
        });

        jEditorPane2.setContentType("text/html");
        jEditorPane2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jEditorPane2.setText("<html>\r\n Es stehen Updates für DS Workbench zur Verf&uuml;gung. Klicke auf <i>Update starten</i>, um deine Installation zu aktualisieren. Nach der Aktualisierung ist ein <b>Neustart</b> von DS Workbench <b>notwendig</b>.\n</html>\r\n");
        jScrollPane2.setViewportView(jEditorPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firePerformUpdateEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_firePerformUpdateEvent
        if (jButton1.getText().equals("Schließen")) {
            dispose();
        } else {
            jProgressBar1.setForeground(new JProgressBar().getForeground());
            updatedFiles = 0;
            new UpdateThread(updates, this).start();
        }
    }//GEN-LAST:event_firePerformUpdateEvent

    private void fireShowChangelogEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireShowChangelogEvent
        try {
            jEditorPane1.setText(AutoUpdater.obtainChangeLog());
            jChangelogFrame.setLocationRelativeTo(this);
            jChangelogFrame.setVisible(true);
        } catch (IOException ioe) {
            logger.error("Failed to obtain changelog", ioe);
            fireUpdateFinishedEvent(false, "Changelog konnte nicht geladen werden");
        }
    }//GEN-LAST:event_fireShowChangelogEvent

    private void fireHideChangelogEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireHideChangelogEvent
        jChangelogFrame.setVisible(false);
    }//GEN-LAST:event_fireHideChangelogEvent

    private void fireUpdateCanceledEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_fireUpdateCanceledEvent
        result = UPDATE_RESULT.CANCELED;
    }//GEN-LAST:event_fireUpdateCanceledEvent

    private void fireSkipUpdateEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireSkipUpdateEvent
        result = UPDATE_RESULT.CANCELED;
        setVisible(false);
    }//GEN-LAST:event_fireSkipUpdateEvent

    @Override
    public final void fireResourceUpdatedEvent(String pResource, double pPercentFinished) {
        jProgressBar1.setValue((int) Math.rint(pPercentFinished * 100));
        updatedFiles++;
        jProgressBar1.setString(updatedFiles + "/" + filesToUpdate + " Dateien aktualisiert");
        jProgressBar1.repaint();
    }

    @Override
    public final void fireUpdateFinishedEvent(boolean pResult, String pMessage) {
        if (pResult) {
            jProgressBar1.setForeground(Color.GREEN);
            jProgressBar1.setString("Update erfolgreich");
            jButton1.setText("Schließen");
            result = UPDATE_RESULT.SUCCESS;
        } else {
            jProgressBar1.setString(pMessage);
            jProgressBar1.setForeground(Color.YELLOW);
            result = UPDATE_RESULT.ERROR;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DSWorkbenchUpdateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DSWorkbenchUpdateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DSWorkbenchUpdateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DSWorkbenchUpdateDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        final DSWorkbenchUpdateDialog dialog = new DSWorkbenchUpdateDialog(null, true);
        dialog.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println("OK " + dialog.getResult());
                System.exit(0);
            }
        });
        dialog.setVisible(true);


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JFrame jChangelogFrame;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}

class UpdateThread extends Thread {

    private static Logger logger = Logger.getLogger("UpdateThread");
    private List<String> resources = null;
    private UpdateListener listener = null;

    public UpdateThread(List<String> pResources, UpdateListener pListener) {
        resources = pResources;
        listener = pListener;
        setDaemon(true);
    }

    @Override
    public void run() {
        try {
            AutoUpdater.downloadUpdate(resources, listener);
        } catch (IOException ioe) {
            logger.error("Failed to download updates", ioe);
        }
    }
}
