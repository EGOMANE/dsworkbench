/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SecondPage.java
 *
 * Created on Aug 27, 2011, 2:52:58 PM
 */
package de.tor.tribes.ui.wiz;

import de.tor.tribes.php.DatabaseInterface;
import java.net.Proxy;
import java.util.Map;
import org.netbeans.spi.wizard.Wizard;
import org.netbeans.spi.wizard.WizardController;
import org.netbeans.spi.wizard.WizardPanel;
import org.netbeans.spi.wizard.WizardPanelNavResult;

/**
 *
 * @author Torridity
 */
public class AccountSettings extends javax.swing.JPanel implements WizardPanel {

    private WizardController wizCtrl;
    private Map currentSettings = null;

    /** Creates new form SecondPage */
    public AccountSettings(final WizardController pWizCtrl, final Map map) {
        initComponents();
        wizCtrl = pWizCtrl;
        currentSettings = map;
        wizCtrl.setProblem("Bitte gib deine Accountdaten ein und klicke Registrieren.");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPasswordValidate = new javax.swing.JPasswordField();

        setMaximumSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(400, 400));
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMaximumSize(new java.awt.Dimension(400, 250));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 250));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 250));

        jTextPane1.setContentType("text/html");
        jTextPane1.setEditable(false);
        jTextPane1.setText("<html>Um DS Workbench verwenden zu können, benötigst du einen DS Workbench Account.\nDieser erlaubt es dir, Weltdaten vom DS Workbench Server herunterzuladen und Fotos\ndeiner Karte hochzuladen. Gib deinen gewünschten Benutzernamen und dein Passwort ein und klicke\nanschließend auf <b>Registrieren</b>. Verfügst du bereits über einen DS Workbench Account kannst du natürlich diese Daten eingeben und per <b>Registrieren</b> prüfen.<br/><br/>\n<font color=\"#FF0000\"><b>ACHTUNG:</b> Der gewählte Benutzername und das Passwort sollten aus Sicherheitsgründen nicht den Daten deines 'Die Stämme' Accounts entsprechen!</font><br/><br/>\n</html>");
        jTextPane1.setMaximumSize(new java.awt.Dimension(400, 400));
        jTextPane1.setMinimumSize(new java.awt.Dimension(400, 400));
        jTextPane1.setPreferredSize(new java.awt.Dimension(400, 400));
        jScrollPane1.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jPanel1.setMaximumSize(new java.awt.Dimension(400, 150));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 150));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Benutzername");
        jLabel1.setMaximumSize(new java.awt.Dimension(150, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(150, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(150, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jLabel1, gridBagConstraints);

        jUsername.setMaximumSize(new java.awt.Dimension(150, 20));
        jUsername.setMinimumSize(new java.awt.Dimension(150, 20));
        jUsername.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jUsername, gridBagConstraints);

        jLabel2.setText("Passwort");
        jLabel2.setMaximumSize(new java.awt.Dimension(150, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(150, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(150, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jLabel2, gridBagConstraints);

        jButton1.setText("Registrieren");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fireCheckAccount(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(jButton1, gridBagConstraints);

        jPassword.setMaximumSize(new java.awt.Dimension(150, 20));
        jPassword.setMinimumSize(new java.awt.Dimension(150, 20));
        jPassword.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jPassword, gridBagConstraints);

        jLabel3.setText("Passwort wiederholen");
        jLabel3.setMaximumSize(new java.awt.Dimension(150, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(150, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(150, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jLabel3, gridBagConstraints);

        jPasswordValidate.setMaximumSize(new java.awt.Dimension(150, 20));
        jPasswordValidate.setMinimumSize(new java.awt.Dimension(150, 20));
        jPasswordValidate.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jPasswordValidate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void fireCheckAccount(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fireCheckAccount

    String user = jUsername.getText();
    String password = new String(jPassword.getPassword());
    String password2 = new String(jPasswordValidate.getPassword());

    if ((user.length() < 3) || (password.length() < 3)) {
        wizCtrl.setProblem("Accountname und Passwort müssen mindestens 3 Zeichen lang sein.");
        return;
    }

    if (user.length() > 20) {
        wizCtrl.setProblem("Der Accountname darf höchstens 20 Zeichen lang sein.");
        return;
    }

    if (!password.equals(password2)) {
        wizCtrl.setProblem("Die eingegebenen Passwörter unterscheiden sich.");
        return;
    }

    Proxy proxy = ProxyHelper.getProxyFromProperties(currentSettings);
    int ret = DatabaseInterface.addUser(jUsername.getText(), new String(jPassword.getPassword()), proxy);
    switch (ret) {
        case DatabaseInterface.ID_DATABASE_CONNECTION_FAILED: {
            wizCtrl.setProblem("Fehler beim Verbinden mit der Datenbank.\nBitte versuch es in Kürze noch einmal.");
            break;
        }
        case DatabaseInterface.ID_WEB_CONNECTION_FAILED: {
            wizCtrl.setProblem("Es konnte keine Verbindung mit dem Server hergestellt werden.\nBitte versuch es in Kürze noch einmal.");
            break;

        }
        case DatabaseInterface.ID_USER_ALREADY_EXIST: {
            if (!(DatabaseInterface.checkUser(user, password, proxy) == DatabaseInterface.ID_SUCCESS)) {
                wizCtrl.setProblem("Der gewählte Name ist bereits vergeben.");
            } else {
                wizCtrl.setProblem(null);
                currentSettings.put("account.name", user);
                currentSettings.put("account.password", password);
            }
            break;
        }
        case DatabaseInterface.ID_QUERY_RETURNED_UNEXPECTED_RESULT: {
            wizCtrl.setProblem("Der Benutzer konnte nicht in hinzugefügt werden.\nBitte wende dich an den Entwickler.");
            break;
        }
        case DatabaseInterface.ID_UNKNOWN_ERROR: {
            wizCtrl.setProblem("Ein unbekannter Fehler ist aufgetreten.\nBitte wende dich an den Entwickler.");
            break;
        }
        default:
            wizCtrl.setProblem(null);
            currentSettings.put("account.name", user);
            currentSettings.put("account.password", password);
    }
}//GEN-LAST:event_fireCheckAccount
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPassword;
    private javax.swing.JPasswordField jPasswordValidate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField jUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public WizardPanelNavResult allowNext(String stepName, Map settings, Wizard wizard) {
        return WizardPanelNavResult.PROCEED;
    }

    @Override
    public WizardPanelNavResult allowBack(String stepName, Map settings, Wizard wizard) {
        return WizardPanelNavResult.PROCEED;
    }

    @Override
    public WizardPanelNavResult allowFinish(String stepName, Map settings, Wizard wizard) {
        return WizardPanelNavResult.PROCEED;
    }
}
